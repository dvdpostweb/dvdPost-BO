'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("StudioBillingReport"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class StudioBillingReport
    Inherits Global.System.Data.DataSet
    
    Private tabledetailed_report As detailed_reportDataTable
    
    Private tablesummary_report As summary_reportDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("detailed_report")) Is Nothing) Then
                MyBase.Tables.Add(New detailed_reportDataTable(ds.Tables("detailed_report")))
            End If
            If (Not (ds.Tables("summary_report")) Is Nothing) Then
                MyBase.Tables.Add(New summary_reportDataTable(ds.Tables("summary_report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property detailed_report() As detailed_reportDataTable
        Get
            Return Me.tabledetailed_report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property summary_report() As summary_reportDataTable
        Get
            Return Me.tablesummary_report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As StudioBillingReport = CType(MyBase.Clone,StudioBillingReport)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("detailed_report")) Is Nothing) Then
                MyBase.Tables.Add(New detailed_reportDataTable(ds.Tables("detailed_report")))
            End If
            If (Not (ds.Tables("summary_report")) Is Nothing) Then
                MyBase.Tables.Add(New summary_reportDataTable(ds.Tables("summary_report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledetailed_report = CType(MyBase.Tables("detailed_report"),detailed_reportDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledetailed_report) Is Nothing) Then
                Me.tabledetailed_report.InitVars
            End If
        End If
        Me.tablesummary_report = CType(MyBase.Tables("summary_report"),summary_reportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesummary_report) Is Nothing) Then
                Me.tablesummary_report.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "StudioBillingReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/StudioBillingReport.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledetailed_report = New detailed_reportDataTable
        MyBase.Tables.Add(Me.tabledetailed_report)
        Me.tablesummary_report = New summary_reportDataTable
        MyBase.Tables.Add(Me.tablesummary_report)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedetailed_report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesummary_report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As StudioBillingReport = New StudioBillingReport
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub detailed_reportRowChangeEventHandler(ByVal sender As Object, ByVal e As detailed_reportRowChangeEvent)
    
    Public Delegate Sub summary_reportRowChangeEventHandler(ByVal sender As Object, ByVal e As summary_reportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class detailed_reportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnvodstudio As Global.System.Data.DataColumn
        
        Private columnproductstudio As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        Private columncustomer_id As Global.System.Data.DataColumn
        
        Private columncustomers_abo_type As Global.System.Data.DataColumn
        
        Private columncustomers_lastname As Global.System.Data.DataColumn
        
        Private columncustomers_firstname As Global.System.Data.DataColumn
        
        Private columncustomers_language As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columnproducts_type As Global.System.Data.DataColumn
        
        Private columncreated_at As Global.System.Data.DataColumn
        
        Private columnproducts_date_available As Global.System.Data.DataColumn
        
        Private columnavailable_from As Global.System.Data.DataColumn
        
        Private columnexpire_at As Global.System.Data.DataColumn
        
        Private columnavailable_backcatalogue_from As Global.System.Data.DataColumn
        
        Private columnexpire_backcatalogue_at As Global.System.Data.DataColumn
        
        Private columncatalogue_type As Global.System.Data.DataColumn
        
        Private columnproducts_price As Global.System.Data.DataColumn
        
        Private columnqty_credit As Global.System.Data.DataColumn
        
        Private columnqty_at_home As Global.System.Data.DataColumn
        
        Private columncredits As Global.System.Data.DataColumn
        
        Private columnprice_of_movie_tvac As Global.System.Data.DataColumn
        
        Private columnprice_of_movie_htva As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "detailed_report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vodstudioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvodstudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property productstudioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductstudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customer_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomer_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_lastnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_lastname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_firstnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_firstname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_languageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_language
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property created_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_date_availableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_date_available
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property available_fromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavailable_from
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expire_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpire_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property available_backcatalogue_fromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavailable_backcatalogue_from
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expire_backcatalogue_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpire_backcatalogue_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property catalogue_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatalogue_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty_at_homeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_at_home
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property creditsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncredits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property price_of_movie_tvacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice_of_movie_tvac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property price_of_movie_htvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice_of_movie_htva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As detailed_reportRow
            Get
                Return CType(Me.Rows(index),detailed_reportRow)
            End Get
        End Property
        
        Public Event detailed_reportRowChanging As detailed_reportRowChangeEventHandler
        
        Public Event detailed_reportRowChanged As detailed_reportRowChangeEventHandler
        
        Public Event detailed_reportRowDeleting As detailed_reportRowChangeEventHandler
        
        Public Event detailed_reportRowDeleted As detailed_reportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddetailed_reportRow(ByVal row As detailed_reportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddetailed_reportRow( _
                    ByVal vodstudio As String,  _
                    ByVal productstudio As String,  _
                    ByVal products_title As String,  _
                    ByVal customer_id As Integer,  _
                    ByVal customers_abo_type As Integer,  _
                    ByVal customers_lastname As String,  _
                    ByVal customers_firstname As String,  _
                    ByVal customers_language As String,  _
                    ByVal imdb_id As Integer,  _
                    ByVal products_type As String,  _
                    ByVal created_at As Date,  _
                    ByVal products_date_available As Date,  _
                    ByVal available_from As Date,  _
                    ByVal expire_at As Date,  _
                    ByVal available_backcatalogue_from As Date,  _
                    ByVal expire_backcatalogue_at As Date,  _
                    ByVal catalogue_type As String,  _
                    ByVal products_price As Decimal,  _
                    ByVal qty_credit As Integer,  _
                    ByVal qty_at_home As Integer,  _
                    ByVal credits As Integer,  _
                    ByVal price_of_movie_tvac As Decimal,  _
                    ByVal price_of_movie_htva As Decimal,  _
                    ByVal amount As Decimal) As detailed_reportRow
            Dim rowdetailed_reportRow As detailed_reportRow = CType(Me.NewRow,detailed_reportRow)
            Dim columnValuesArray() As Object = New Object() {vodstudio, productstudio, products_title, customer_id, customers_abo_type, customers_lastname, customers_firstname, customers_language, imdb_id, products_type, created_at, products_date_available, available_from, expire_at, available_backcatalogue_from, expire_backcatalogue_at, catalogue_type, products_price, qty_credit, qty_at_home, credits, price_of_movie_tvac, price_of_movie_htva, amount}
            rowdetailed_reportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdetailed_reportRow)
            Return rowdetailed_reportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As detailed_reportDataTable = CType(MyBase.Clone,detailed_reportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New detailed_reportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnvodstudio = MyBase.Columns("vodstudio")
            Me.columnproductstudio = MyBase.Columns("productstudio")
            Me.columnproducts_title = MyBase.Columns("products_title")
            Me.columncustomer_id = MyBase.Columns("customer_id")
            Me.columncustomers_abo_type = MyBase.Columns("customers_abo_type")
            Me.columncustomers_lastname = MyBase.Columns("customers_lastname")
            Me.columncustomers_firstname = MyBase.Columns("customers_firstname")
            Me.columncustomers_language = MyBase.Columns("customers_language")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columnproducts_type = MyBase.Columns("products_type")
            Me.columncreated_at = MyBase.Columns("created_at")
            Me.columnproducts_date_available = MyBase.Columns("products_date_available")
            Me.columnavailable_from = MyBase.Columns("available_from")
            Me.columnexpire_at = MyBase.Columns("expire_at")
            Me.columnavailable_backcatalogue_from = MyBase.Columns("available_backcatalogue_from")
            Me.columnexpire_backcatalogue_at = MyBase.Columns("expire_backcatalogue_at")
            Me.columncatalogue_type = MyBase.Columns("catalogue_type")
            Me.columnproducts_price = MyBase.Columns("products_price")
            Me.columnqty_credit = MyBase.Columns("qty_credit")
            Me.columnqty_at_home = MyBase.Columns("qty_at_home")
            Me.columncredits = MyBase.Columns("credits")
            Me.columnprice_of_movie_tvac = MyBase.Columns("price_of_movie_tvac")
            Me.columnprice_of_movie_htva = MyBase.Columns("price_of_movie_htva")
            Me.columnamount = MyBase.Columns("amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnvodstudio = New Global.System.Data.DataColumn("vodstudio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvodstudio)
            Me.columnproductstudio = New Global.System.Data.DataColumn("productstudio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductstudio)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.columncustomer_id = New Global.System.Data.DataColumn("customer_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomer_id)
            Me.columncustomers_abo_type = New Global.System.Data.DataColumn("customers_abo_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_type)
            Me.columncustomers_lastname = New Global.System.Data.DataColumn("customers_lastname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_lastname)
            Me.columncustomers_firstname = New Global.System.Data.DataColumn("customers_firstname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_firstname)
            Me.columncustomers_language = New Global.System.Data.DataColumn("customers_language", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_language)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columnproducts_type = New Global.System.Data.DataColumn("products_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_type)
            Me.columncreated_at = New Global.System.Data.DataColumn("created_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated_at)
            Me.columnproducts_date_available = New Global.System.Data.DataColumn("products_date_available", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_date_available)
            Me.columnavailable_from = New Global.System.Data.DataColumn("available_from", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavailable_from)
            Me.columnexpire_at = New Global.System.Data.DataColumn("expire_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpire_at)
            Me.columnavailable_backcatalogue_from = New Global.System.Data.DataColumn("available_backcatalogue_from", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavailable_backcatalogue_from)
            Me.columnexpire_backcatalogue_at = New Global.System.Data.DataColumn("expire_backcatalogue_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpire_backcatalogue_at)
            Me.columncatalogue_type = New Global.System.Data.DataColumn("catalogue_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatalogue_type)
            Me.columnproducts_price = New Global.System.Data.DataColumn("products_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_price)
            Me.columnqty_credit = New Global.System.Data.DataColumn("qty_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_credit)
            Me.columnqty_at_home = New Global.System.Data.DataColumn("qty_at_home", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_at_home)
            Me.columncredits = New Global.System.Data.DataColumn("credits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncredits)
            Me.columnprice_of_movie_tvac = New Global.System.Data.DataColumn("price_of_movie_tvac", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice_of_movie_tvac)
            Me.columnprice_of_movie_htva = New Global.System.Data.DataColumn("price_of_movie_htva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice_of_movie_htva)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdetailed_reportRow() As detailed_reportRow
            Return CType(Me.NewRow,detailed_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New detailed_reportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(detailed_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.detailed_reportRowChangedEvent) Is Nothing) Then
                RaiseEvent detailed_reportRowChanged(Me, New detailed_reportRowChangeEvent(CType(e.Row,detailed_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.detailed_reportRowChangingEvent) Is Nothing) Then
                RaiseEvent detailed_reportRowChanging(Me, New detailed_reportRowChangeEvent(CType(e.Row,detailed_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.detailed_reportRowDeletedEvent) Is Nothing) Then
                RaiseEvent detailed_reportRowDeleted(Me, New detailed_reportRowChangeEvent(CType(e.Row,detailed_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.detailed_reportRowDeletingEvent) Is Nothing) Then
                RaiseEvent detailed_reportRowDeleting(Me, New detailed_reportRowChangeEvent(CType(e.Row,detailed_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedetailed_reportRow(ByVal row As detailed_reportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudioBillingReport = New StudioBillingReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "detailed_reportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class summary_reportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnvodstudio As Global.System.Data.DataColumn
        
        Private columnproductstudio As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        Private columnnumber_titles As Global.System.Data.DataColumn
        
        Private columntvac_sum As Global.System.Data.DataColumn
        
        Private columnhtvac_sum As Global.System.Data.DataColumn
        
        Private columnamount_sum As Global.System.Data.DataColumn
        
        Private columndate_created As Global.System.Data.DataColumn
        
        Private columnperiod_start As Global.System.Data.DataColumn
        
        Private columnperiod_end As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "summary_report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vodstudioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvodstudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property productstudioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductstudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property number_titlesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumber_titles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tvac_sumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntvac_sum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property htvac_sumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhtvac_sum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amount_sumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount_sum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_created
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property period_startColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnperiod_start
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property period_endColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnperiod_end
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As summary_reportRow
            Get
                Return CType(Me.Rows(index),summary_reportRow)
            End Get
        End Property
        
        Public Event summary_reportRowChanging As summary_reportRowChangeEventHandler
        
        Public Event summary_reportRowChanged As summary_reportRowChangeEventHandler
        
        Public Event summary_reportRowDeleting As summary_reportRowChangeEventHandler
        
        Public Event summary_reportRowDeleted As summary_reportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsummary_reportRow(ByVal row As summary_reportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsummary_reportRow(ByVal vodstudio As String, ByVal productstudio As String, ByVal products_title As String, ByVal number_titles As Integer, ByVal tvac_sum As Double, ByVal htvac_sum As Double, ByVal amount_sum As Double, ByVal date_created As Date, ByVal period_start As Date, ByVal period_end As Date) As summary_reportRow
            Dim rowsummary_reportRow As summary_reportRow = CType(Me.NewRow,summary_reportRow)
            Dim columnValuesArray() As Object = New Object() {vodstudio, productstudio, products_title, number_titles, tvac_sum, htvac_sum, amount_sum, date_created, period_start, period_end}
            rowsummary_reportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsummary_reportRow)
            Return rowsummary_reportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As summary_reportDataTable = CType(MyBase.Clone,summary_reportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New summary_reportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnvodstudio = MyBase.Columns("vodstudio")
            Me.columnproductstudio = MyBase.Columns("productstudio")
            Me.columnproducts_title = MyBase.Columns("products_title")
            Me.columnnumber_titles = MyBase.Columns("number_titles")
            Me.columntvac_sum = MyBase.Columns("tvac_sum")
            Me.columnhtvac_sum = MyBase.Columns("htvac_sum")
            Me.columnamount_sum = MyBase.Columns("amount_sum")
            Me.columndate_created = MyBase.Columns("date_created")
            Me.columnperiod_start = MyBase.Columns("period_start")
            Me.columnperiod_end = MyBase.Columns("period_end")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnvodstudio = New Global.System.Data.DataColumn("vodstudio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvodstudio)
            Me.columnproductstudio = New Global.System.Data.DataColumn("productstudio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductstudio)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.columnnumber_titles = New Global.System.Data.DataColumn("number_titles", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumber_titles)
            Me.columntvac_sum = New Global.System.Data.DataColumn("tvac_sum", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntvac_sum)
            Me.columnhtvac_sum = New Global.System.Data.DataColumn("htvac_sum", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhtvac_sum)
            Me.columnamount_sum = New Global.System.Data.DataColumn("amount_sum", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount_sum)
            Me.columndate_created = New Global.System.Data.DataColumn("date_created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_created)
            Me.columnperiod_start = New Global.System.Data.DataColumn("period_start", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnperiod_start)
            Me.columnperiod_end = New Global.System.Data.DataColumn("period_end", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnperiod_end)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsummary_reportRow() As summary_reportRow
            Return CType(Me.NewRow,summary_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New summary_reportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(summary_reportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.summary_reportRowChangedEvent) Is Nothing) Then
                RaiseEvent summary_reportRowChanged(Me, New summary_reportRowChangeEvent(CType(e.Row,summary_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.summary_reportRowChangingEvent) Is Nothing) Then
                RaiseEvent summary_reportRowChanging(Me, New summary_reportRowChangeEvent(CType(e.Row,summary_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.summary_reportRowDeletedEvent) Is Nothing) Then
                RaiseEvent summary_reportRowDeleted(Me, New summary_reportRowChangeEvent(CType(e.Row,summary_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.summary_reportRowDeletingEvent) Is Nothing) Then
                RaiseEvent summary_reportRowDeleting(Me, New summary_reportRowChangeEvent(CType(e.Row,summary_reportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesummary_reportRow(ByVal row As summary_reportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudioBillingReport = New StudioBillingReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "summary_reportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class detailed_reportRow
        Inherits Global.System.Data.DataRow
        
        Private tabledetailed_report As detailed_reportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledetailed_report = CType(Me.Table,detailed_reportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vodstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.vodstudioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vodstudio' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.vodstudioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property productstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.productstudioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productstudio' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.productstudioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.products_titleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_title' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customer_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.customer_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customer_id' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.customer_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_type() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.customers_abo_typeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_type' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.customers_abo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_lastname() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.customers_lastnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_lastname' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.customers_lastnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_firstname() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.customers_firstnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_firstname' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.customers_firstnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_language() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.customers_languageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_language' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.customers_languageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.imdb_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_type() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.products_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_type' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.products_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property created_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.created_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'created_at' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.created_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_date_available() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.products_date_availableColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_date_available' in table 'detailed_report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.products_date_availableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property available_from() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.available_fromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'available_from' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.available_fromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expire_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.expire_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'expire_at' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.expire_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property available_backcatalogue_from() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.available_backcatalogue_fromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'available_backcatalogue_from' in table 'detailed_report' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.available_backcatalogue_fromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expire_backcatalogue_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.expire_backcatalogue_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'expire_backcatalogue_at' in table 'detailed_report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.expire_backcatalogue_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property catalogue_type() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.catalogue_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'catalogue_type' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.catalogue_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.products_priceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_price' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.products_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty_credit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.qty_creditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty_credit' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.qty_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty_at_home() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.qty_at_homeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty_at_home' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.qty_at_homeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property credits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.creditsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'credits' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.creditsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price_of_movie_tvac() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.price_of_movie_tvacColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'price_of_movie_tvac' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.price_of_movie_tvacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price_of_movie_htva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.price_of_movie_htvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'price_of_movie_htva' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.price_of_movie_htvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledetailed_report.amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amount' in table 'detailed_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetailed_report.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvodstudioNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.vodstudioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvodstudioNull()
            Me(Me.tabledetailed_report.vodstudioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproductstudioNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.productstudioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproductstudioNull()
            Me(Me.tabledetailed_report.productstudioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_titleNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.products_titleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_titleNull()
            Me(Me.tabledetailed_report.products_titleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomer_idNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.customer_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomer_idNull()
            Me(Me.tabledetailed_report.customer_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_typeNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.customers_abo_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_typeNull()
            Me(Me.tabledetailed_report.customers_abo_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_lastnameNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.customers_lastnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_lastnameNull()
            Me(Me.tabledetailed_report.customers_lastnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_firstnameNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.customers_firstnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_firstnameNull()
            Me(Me.tabledetailed_report.customers_firstnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_languageNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.customers_languageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_languageNull()
            Me(Me.tabledetailed_report.customers_languageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me.tabledetailed_report.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_typeNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.products_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_typeNull()
            Me(Me.tabledetailed_report.products_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscreated_atNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.created_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcreated_atNull()
            Me(Me.tabledetailed_report.created_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_date_availableNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.products_date_availableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_date_availableNull()
            Me(Me.tabledetailed_report.products_date_availableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isavailable_fromNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.available_fromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setavailable_fromNull()
            Me(Me.tabledetailed_report.available_fromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexpire_atNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.expire_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexpire_atNull()
            Me(Me.tabledetailed_report.expire_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isavailable_backcatalogue_fromNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.available_backcatalogue_fromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setavailable_backcatalogue_fromNull()
            Me(Me.tabledetailed_report.available_backcatalogue_fromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexpire_backcatalogue_atNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.expire_backcatalogue_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexpire_backcatalogue_atNull()
            Me(Me.tabledetailed_report.expire_backcatalogue_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscatalogue_typeNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.catalogue_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcatalogue_typeNull()
            Me(Me.tabledetailed_report.catalogue_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_priceNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.products_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_priceNull()
            Me(Me.tabledetailed_report.products_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty_creditNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.qty_creditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty_creditNull()
            Me(Me.tabledetailed_report.qty_creditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty_at_homeNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.qty_at_homeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty_at_homeNull()
            Me(Me.tabledetailed_report.qty_at_homeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscreditsNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.creditsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcreditsNull()
            Me(Me.tabledetailed_report.creditsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprice_of_movie_tvacNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.price_of_movie_tvacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprice_of_movie_tvacNull()
            Me(Me.tabledetailed_report.price_of_movie_tvacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprice_of_movie_htvaNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.price_of_movie_htvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprice_of_movie_htvaNull()
            Me(Me.tabledetailed_report.price_of_movie_htvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tabledetailed_report.amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamountNull()
            Me(Me.tabledetailed_report.amountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class summary_reportRow
        Inherits Global.System.Data.DataRow
        
        Private tablesummary_report As summary_reportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesummary_report = CType(Me.Table,summary_reportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vodstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.vodstudioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vodstudio' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.vodstudioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property productstudio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.productstudioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productstudio' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.productstudioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.products_titleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_title' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property number_titles() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.number_titlesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'number_titles' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.number_titlesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tvac_sum() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.tvac_sumColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tvac_sum' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.tvac_sumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property htvac_sum() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.htvac_sumColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'htvac_sum' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.htvac_sumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount_sum() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.amount_sumColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amount_sum' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.amount_sumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_created() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.date_createdColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_created' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.date_createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property period_start() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.period_startColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'period_start' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.period_startColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property period_end() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesummary_report.period_endColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'period_end' in table 'summary_report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesummary_report.period_endColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvodstudioNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.vodstudioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvodstudioNull()
            Me(Me.tablesummary_report.vodstudioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproductstudioNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.productstudioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproductstudioNull()
            Me(Me.tablesummary_report.productstudioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_titleNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.products_titleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_titleNull()
            Me(Me.tablesummary_report.products_titleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnumber_titlesNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.number_titlesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnumber_titlesNull()
            Me(Me.tablesummary_report.number_titlesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istvac_sumNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.tvac_sumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settvac_sumNull()
            Me(Me.tablesummary_report.tvac_sumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ishtvac_sumNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.htvac_sumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sethtvac_sumNull()
            Me(Me.tablesummary_report.htvac_sumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isamount_sumNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.amount_sumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setamount_sumNull()
            Me(Me.tablesummary_report.amount_sumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_createdNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.date_createdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_createdNull()
            Me(Me.tablesummary_report.date_createdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isperiod_startNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.period_startColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setperiod_startNull()
            Me(Me.tablesummary_report.period_startColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isperiod_endNull() As Boolean
            Return Me.IsNull(Me.tablesummary_report.period_endColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setperiod_endNull()
            Me(Me.tablesummary_report.period_endColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class detailed_reportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As detailed_reportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As detailed_reportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As detailed_reportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class summary_reportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As summary_reportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As summary_reportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As summary_reportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
