'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5446
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsABOProcess"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsABOProcess
    Inherits Global.System.Data.DataSet
    
    Private tablewishlist As wishlistDataTable
    
    Private tablecustomers As customersDataTable
    
    Private tablecompensation_summary As compensation_summaryDataTable
    
    Private tableuser_log_view1 As user_log_view1DataTable
    
    Private tablewishlist_master As wishlist_masterDataTable
    
    Private tablecustomers2 As customers2DataTable
    
    Private tablecustomers_dvd_to_send As customers_dvd_to_sendDataTable
    
    Private tablecustomers_DVD_NORM As customers_DVD_NORMDataTable
    
    Private tablecustomers_DVD_ADULT As customers_DVD_ADULTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("wishlist")) Is Nothing) Then
                MyBase.Tables.Add(New wishlistDataTable(ds.Tables("wishlist")))
            End If
            If (Not (ds.Tables("customers")) Is Nothing) Then
                MyBase.Tables.Add(New customersDataTable(ds.Tables("customers")))
            End If
            If (Not (ds.Tables("compensation_summary")) Is Nothing) Then
                MyBase.Tables.Add(New compensation_summaryDataTable(ds.Tables("compensation_summary")))
            End If
            If (Not (ds.Tables("user_log_view1")) Is Nothing) Then
                MyBase.Tables.Add(New user_log_view1DataTable(ds.Tables("user_log_view1")))
            End If
            If (Not (ds.Tables("wishlist_master")) Is Nothing) Then
                MyBase.Tables.Add(New wishlist_masterDataTable(ds.Tables("wishlist_master")))
            End If
            If (Not (ds.Tables("customers2")) Is Nothing) Then
                MyBase.Tables.Add(New customers2DataTable(ds.Tables("customers2")))
            End If
            If (Not (ds.Tables("customers_dvd_to_send")) Is Nothing) Then
                MyBase.Tables.Add(New customers_dvd_to_sendDataTable(ds.Tables("customers_dvd_to_send")))
            End If
            If (Not (ds.Tables("customers_DVD_NORM")) Is Nothing) Then
                MyBase.Tables.Add(New customers_DVD_NORMDataTable(ds.Tables("customers_DVD_NORM")))
            End If
            If (Not (ds.Tables("customers_DVD_ADULT")) Is Nothing) Then
                MyBase.Tables.Add(New customers_DVD_ADULTDataTable(ds.Tables("customers_DVD_ADULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wishlist() As wishlistDataTable
        Get
            Return Me.tablewishlist
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers() As customersDataTable
        Get
            Return Me.tablecustomers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property compensation_summary() As compensation_summaryDataTable
        Get
            Return Me.tablecompensation_summary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property user_log_view1() As user_log_view1DataTable
        Get
            Return Me.tableuser_log_view1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wishlist_master() As wishlist_masterDataTable
        Get
            Return Me.tablewishlist_master
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers2() As customers2DataTable
        Get
            Return Me.tablecustomers2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers_dvd_to_send() As customers_dvd_to_sendDataTable
        Get
            Return Me.tablecustomers_dvd_to_send
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers_DVD_NORM() As customers_DVD_NORMDataTable
        Get
            Return Me.tablecustomers_DVD_NORM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers_DVD_ADULT() As customers_DVD_ADULTDataTable
        Get
            Return Me.tablecustomers_DVD_ADULT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsABOProcess = CType(MyBase.Clone,dsABOProcess)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("wishlist")) Is Nothing) Then
                MyBase.Tables.Add(New wishlistDataTable(ds.Tables("wishlist")))
            End If
            If (Not (ds.Tables("customers")) Is Nothing) Then
                MyBase.Tables.Add(New customersDataTable(ds.Tables("customers")))
            End If
            If (Not (ds.Tables("compensation_summary")) Is Nothing) Then
                MyBase.Tables.Add(New compensation_summaryDataTable(ds.Tables("compensation_summary")))
            End If
            If (Not (ds.Tables("user_log_view1")) Is Nothing) Then
                MyBase.Tables.Add(New user_log_view1DataTable(ds.Tables("user_log_view1")))
            End If
            If (Not (ds.Tables("wishlist_master")) Is Nothing) Then
                MyBase.Tables.Add(New wishlist_masterDataTable(ds.Tables("wishlist_master")))
            End If
            If (Not (ds.Tables("customers2")) Is Nothing) Then
                MyBase.Tables.Add(New customers2DataTable(ds.Tables("customers2")))
            End If
            If (Not (ds.Tables("customers_dvd_to_send")) Is Nothing) Then
                MyBase.Tables.Add(New customers_dvd_to_sendDataTable(ds.Tables("customers_dvd_to_send")))
            End If
            If (Not (ds.Tables("customers_DVD_NORM")) Is Nothing) Then
                MyBase.Tables.Add(New customers_DVD_NORMDataTable(ds.Tables("customers_DVD_NORM")))
            End If
            If (Not (ds.Tables("customers_DVD_ADULT")) Is Nothing) Then
                MyBase.Tables.Add(New customers_DVD_ADULTDataTable(ds.Tables("customers_DVD_ADULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablewishlist = CType(MyBase.Tables("wishlist"),wishlistDataTable)
        If (initTable = true) Then
            If (Not (Me.tablewishlist) Is Nothing) Then
                Me.tablewishlist.InitVars
            End If
        End If
        Me.tablecustomers = CType(MyBase.Tables("customers"),customersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers) Is Nothing) Then
                Me.tablecustomers.InitVars
            End If
        End If
        Me.tablecompensation_summary = CType(MyBase.Tables("compensation_summary"),compensation_summaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompensation_summary) Is Nothing) Then
                Me.tablecompensation_summary.InitVars
            End If
        End If
        Me.tableuser_log_view1 = CType(MyBase.Tables("user_log_view1"),user_log_view1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableuser_log_view1) Is Nothing) Then
                Me.tableuser_log_view1.InitVars
            End If
        End If
        Me.tablewishlist_master = CType(MyBase.Tables("wishlist_master"),wishlist_masterDataTable)
        If (initTable = true) Then
            If (Not (Me.tablewishlist_master) Is Nothing) Then
                Me.tablewishlist_master.InitVars
            End If
        End If
        Me.tablecustomers2 = CType(MyBase.Tables("customers2"),customers2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers2) Is Nothing) Then
                Me.tablecustomers2.InitVars
            End If
        End If
        Me.tablecustomers_dvd_to_send = CType(MyBase.Tables("customers_dvd_to_send"),customers_dvd_to_sendDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers_dvd_to_send) Is Nothing) Then
                Me.tablecustomers_dvd_to_send.InitVars
            End If
        End If
        Me.tablecustomers_DVD_NORM = CType(MyBase.Tables("customers_DVD_NORM"),customers_DVD_NORMDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers_DVD_NORM) Is Nothing) Then
                Me.tablecustomers_DVD_NORM.InitVars
            End If
        End If
        Me.tablecustomers_DVD_ADULT = CType(MyBase.Tables("customers_DVD_ADULT"),customers_DVD_ADULTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers_DVD_ADULT) Is Nothing) Then
                Me.tablecustomers_DVD_ADULT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsABOProcess"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsABOProcess.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablewishlist = New wishlistDataTable
        MyBase.Tables.Add(Me.tablewishlist)
        Me.tablecustomers = New customersDataTable
        MyBase.Tables.Add(Me.tablecustomers)
        Me.tablecompensation_summary = New compensation_summaryDataTable
        MyBase.Tables.Add(Me.tablecompensation_summary)
        Me.tableuser_log_view1 = New user_log_view1DataTable
        MyBase.Tables.Add(Me.tableuser_log_view1)
        Me.tablewishlist_master = New wishlist_masterDataTable
        MyBase.Tables.Add(Me.tablewishlist_master)
        Me.tablecustomers2 = New customers2DataTable
        MyBase.Tables.Add(Me.tablecustomers2)
        Me.tablecustomers_dvd_to_send = New customers_dvd_to_sendDataTable
        MyBase.Tables.Add(Me.tablecustomers_dvd_to_send)
        Me.tablecustomers_DVD_NORM = New customers_DVD_NORMDataTable
        MyBase.Tables.Add(Me.tablecustomers_DVD_NORM)
        Me.tablecustomers_DVD_ADULT = New customers_DVD_ADULTDataTable
        MyBase.Tables.Add(Me.tablecustomers_DVD_ADULT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializewishlist() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecompensation_summary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeuser_log_view1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializewishlist_master() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers_dvd_to_send() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers_DVD_NORM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers_DVD_ADULT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsABOProcess = New dsABOProcess
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub wishlistRowChangeEventHandler(ByVal sender As Object, ByVal e As wishlistRowChangeEvent)
    
    Public Delegate Sub customersRowChangeEventHandler(ByVal sender As Object, ByVal e As customersRowChangeEvent)
    
    Public Delegate Sub compensation_summaryRowChangeEventHandler(ByVal sender As Object, ByVal e As compensation_summaryRowChangeEvent)
    
    Public Delegate Sub user_log_view1RowChangeEventHandler(ByVal sender As Object, ByVal e As user_log_view1RowChangeEvent)
    
    Public Delegate Sub wishlist_masterRowChangeEventHandler(ByVal sender As Object, ByVal e As wishlist_masterRowChangeEvent)
    
    Public Delegate Sub customers2RowChangeEventHandler(ByVal sender As Object, ByVal e As customers2RowChangeEvent)
    
    Public Delegate Sub customers_dvd_to_sendRowChangeEventHandler(ByVal sender As Object, ByVal e As customers_dvd_to_sendRowChangeEvent)
    
    Public Delegate Sub customers_DVD_NORMRowChangeEventHandler(ByVal sender As Object, ByVal e As customers_DVD_NORMRowChangeEvent)
    
    Public Delegate Sub customers_DVD_ADULTRowChangeEventHandler(ByVal sender As Object, ByVal e As customers_DVD_ADULTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class wishlistDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnproduct_id As Global.System.Data.DataColumn
        
        Private columnrank As Global.System.Data.DataColumn
        
        Private columnwishlist_type As Global.System.Data.DataColumn
        
        Private columnproducts_series_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_number As Global.System.Data.DataColumn
        
        Private columnwl_id As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "wishlist"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property product_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wl_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwl_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As wishlistRow
            Get
                Return CType(Me.Rows(index),wishlistRow)
            End Get
        End Property
        
        Public Event wishlistRowChanging As wishlistRowChangeEventHandler
        
        Public Event wishlistRowChanged As wishlistRowChangeEventHandler
        
        Public Event wishlistRowDeleting As wishlistRowChangeEventHandler
        
        Public Event wishlistRowDeleted As wishlistRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddwishlistRow(ByVal row As wishlistRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddwishlistRow(ByVal customers_id As Integer, ByVal product_id As Integer, ByVal rank As Integer, ByVal wishlist_type As String, ByVal products_series_id As Integer, ByVal products_series_number As Integer, ByVal wl_id As Integer, ByVal imdb_id As Long) As wishlistRow
            Dim rowwishlistRow As wishlistRow = CType(Me.NewRow,wishlistRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, product_id, rank, wishlist_type, products_series_id, products_series_number, wl_id, imdb_id}
            rowwishlistRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowwishlistRow)
            Return rowwishlistRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idproduct_id(ByVal customers_id As Integer, ByVal product_id As Integer) As wishlistRow
            Return CType(Me.Rows.Find(New Object() {customers_id, product_id}),wishlistRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As wishlistDataTable = CType(MyBase.Clone,wishlistDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New wishlistDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnproduct_id = MyBase.Columns("product_id")
            Me.columnrank = MyBase.Columns("rank")
            Me.columnwishlist_type = MyBase.Columns("wishlist_type")
            Me.columnproducts_series_id = MyBase.Columns("products_series_id")
            Me.columnproducts_series_number = MyBase.Columns("products_series_number")
            Me.columnwl_id = MyBase.Columns("wl_id")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnproduct_id = New Global.System.Data.DataColumn("product_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_id)
            Me.columnrank = New Global.System.Data.DataColumn("rank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrank)
            Me.columnwishlist_type = New Global.System.Data.DataColumn("wishlist_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_type)
            Me.columnproducts_series_id = New Global.System.Data.DataColumn("products_series_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_id)
            Me.columnproducts_series_number = New Global.System.Data.DataColumn("products_series_number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_number)
            Me.columnwl_id = New Global.System.Data.DataColumn("wl_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwl_id)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsABOProcessKey1", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnproduct_id}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnproduct_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewwishlistRow() As wishlistRow
            Return CType(Me.NewRow,wishlistRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New wishlistRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(wishlistRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wishlistRowChangedEvent) Is Nothing) Then
                RaiseEvent wishlistRowChanged(Me, New wishlistRowChangeEvent(CType(e.Row,wishlistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wishlistRowChangingEvent) Is Nothing) Then
                RaiseEvent wishlistRowChanging(Me, New wishlistRowChangeEvent(CType(e.Row,wishlistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wishlistRowDeletedEvent) Is Nothing) Then
                RaiseEvent wishlistRowDeleted(Me, New wishlistRowChangeEvent(CType(e.Row,wishlistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wishlistRowDeletingEvent) Is Nothing) Then
                RaiseEvent wishlistRowDeleting(Me, New wishlistRowChangeEvent(CType(e.Row,wishlistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovewishlistRow(ByVal row As wishlistRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "wishlistDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columncustomers_abo As Global.System.Data.DataColumn
        
        Private columncustomers_abo_type As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_norm As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_adult As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_home_norm As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_home_adult As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_credit As Global.System.Data.DataColumn
        
        Private columncustomers_abo_rank As Global.System.Data.DataColumn
        
        Private columncustomers_abo_multishipment As Global.System.Data.DataColumn
        
        Private columnuse_credit As Global.System.Data.DataColumn
        
        Private columnthrottling As Global.System.Data.DataColumn
        
        Private columncustomers_abo_suspended As Global.System.Data.DataColumn
        
        Private columnNormToSend As Global.System.Data.DataColumn
        
        Private columnAdultToSend As Global.System.Data.DataColumn
        
        Private columnNormAssigned As Global.System.Data.DataColumn
        
        Private columnAdultAssigned As Global.System.Data.DataColumn
        
        Private columnInNeed As Global.System.Data.DataColumn
        
        Private columnServed As Global.System.Data.DataColumn
        
        Private columnNotServed As Global.System.Data.DataColumn
        
        Private columnNotEnoughtCredit As Global.System.Data.DataColumn
        
        Private columnNoDVDFound As Global.System.Data.DataColumn
        
        Private columnTooManyAtHome As Global.System.Data.DataColumn
        
        Private columnNormCompensation As Global.System.Data.DataColumn
        
        Private columnAdultCompensation As Global.System.Data.DataColumn
        
        Private columnIsCompensation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_aboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_normColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_norm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_adultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_adult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_home_normColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_home_norm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_home_adultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_home_adult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_rankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_rank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_multishipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_multishipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property use_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuse_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property throttlingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthrottling
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_suspendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_suspended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NormToSendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNormToSend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdultToSendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdultToSend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NormAssignedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNormAssigned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdultAssignedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdultAssigned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InNeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInNeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotServedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotServed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotEnoughtCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotEnoughtCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDVDFoundColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDVDFound
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TooManyAtHomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTooManyAtHome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NormCompensationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNormCompensation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdultCompensationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdultCompensation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCompensationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCompensation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customersRow
            Get
                Return CType(Me.Rows(index),customersRow)
            End Get
        End Property
        
        Public Event customersRowChanging As customersRowChangeEventHandler
        
        Public Event customersRowChanged As customersRowChangeEventHandler
        
        Public Event customersRowDeleting As customersRowChangeEventHandler
        
        Public Event customersRowDeleted As customersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcustomersRow(ByVal row As customersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcustomersRow( _
                    ByVal customers_id As Integer,  _
                    ByVal customers_abo As Integer,  _
                    ByVal customers_abo_type As Integer,  _
                    ByVal customers_abo_dvd_norm As Integer,  _
                    ByVal customers_abo_dvd_adult As Integer,  _
                    ByVal customers_abo_dvd_home_norm As Integer,  _
                    ByVal customers_abo_dvd_home_adult As Integer,  _
                    ByVal customers_abo_dvd_credit As Integer,  _
                    ByVal customers_abo_rank As Integer,  _
                    ByVal customers_abo_multishipment As String,  _
                    ByVal use_credit As Integer,  _
                    ByVal throttling As Integer,  _
                    ByVal customers_abo_suspended As Integer,  _
                    ByVal NormToSend As Integer,  _
                    ByVal AdultToSend As Integer,  _
                    ByVal NormAssigned As Integer,  _
                    ByVal AdultAssigned As Integer,  _
                    ByVal InNeed As Integer,  _
                    ByVal Served As Integer,  _
                    ByVal NotServed As Integer,  _
                    ByVal NotEnoughtCredit As Integer,  _
                    ByVal NoDVDFound As Integer,  _
                    ByVal TooManyAtHome As Integer,  _
                    ByVal NormCompensation As Integer,  _
                    ByVal AdultCompensation As Integer,  _
                    ByVal IsCompensation As Boolean) As customersRow
            Dim rowcustomersRow As customersRow = CType(Me.NewRow,customersRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, customers_abo, customers_abo_type, customers_abo_dvd_norm, customers_abo_dvd_adult, customers_abo_dvd_home_norm, customers_abo_dvd_home_adult, customers_abo_dvd_credit, customers_abo_rank, customers_abo_multishipment, use_credit, throttling, customers_abo_suspended, NormToSend, AdultToSend, NormAssigned, AdultAssigned, InNeed, Served, NotServed, NotEnoughtCredit, NoDVDFound, TooManyAtHome, NormCompensation, AdultCompensation, IsCompensation}
            rowcustomersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomersRow)
            Return rowcustomersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customersDataTable = CType(MyBase.Clone,customersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columncustomers_abo = MyBase.Columns("customers_abo")
            Me.columncustomers_abo_type = MyBase.Columns("customers_abo_type")
            Me.columncustomers_abo_dvd_norm = MyBase.Columns("customers_abo_dvd_norm")
            Me.columncustomers_abo_dvd_adult = MyBase.Columns("customers_abo_dvd_adult")
            Me.columncustomers_abo_dvd_home_norm = MyBase.Columns("customers_abo_dvd_home_norm")
            Me.columncustomers_abo_dvd_home_adult = MyBase.Columns("customers_abo_dvd_home_adult")
            Me.columncustomers_abo_dvd_credit = MyBase.Columns("customers_abo_dvd_credit")
            Me.columncustomers_abo_rank = MyBase.Columns("customers_abo_rank")
            Me.columncustomers_abo_multishipment = MyBase.Columns("customers_abo_multishipment")
            Me.columnuse_credit = MyBase.Columns("use_credit")
            Me.columnthrottling = MyBase.Columns("throttling")
            Me.columncustomers_abo_suspended = MyBase.Columns("customers_abo_suspended")
            Me.columnNormToSend = MyBase.Columns("NormToSend")
            Me.columnAdultToSend = MyBase.Columns("AdultToSend")
            Me.columnNormAssigned = MyBase.Columns("NormAssigned")
            Me.columnAdultAssigned = MyBase.Columns("AdultAssigned")
            Me.columnInNeed = MyBase.Columns("InNeed")
            Me.columnServed = MyBase.Columns("Served")
            Me.columnNotServed = MyBase.Columns("NotServed")
            Me.columnNotEnoughtCredit = MyBase.Columns("NotEnoughtCredit")
            Me.columnNoDVDFound = MyBase.Columns("NoDVDFound")
            Me.columnTooManyAtHome = MyBase.Columns("TooManyAtHome")
            Me.columnNormCompensation = MyBase.Columns("NormCompensation")
            Me.columnAdultCompensation = MyBase.Columns("AdultCompensation")
            Me.columnIsCompensation = MyBase.Columns("IsCompensation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columncustomers_abo = New Global.System.Data.DataColumn("customers_abo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo)
            Me.columncustomers_abo_type = New Global.System.Data.DataColumn("customers_abo_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_type)
            Me.columncustomers_abo_dvd_norm = New Global.System.Data.DataColumn("customers_abo_dvd_norm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_norm)
            Me.columncustomers_abo_dvd_adult = New Global.System.Data.DataColumn("customers_abo_dvd_adult", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_adult)
            Me.columncustomers_abo_dvd_home_norm = New Global.System.Data.DataColumn("customers_abo_dvd_home_norm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_home_norm)
            Me.columncustomers_abo_dvd_home_adult = New Global.System.Data.DataColumn("customers_abo_dvd_home_adult", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_home_adult)
            Me.columncustomers_abo_dvd_credit = New Global.System.Data.DataColumn("customers_abo_dvd_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_credit)
            Me.columncustomers_abo_rank = New Global.System.Data.DataColumn("customers_abo_rank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_rank)
            Me.columncustomers_abo_multishipment = New Global.System.Data.DataColumn("customers_abo_multishipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_multishipment)
            Me.columnuse_credit = New Global.System.Data.DataColumn("use_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuse_credit)
            Me.columnthrottling = New Global.System.Data.DataColumn("throttling", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthrottling)
            Me.columncustomers_abo_suspended = New Global.System.Data.DataColumn("customers_abo_suspended", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_suspended)
            Me.columnNormToSend = New Global.System.Data.DataColumn("NormToSend", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNormToSend)
            Me.columnAdultToSend = New Global.System.Data.DataColumn("AdultToSend", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdultToSend)
            Me.columnNormAssigned = New Global.System.Data.DataColumn("NormAssigned", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNormAssigned)
            Me.columnAdultAssigned = New Global.System.Data.DataColumn("AdultAssigned", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdultAssigned)
            Me.columnInNeed = New Global.System.Data.DataColumn("InNeed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInNeed)
            Me.columnServed = New Global.System.Data.DataColumn("Served", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServed)
            Me.columnNotServed = New Global.System.Data.DataColumn("NotServed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotServed)
            Me.columnNotEnoughtCredit = New Global.System.Data.DataColumn("NotEnoughtCredit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotEnoughtCredit)
            Me.columnNoDVDFound = New Global.System.Data.DataColumn("NoDVDFound", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDVDFound)
            Me.columnTooManyAtHome = New Global.System.Data.DataColumn("TooManyAtHome", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTooManyAtHome)
            Me.columnNormCompensation = New Global.System.Data.DataColumn("NormCompensation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNormCompensation)
            Me.columnAdultCompensation = New Global.System.Data.DataColumn("AdultCompensation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdultCompensation)
            Me.columnIsCompensation = New Global.System.Data.DataColumn("IsCompensation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCompensation)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcustomersRow() As customersRow
            Return CType(Me.NewRow,customersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customersRowChangedEvent) Is Nothing) Then
                RaiseEvent customersRowChanged(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customersRowChangingEvent) Is Nothing) Then
                RaiseEvent customersRowChanging(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customersRowDeletedEvent) Is Nothing) Then
                RaiseEvent customersRowDeleted(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customersRowDeletingEvent) Is Nothing) Then
                RaiseEvent customersRowDeleting(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecustomersRow(ByVal row As customersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class compensation_summaryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnproducts_type As Global.System.Data.DataColumn
        
        Private columncompensation_qty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "compensation_summary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compensation_qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompensation_qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As compensation_summaryRow
            Get
                Return CType(Me.Rows(index),compensation_summaryRow)
            End Get
        End Property
        
        Public Event compensation_summaryRowChanging As compensation_summaryRowChangeEventHandler
        
        Public Event compensation_summaryRowChanged As compensation_summaryRowChangeEventHandler
        
        Public Event compensation_summaryRowDeleting As compensation_summaryRowChangeEventHandler
        
        Public Event compensation_summaryRowDeleted As compensation_summaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcompensation_summaryRow(ByVal row As compensation_summaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcompensation_summaryRow(ByVal customers_id As Integer, ByVal products_type As String, ByVal compensation_qty As Integer) As compensation_summaryRow
            Dim rowcompensation_summaryRow As compensation_summaryRow = CType(Me.NewRow,compensation_summaryRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, products_type, compensation_qty}
            rowcompensation_summaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompensation_summaryRow)
            Return rowcompensation_summaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idproducts_type(ByVal customers_id As Integer, ByVal products_type As String) As compensation_summaryRow
            Return CType(Me.Rows.Find(New Object() {customers_id, products_type}),compensation_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As compensation_summaryDataTable = CType(MyBase.Clone,compensation_summaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New compensation_summaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnproducts_type = MyBase.Columns("products_type")
            Me.columncompensation_qty = MyBase.Columns("compensation_qty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnproducts_type = New Global.System.Data.DataColumn("products_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_type)
            Me.columncompensation_qty = New Global.System.Data.DataColumn("compensation_qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompensation_qty)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsABOProcessKey2", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnproducts_type}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnproducts_type.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcompensation_summaryRow() As compensation_summaryRow
            Return CType(Me.NewRow,compensation_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New compensation_summaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(compensation_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.compensation_summaryRowChangedEvent) Is Nothing) Then
                RaiseEvent compensation_summaryRowChanged(Me, New compensation_summaryRowChangeEvent(CType(e.Row,compensation_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.compensation_summaryRowChangingEvent) Is Nothing) Then
                RaiseEvent compensation_summaryRowChanging(Me, New compensation_summaryRowChangeEvent(CType(e.Row,compensation_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.compensation_summaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent compensation_summaryRowDeleted(Me, New compensation_summaryRowChangeEvent(CType(e.Row,compensation_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.compensation_summaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent compensation_summaryRowDeleting(Me, New compensation_summaryRowChangeEvent(CType(e.Row,compensation_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecompensation_summaryRow(ByVal row As compensation_summaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "compensation_summaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class user_log_view1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnuser_log_id As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnLogDate As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columndvd_id As Global.System.Data.DataColumn
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnLog_Type As Global.System.Data.DataColumn
        
        Private columnUser_FullName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "user_log_view1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property user_log_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser_log_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Log_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User_FullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser_FullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As user_log_view1Row
            Get
                Return CType(Me.Rows(index),user_log_view1Row)
            End Get
        End Property
        
        Public Event user_log_view1RowChanging As user_log_view1RowChangeEventHandler
        
        Public Event user_log_view1RowChanged As user_log_view1RowChangeEventHandler
        
        Public Event user_log_view1RowDeleting As user_log_view1RowChangeEventHandler
        
        Public Event user_log_view1RowDeleted As user_log_view1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adduser_log_view1Row(ByVal row As user_log_view1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adduser_log_view1Row(ByVal user_log_id As Integer, ByVal UserID As Integer, ByVal LogDate As Date, ByVal products_id As Integer, ByVal dvd_id As Integer, ByVal customers_id As Integer, ByVal Log_Type As String, ByVal User_FullName As String) As user_log_view1Row
            Dim rowuser_log_view1Row As user_log_view1Row = CType(Me.NewRow,user_log_view1Row)
            Dim columnValuesArray() As Object = New Object() {user_log_id, UserID, LogDate, products_id, dvd_id, customers_id, Log_Type, User_FullName}
            rowuser_log_view1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowuser_log_view1Row)
            Return rowuser_log_view1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As user_log_view1DataTable = CType(MyBase.Clone,user_log_view1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New user_log_view1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnuser_log_id = MyBase.Columns("user_log_id")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnLogDate = MyBase.Columns("LogDate")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columndvd_id = MyBase.Columns("dvd_id")
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnLog_Type = MyBase.Columns("Log_Type")
            Me.columnUser_FullName = MyBase.Columns("User_FullName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnuser_log_id = New Global.System.Data.DataColumn("user_log_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser_log_id)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnLogDate = New Global.System.Data.DataColumn("LogDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogDate)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columndvd_id = New Global.System.Data.DataColumn("dvd_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_id)
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnLog_Type = New Global.System.Data.DataColumn("Log_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog_Type)
            Me.columnUser_FullName = New Global.System.Data.DataColumn("User_FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser_FullName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newuser_log_view1Row() As user_log_view1Row
            Return CType(Me.NewRow,user_log_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New user_log_view1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(user_log_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.user_log_view1RowChangedEvent) Is Nothing) Then
                RaiseEvent user_log_view1RowChanged(Me, New user_log_view1RowChangeEvent(CType(e.Row,user_log_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.user_log_view1RowChangingEvent) Is Nothing) Then
                RaiseEvent user_log_view1RowChanging(Me, New user_log_view1RowChangeEvent(CType(e.Row,user_log_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.user_log_view1RowDeletedEvent) Is Nothing) Then
                RaiseEvent user_log_view1RowDeleted(Me, New user_log_view1RowChangeEvent(CType(e.Row,user_log_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.user_log_view1RowDeletingEvent) Is Nothing) Then
                RaiseEvent user_log_view1RowDeleting(Me, New user_log_view1RowChangeEvent(CType(e.Row,user_log_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeuser_log_view1Row(ByVal row As user_log_view1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "user_log_view1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class wishlist_masterDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnwishlist_master_id As Global.System.Data.DataColumn
        
        Private columnwishlist_type As Global.System.Data.DataColumn
        
        Private columnWishlist_name As Global.System.Data.DataColumn
        
        Private columndvd_assigned As Global.System.Data.DataColumn
        
        Private columndvd_home As Global.System.Data.DataColumn
        
        Private columnrank As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "wishlist_master"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_master_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_master_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Wishlist_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWishlist_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_assignedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_assigned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_homeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_home
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As wishlist_masterRow
            Get
                Return CType(Me.Rows(index),wishlist_masterRow)
            End Get
        End Property
        
        Public Event wishlist_masterRowChanging As wishlist_masterRowChangeEventHandler
        
        Public Event wishlist_masterRowChanged As wishlist_masterRowChangeEventHandler
        
        Public Event wishlist_masterRowDeleting As wishlist_masterRowChangeEventHandler
        
        Public Event wishlist_masterRowDeleted As wishlist_masterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addwishlist_masterRow(ByVal row As wishlist_masterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addwishlist_masterRow(ByVal customers_id As Integer, ByVal wishlist_master_id As Integer, ByVal wishlist_type As String, ByVal Wishlist_name As Integer, ByVal dvd_assigned As Integer, ByVal dvd_home As Integer, ByVal rank As String) As wishlist_masterRow
            Dim rowwishlist_masterRow As wishlist_masterRow = CType(Me.NewRow,wishlist_masterRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, wishlist_master_id, wishlist_type, Wishlist_name, dvd_assigned, dvd_home, rank}
            rowwishlist_masterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowwishlist_masterRow)
            Return rowwishlist_masterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idwishlist_master_id(ByVal customers_id As Integer, ByVal wishlist_master_id As Integer) As wishlist_masterRow
            Return CType(Me.Rows.Find(New Object() {customers_id, wishlist_master_id}),wishlist_masterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As wishlist_masterDataTable = CType(MyBase.Clone,wishlist_masterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New wishlist_masterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnwishlist_master_id = MyBase.Columns("wishlist_master_id")
            Me.columnwishlist_type = MyBase.Columns("wishlist_type")
            Me.columnWishlist_name = MyBase.Columns("Wishlist_name")
            Me.columndvd_assigned = MyBase.Columns("dvd_assigned")
            Me.columndvd_home = MyBase.Columns("dvd_home")
            Me.columnrank = MyBase.Columns("rank")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnwishlist_master_id = New Global.System.Data.DataColumn("wishlist_master_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_master_id)
            Me.columnwishlist_type = New Global.System.Data.DataColumn("wishlist_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_type)
            Me.columnWishlist_name = New Global.System.Data.DataColumn("Wishlist_name", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWishlist_name)
            Me.columndvd_assigned = New Global.System.Data.DataColumn("dvd_assigned", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_assigned)
            Me.columndvd_home = New Global.System.Data.DataColumn("dvd_home", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_home)
            Me.columnrank = New Global.System.Data.DataColumn("rank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrank)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsABOProcessKey1", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnwishlist_master_id}, true))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsABOProcessKey3", New Global.System.Data.DataColumn() {Me.columnrank}, false))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnwishlist_master_id.AllowDBNull = false
            Me.columnwishlist_master_id.Caption = "product_id"
            Me.columnWishlist_name.Caption = "products_series_aboprocess_id"
            Me.columndvd_assigned.Caption = "products_series_aboprocess_number"
            Me.columndvd_home.Caption = "wl_id"
            Me.columnrank.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newwishlist_masterRow() As wishlist_masterRow
            Return CType(Me.NewRow,wishlist_masterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New wishlist_masterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(wishlist_masterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wishlist_masterRowChangedEvent) Is Nothing) Then
                RaiseEvent wishlist_masterRowChanged(Me, New wishlist_masterRowChangeEvent(CType(e.Row,wishlist_masterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wishlist_masterRowChangingEvent) Is Nothing) Then
                RaiseEvent wishlist_masterRowChanging(Me, New wishlist_masterRowChangeEvent(CType(e.Row,wishlist_masterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wishlist_masterRowDeletedEvent) Is Nothing) Then
                RaiseEvent wishlist_masterRowDeleted(Me, New wishlist_masterRowChangeEvent(CType(e.Row,wishlist_masterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wishlist_masterRowDeletingEvent) Is Nothing) Then
                RaiseEvent wishlist_masterRowDeleting(Me, New wishlist_masterRowChangeEvent(CType(e.Row,wishlist_masterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removewishlist_masterRow(ByVal row As wishlist_masterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "wishlist_masterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columncustomers_abo As Global.System.Data.DataColumn
        
        Private columncustomers_abo_type As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_credit As Global.System.Data.DataColumn
        
        Private columncustomers_abo_multishipment As Global.System.Data.DataColumn
        
        Private columnuse_credit As Global.System.Data.DataColumn
        
        Private columnthrottling As Global.System.Data.DataColumn
        
        Private columncustomers_abo_suspended As Global.System.Data.DataColumn
        
        Private columnToSend As Global.System.Data.DataColumn
        
        Private columnInNeed As Global.System.Data.DataColumn
        
        Private columnServed As Global.System.Data.DataColumn
        
        Private columnNotServed As Global.System.Data.DataColumn
        
        Private columnNotEnoughtCredit As Global.System.Data.DataColumn
        
        Private columnNoDVDFound As Global.System.Data.DataColumn
        
        Private columnTooManyAtHome As Global.System.Data.DataColumn
        
        Private columnCompensation As Global.System.Data.DataColumn
        
        Private columnwishlist_master_id As Global.System.Data.DataColumn
        
        Private columnwishlist_type As Global.System.Data.DataColumn
        
        Private columnWishlist_name As Global.System.Data.DataColumn
        
        Private columndvd_assigned As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd As Global.System.Data.DataColumn
        
        Private columncustomers_abo_rank As Global.System.Data.DataColumn
        
        Private columncustomers_info_date_account_created As Global.System.Data.DataColumn
        
        Private columndvd_home As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_aboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_multishipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_multishipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property use_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuse_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property throttlingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthrottling
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_suspendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_suspended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToSendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToSend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InNeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInNeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotServedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotServed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotEnoughtCreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotEnoughtCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDVDFoundColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDVDFound
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TooManyAtHomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTooManyAtHome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompensationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompensation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_master_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_master_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Wishlist_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWishlist_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_assignedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_assigned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_rankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_rank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_info_date_account_createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_info_date_account_created
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_homeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_home
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers2Row
            Get
                Return CType(Me.Rows(index),customers2Row)
            End Get
        End Property
        
        Public Event customers2RowChanging As customers2RowChangeEventHandler
        
        Public Event customers2RowChanged As customers2RowChangeEventHandler
        
        Public Event customers2RowDeleting As customers2RowChangeEventHandler
        
        Public Event customers2RowDeleted As customers2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers2Row(ByVal row As customers2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers2Row( _
                    ByVal customers_id As Integer,  _
                    ByVal customers_abo As Integer,  _
                    ByVal customers_abo_type As Integer,  _
                    ByVal customers_abo_dvd_credit As Integer,  _
                    ByVal customers_abo_multishipment As String,  _
                    ByVal use_credit As Integer,  _
                    ByVal throttling As Integer,  _
                    ByVal customers_abo_suspended As Integer,  _
                    ByVal ToSend As Integer,  _
                    ByVal InNeed As Integer,  _
                    ByVal Served As Integer,  _
                    ByVal NotServed As Integer,  _
                    ByVal NotEnoughtCredit As Integer,  _
                    ByVal NoDVDFound As Integer,  _
                    ByVal TooManyAtHome As Integer,  _
                    ByVal Compensation As Integer,  _
                    ByVal wishlist_master_id As String,  _
                    ByVal wishlist_type As String,  _
                    ByVal Wishlist_name As String,  _
                    ByVal dvd_assigned As String,  _
                    ByVal customers_abo_dvd As String,  _
                    ByVal customers_abo_rank As String,  _
                    ByVal customers_info_date_account_created As String,  _
                    ByVal dvd_home As String) As customers2Row
            Dim rowcustomers2Row As customers2Row = CType(Me.NewRow,customers2Row)
            Dim columnValuesArray() As Object = New Object() {customers_id, customers_abo, customers_abo_type, customers_abo_dvd_credit, customers_abo_multishipment, use_credit, throttling, customers_abo_suspended, ToSend, InNeed, Served, NotServed, NotEnoughtCredit, NoDVDFound, TooManyAtHome, Compensation, wishlist_master_id, wishlist_type, Wishlist_name, dvd_assigned, customers_abo_dvd, customers_abo_rank, customers_info_date_account_created, dvd_home}
            rowcustomers2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers2Row)
            Return rowcustomers2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers2DataTable = CType(MyBase.Clone,customers2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columncustomers_abo = MyBase.Columns("customers_abo")
            Me.columncustomers_abo_type = MyBase.Columns("customers_abo_type")
            Me.columncustomers_abo_dvd_credit = MyBase.Columns("customers_abo_dvd_credit")
            Me.columncustomers_abo_multishipment = MyBase.Columns("customers_abo_multishipment")
            Me.columnuse_credit = MyBase.Columns("use_credit")
            Me.columnthrottling = MyBase.Columns("throttling")
            Me.columncustomers_abo_suspended = MyBase.Columns("customers_abo_suspended")
            Me.columnToSend = MyBase.Columns("ToSend")
            Me.columnInNeed = MyBase.Columns("InNeed")
            Me.columnServed = MyBase.Columns("Served")
            Me.columnNotServed = MyBase.Columns("NotServed")
            Me.columnNotEnoughtCredit = MyBase.Columns("NotEnoughtCredit")
            Me.columnNoDVDFound = MyBase.Columns("NoDVDFound")
            Me.columnTooManyAtHome = MyBase.Columns("TooManyAtHome")
            Me.columnCompensation = MyBase.Columns("Compensation")
            Me.columnwishlist_master_id = MyBase.Columns("wishlist_master_id")
            Me.columnwishlist_type = MyBase.Columns("wishlist_type")
            Me.columnWishlist_name = MyBase.Columns("wishlist_name")
            Me.columndvd_assigned = MyBase.Columns("dvd_assigned")
            Me.columncustomers_abo_dvd = MyBase.Columns("customers_abo_dvd")
            Me.columncustomers_abo_rank = MyBase.Columns("customers_abo_rank")
            Me.columncustomers_info_date_account_created = MyBase.Columns("customers_info_date_account_created")
            Me.columndvd_home = MyBase.Columns("dvd_home")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columncustomers_abo = New Global.System.Data.DataColumn("customers_abo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo)
            Me.columncustomers_abo_type = New Global.System.Data.DataColumn("customers_abo_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_type)
            Me.columncustomers_abo_dvd_credit = New Global.System.Data.DataColumn("customers_abo_dvd_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_credit)
            Me.columncustomers_abo_multishipment = New Global.System.Data.DataColumn("customers_abo_multishipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_multishipment)
            Me.columnuse_credit = New Global.System.Data.DataColumn("use_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuse_credit)
            Me.columnthrottling = New Global.System.Data.DataColumn("throttling", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthrottling)
            Me.columncustomers_abo_suspended = New Global.System.Data.DataColumn("customers_abo_suspended", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_suspended)
            Me.columnToSend = New Global.System.Data.DataColumn("ToSend", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToSend)
            Me.columnInNeed = New Global.System.Data.DataColumn("InNeed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInNeed)
            Me.columnServed = New Global.System.Data.DataColumn("Served", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServed)
            Me.columnNotServed = New Global.System.Data.DataColumn("NotServed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotServed)
            Me.columnNotEnoughtCredit = New Global.System.Data.DataColumn("NotEnoughtCredit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotEnoughtCredit)
            Me.columnNoDVDFound = New Global.System.Data.DataColumn("NoDVDFound", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDVDFound)
            Me.columnTooManyAtHome = New Global.System.Data.DataColumn("TooManyAtHome", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTooManyAtHome)
            Me.columnCompensation = New Global.System.Data.DataColumn("Compensation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompensation)
            Me.columnwishlist_master_id = New Global.System.Data.DataColumn("wishlist_master_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_master_id)
            Me.columnwishlist_type = New Global.System.Data.DataColumn("wishlist_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_type)
            Me.columnWishlist_name = New Global.System.Data.DataColumn("wishlist_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnWishlist_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Wishlist_name")
            Me.columnWishlist_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Wishlist_nameColumn")
            Me.columnWishlist_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWishlist_name")
            Me.columnWishlist_name.ExtendedProperties.Add("Generator_UserColumnName", "wishlist_name")
            MyBase.Columns.Add(Me.columnWishlist_name)
            Me.columndvd_assigned = New Global.System.Data.DataColumn("dvd_assigned", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_assigned)
            Me.columncustomers_abo_dvd = New Global.System.Data.DataColumn("customers_abo_dvd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd)
            Me.columncustomers_abo_rank = New Global.System.Data.DataColumn("customers_abo_rank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_rank)
            Me.columncustomers_info_date_account_created = New Global.System.Data.DataColumn("customers_info_date_account_created", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_info_date_account_created)
            Me.columndvd_home = New Global.System.Data.DataColumn("dvd_home", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_home)
            Me.columnToSend.Caption = "AdultToSend"
            Me.columnCompensation.Caption = "AdultCompensation"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers2Row() As customers2Row
            Return CType(Me.NewRow,customers2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers2RowChangedEvent) Is Nothing) Then
                RaiseEvent customers2RowChanged(Me, New customers2RowChangeEvent(CType(e.Row,customers2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers2RowChangingEvent) Is Nothing) Then
                RaiseEvent customers2RowChanging(Me, New customers2RowChangeEvent(CType(e.Row,customers2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers2RowDeletedEvent) Is Nothing) Then
                RaiseEvent customers2RowDeleted(Me, New customers2RowChangeEvent(CType(e.Row,customers2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers2RowDeletingEvent) Is Nothing) Then
                RaiseEvent customers2RowDeleting(Me, New customers2RowChangeEvent(CType(e.Row,customers2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers2Row(ByVal row As customers2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers_dvd_to_sendDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_dvdid As Global.System.Data.DataColumn
        
        Private columnwl_id As Global.System.Data.DataColumn
        
        Private columnpriority As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers_dvd_to_send"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_dvdidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_dvdid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wl_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwl_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers_dvd_to_sendRow
            Get
                Return CType(Me.Rows(index),customers_dvd_to_sendRow)
            End Get
        End Property
        
        Public Event customers_dvd_to_sendRowChanging As customers_dvd_to_sendRowChangeEventHandler
        
        Public Event customers_dvd_to_sendRowChanged As customers_dvd_to_sendRowChangeEventHandler
        
        Public Event customers_dvd_to_sendRowDeleting As customers_dvd_to_sendRowChangeEventHandler
        
        Public Event customers_dvd_to_sendRowDeleted As customers_dvd_to_sendRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers_dvd_to_sendRow(ByVal row As customers_dvd_to_sendRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers_dvd_to_sendRow(ByVal customers_id As Integer, ByVal products_id As Integer, ByVal products_dvdid As Integer, ByVal wl_id As Integer, ByVal priority As String, ByVal ProductType As String, ByVal imdb_id As Integer) As customers_dvd_to_sendRow
            Dim rowcustomers_dvd_to_sendRow As customers_dvd_to_sendRow = CType(Me.NewRow,customers_dvd_to_sendRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, products_id, products_dvdid, wl_id, priority, ProductType, imdb_id}
            rowcustomers_dvd_to_sendRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers_dvd_to_sendRow)
            Return rowcustomers_dvd_to_sendRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idproducts_id(ByVal customers_id As Integer, ByVal products_id As Integer) As customers_dvd_to_sendRow
            Return CType(Me.Rows.Find(New Object() {customers_id, products_id}),customers_dvd_to_sendRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers_dvd_to_sendDataTable = CType(MyBase.Clone,customers_dvd_to_sendDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers_dvd_to_sendDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_dvdid = MyBase.Columns("products_dvdid")
            Me.columnwl_id = MyBase.Columns("wl_id")
            Me.columnpriority = MyBase.Columns("priority")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_dvdid = New Global.System.Data.DataColumn("products_dvdid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_dvdid)
            Me.columnwl_id = New Global.System.Data.DataColumn("wl_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwl_id)
            Me.columnpriority = New Global.System.Data.DataColumn("priority", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriority)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnproducts_id}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnproducts_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers_dvd_to_sendRow() As customers_dvd_to_sendRow
            Return CType(Me.NewRow,customers_dvd_to_sendRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers_dvd_to_sendRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers_dvd_to_sendRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers_dvd_to_sendRowChangedEvent) Is Nothing) Then
                RaiseEvent customers_dvd_to_sendRowChanged(Me, New customers_dvd_to_sendRowChangeEvent(CType(e.Row,customers_dvd_to_sendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers_dvd_to_sendRowChangingEvent) Is Nothing) Then
                RaiseEvent customers_dvd_to_sendRowChanging(Me, New customers_dvd_to_sendRowChangeEvent(CType(e.Row,customers_dvd_to_sendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers_dvd_to_sendRowDeletedEvent) Is Nothing) Then
                RaiseEvent customers_dvd_to_sendRowDeleted(Me, New customers_dvd_to_sendRowChangeEvent(CType(e.Row,customers_dvd_to_sendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers_dvd_to_sendRowDeletingEvent) Is Nothing) Then
                RaiseEvent customers_dvd_to_sendRowDeleting(Me, New customers_dvd_to_sendRowChangeEvent(CType(e.Row,customers_dvd_to_sendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers_dvd_to_sendRow(ByVal row As customers_dvd_to_sendRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers_dvd_to_sendDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers_DVD_NORMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_dvdid As Global.System.Data.DataColumn
        
        Private columnwl_id As Global.System.Data.DataColumn
        
        Private columnpriority As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_number As Global.System.Data.DataColumn
        
        Private columnquantity As Global.System.Data.DataColumn
        
        Private columnimdb_id_serie As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers_DVD_NORM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_dvdidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_dvdid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wl_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwl_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_id_serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id_serie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers_DVD_NORMRow
            Get
                Return CType(Me.Rows(index),customers_DVD_NORMRow)
            End Get
        End Property
        
        Public Event customers_DVD_NORMRowChanging As customers_DVD_NORMRowChangeEventHandler
        
        Public Event customers_DVD_NORMRowChanged As customers_DVD_NORMRowChangeEventHandler
        
        Public Event customers_DVD_NORMRowDeleting As customers_DVD_NORMRowChangeEventHandler
        
        Public Event customers_DVD_NORMRowDeleted As customers_DVD_NORMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers_DVD_NORMRow(ByVal row As customers_DVD_NORMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers_DVD_NORMRow(ByVal customers_id As Integer, ByVal products_id As Integer, ByVal products_dvdid As Integer, ByVal wl_id As Integer, ByVal priority As String, ByVal ProductType As String, ByVal imdb_id As Integer, ByVal products_series_id As Integer, ByVal products_series_number As Integer, ByVal quantity As Integer, ByVal imdb_id_serie As Long) As customers_DVD_NORMRow
            Dim rowcustomers_DVD_NORMRow As customers_DVD_NORMRow = CType(Me.NewRow,customers_DVD_NORMRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, products_id, products_dvdid, wl_id, priority, ProductType, imdb_id, products_series_id, products_series_number, quantity, imdb_id_serie}
            rowcustomers_DVD_NORMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers_DVD_NORMRow)
            Return rowcustomers_DVD_NORMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idproducts_id(ByVal customers_id As Integer, ByVal products_id As Integer) As customers_DVD_NORMRow
            Return CType(Me.Rows.Find(New Object() {customers_id, products_id}),customers_DVD_NORMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers_DVD_NORMDataTable = CType(MyBase.Clone,customers_DVD_NORMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers_DVD_NORMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_dvdid = MyBase.Columns("products_dvdid")
            Me.columnwl_id = MyBase.Columns("wl_id")
            Me.columnpriority = MyBase.Columns("priority")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columnproducts_series_id = MyBase.Columns("products_series_id")
            Me.columnproducts_series_number = MyBase.Columns("products_series_number")
            Me.columnquantity = MyBase.Columns("quantity")
            Me.columnimdb_id_serie = MyBase.Columns("imdb_id_serie")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_dvdid = New Global.System.Data.DataColumn("products_dvdid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_dvdid)
            Me.columnwl_id = New Global.System.Data.DataColumn("wl_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwl_id)
            Me.columnpriority = New Global.System.Data.DataColumn("priority", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriority)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columnproducts_series_id = New Global.System.Data.DataColumn("products_series_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_id)
            Me.columnproducts_series_number = New Global.System.Data.DataColumn("products_series_number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_number)
            Me.columnquantity = New Global.System.Data.DataColumn("quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity)
            Me.columnimdb_id_serie = New Global.System.Data.DataColumn("imdb_id_serie", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id_serie)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnproducts_id}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnproducts_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers_DVD_NORMRow() As customers_DVD_NORMRow
            Return CType(Me.NewRow,customers_DVD_NORMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers_DVD_NORMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers_DVD_NORMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers_DVD_NORMRowChangedEvent) Is Nothing) Then
                RaiseEvent customers_DVD_NORMRowChanged(Me, New customers_DVD_NORMRowChangeEvent(CType(e.Row,customers_DVD_NORMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers_DVD_NORMRowChangingEvent) Is Nothing) Then
                RaiseEvent customers_DVD_NORMRowChanging(Me, New customers_DVD_NORMRowChangeEvent(CType(e.Row,customers_DVD_NORMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers_DVD_NORMRowDeletedEvent) Is Nothing) Then
                RaiseEvent customers_DVD_NORMRowDeleted(Me, New customers_DVD_NORMRowChangeEvent(CType(e.Row,customers_DVD_NORMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers_DVD_NORMRowDeletingEvent) Is Nothing) Then
                RaiseEvent customers_DVD_NORMRowDeleting(Me, New customers_DVD_NORMRowChangeEvent(CType(e.Row,customers_DVD_NORMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers_DVD_NORMRow(ByVal row As customers_DVD_NORMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers_DVD_NORMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers_DVD_ADULTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_dvdid As Global.System.Data.DataColumn
        
        Private columnwl_id As Global.System.Data.DataColumn
        
        Private columnpriority As Global.System.Data.DataColumn
        
        Private columnProductType As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_number As Global.System.Data.DataColumn
        
        Private columnquantity As Global.System.Data.DataColumn
        
        Private columnimdb_id_serie As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers_DVD_ADULT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_dvdidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_dvdid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wl_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwl_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_id_serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id_serie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers_DVD_ADULTRow
            Get
                Return CType(Me.Rows(index),customers_DVD_ADULTRow)
            End Get
        End Property
        
        Public Event customers_DVD_ADULTRowChanging As customers_DVD_ADULTRowChangeEventHandler
        
        Public Event customers_DVD_ADULTRowChanged As customers_DVD_ADULTRowChangeEventHandler
        
        Public Event customers_DVD_ADULTRowDeleting As customers_DVD_ADULTRowChangeEventHandler
        
        Public Event customers_DVD_ADULTRowDeleted As customers_DVD_ADULTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers_DVD_ADULTRow(ByVal row As customers_DVD_ADULTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers_DVD_ADULTRow(ByVal customers_id As Integer, ByVal products_id As Integer, ByVal products_dvdid As Integer, ByVal wl_id As Integer, ByVal priority As String, ByVal ProductType As String, ByVal imdb_id As Integer, ByVal products_series_id As Integer, ByVal products_series_number As Integer, ByVal quantity As Integer, ByVal imdb_id_serie As Long) As customers_DVD_ADULTRow
            Dim rowcustomers_DVD_ADULTRow As customers_DVD_ADULTRow = CType(Me.NewRow,customers_DVD_ADULTRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, products_id, products_dvdid, wl_id, priority, ProductType, imdb_id, products_series_id, products_series_number, quantity, imdb_id_serie}
            rowcustomers_DVD_ADULTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers_DVD_ADULTRow)
            Return rowcustomers_DVD_ADULTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idproducts_id(ByVal customers_id As Integer, ByVal products_id As Integer) As customers_DVD_ADULTRow
            Return CType(Me.Rows.Find(New Object() {customers_id, products_id}),customers_DVD_ADULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers_DVD_ADULTDataTable = CType(MyBase.Clone,customers_DVD_ADULTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers_DVD_ADULTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_dvdid = MyBase.Columns("products_dvdid")
            Me.columnwl_id = MyBase.Columns("wl_id")
            Me.columnpriority = MyBase.Columns("priority")
            Me.columnProductType = MyBase.Columns("ProductType")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columnproducts_series_id = MyBase.Columns("products_series_id")
            Me.columnproducts_series_number = MyBase.Columns("products_series_number")
            Me.columnquantity = MyBase.Columns("quantity")
            Me.columnimdb_id_serie = MyBase.Columns("imdb_id_serie")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_dvdid = New Global.System.Data.DataColumn("products_dvdid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_dvdid)
            Me.columnwl_id = New Global.System.Data.DataColumn("wl_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwl_id)
            Me.columnpriority = New Global.System.Data.DataColumn("priority", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriority)
            Me.columnProductType = New Global.System.Data.DataColumn("ProductType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductType)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columnproducts_series_id = New Global.System.Data.DataColumn("products_series_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_id)
            Me.columnproducts_series_number = New Global.System.Data.DataColumn("products_series_number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_number)
            Me.columnquantity = New Global.System.Data.DataColumn("quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity)
            Me.columnimdb_id_serie = New Global.System.Data.DataColumn("imdb_id_serie", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id_serie)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnproducts_id}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnproducts_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers_DVD_ADULTRow() As customers_DVD_ADULTRow
            Return CType(Me.NewRow,customers_DVD_ADULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers_DVD_ADULTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers_DVD_ADULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers_DVD_ADULTRowChangedEvent) Is Nothing) Then
                RaiseEvent customers_DVD_ADULTRowChanged(Me, New customers_DVD_ADULTRowChangeEvent(CType(e.Row,customers_DVD_ADULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers_DVD_ADULTRowChangingEvent) Is Nothing) Then
                RaiseEvent customers_DVD_ADULTRowChanging(Me, New customers_DVD_ADULTRowChangeEvent(CType(e.Row,customers_DVD_ADULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers_DVD_ADULTRowDeletedEvent) Is Nothing) Then
                RaiseEvent customers_DVD_ADULTRowDeleted(Me, New customers_DVD_ADULTRowChangeEvent(CType(e.Row,customers_DVD_ADULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers_DVD_ADULTRowDeletingEvent) Is Nothing) Then
                RaiseEvent customers_DVD_ADULTRowDeleting(Me, New customers_DVD_ADULTRowChangeEvent(CType(e.Row,customers_DVD_ADULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers_DVD_ADULTRow(ByVal row As customers_DVD_ADULTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsABOProcess = New dsABOProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers_DVD_ADULTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class wishlistRow
        Inherits Global.System.Data.DataRow
        
        Private tablewishlist As wishlistDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablewishlist = CType(Me.Table,wishlistDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablewishlist.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablewishlist.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property product_id() As Integer
            Get
                Return CType(Me(Me.tablewishlist.product_idColumn),Integer)
            End Get
            Set
                Me(Me.tablewishlist.product_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.rankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rank' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.rankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.wishlist_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wishlist_type' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.wishlist_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.products_series_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_id' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.products_series_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.products_series_numberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_number' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.products_series_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wl_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.wl_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wl_id' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.wl_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tablewishlist.imdb_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'wishlist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrankNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.rankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrankNull()
            Me(Me.tablewishlist.rankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswishlist_typeNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.wishlist_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwishlist_typeNull()
            Me(Me.tablewishlist.wishlist_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_idNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.products_series_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_idNull()
            Me(Me.tablewishlist.products_series_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_numberNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.products_series_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_numberNull()
            Me(Me.tablewishlist.products_series_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswl_idNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.wl_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwl_idNull()
            Me(Me.tablewishlist.wl_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me.tablewishlist.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me.tablewishlist.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customersRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers As customersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers = CType(Me.Table,customersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_aboColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_aboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_type() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_typeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_type' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_norm() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_dvd_normColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_norm' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_normColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_adult() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_dvd_adultColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_adult' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_adultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_home_norm() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_dvd_home_normColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_home_norm' in table 'customers' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_home_normColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_home_adult() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_dvd_home_adultColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_home_adult' in table 'customers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_home_adultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_credit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_dvd_creditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_credit' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_rank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_rankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_rank' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_rankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_multishipment() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_multishipmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_multishipment' in table 'customers' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_multishipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property use_credit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.use_creditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'use_credit' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.use_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property throttling() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.throttlingColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'throttling' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.throttlingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_suspended() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_suspendedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_suspended' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_suspendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NormToSend() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NormToSendColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NormToSend' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NormToSendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdultToSend() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.AdultToSendColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdultToSend' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.AdultToSendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NormAssigned() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NormAssignedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NormAssigned' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NormAssignedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdultAssigned() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.AdultAssignedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdultAssigned' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.AdultAssignedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InNeed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.InNeedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InNeed' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.InNeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Served() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ServedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Served' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ServedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NotServed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NotServedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NotServed' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NotServedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NotEnoughtCredit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NotEnoughtCreditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NotEnoughtCredit' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NotEnoughtCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDVDFound() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NoDVDFoundColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoDVDFound' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NoDVDFoundColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TooManyAtHome() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.TooManyAtHomeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TooManyAtHome' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.TooManyAtHomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NormCompensation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.NormCompensationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NormCompensation' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.NormCompensationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdultCompensation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.AdultCompensationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdultCompensation' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.AdultCompensationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCompensation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.IsCompensationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCompensation' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.IsCompensationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tablecustomers.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_aboNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_aboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_aboNull()
            Me(Me.tablecustomers.customers_aboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_typeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_typeNull()
            Me(Me.tablecustomers.customers_abo_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_normNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_dvd_normColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_normNull()
            Me(Me.tablecustomers.customers_abo_dvd_normColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_adultNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_dvd_adultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_adultNull()
            Me(Me.tablecustomers.customers_abo_dvd_adultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_home_normNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_dvd_home_normColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_home_normNull()
            Me(Me.tablecustomers.customers_abo_dvd_home_normColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_home_adultNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_dvd_home_adultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_home_adultNull()
            Me(Me.tablecustomers.customers_abo_dvd_home_adultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_creditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_dvd_creditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_creditNull()
            Me(Me.tablecustomers.customers_abo_dvd_creditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_rankNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_rankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_rankNull()
            Me(Me.tablecustomers.customers_abo_rankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_multishipmentNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_multishipmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_multishipmentNull()
            Me(Me.tablecustomers.customers_abo_multishipmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuse_creditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.use_creditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuse_creditNull()
            Me(Me.tablecustomers.use_creditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsthrottlingNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.throttlingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetthrottlingNull()
            Me(Me.tablecustomers.throttlingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_suspendedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_suspendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_suspendedNull()
            Me(Me.tablecustomers.customers_abo_suspendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNormToSendNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NormToSendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNormToSendNull()
            Me(Me.tablecustomers.NormToSendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdultToSendNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.AdultToSendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdultToSendNull()
            Me(Me.tablecustomers.AdultToSendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNormAssignedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NormAssignedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNormAssignedNull()
            Me(Me.tablecustomers.NormAssignedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdultAssignedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.AdultAssignedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdultAssignedNull()
            Me(Me.tablecustomers.AdultAssignedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInNeedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.InNeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInNeedNull()
            Me(Me.tablecustomers.InNeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsServedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ServedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetServedNull()
            Me(Me.tablecustomers.ServedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotServedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NotServedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotServedNull()
            Me(Me.tablecustomers.NotServedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotEnoughtCreditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NotEnoughtCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotEnoughtCreditNull()
            Me(Me.tablecustomers.NotEnoughtCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoDVDFoundNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NoDVDFoundColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoDVDFoundNull()
            Me(Me.tablecustomers.NoDVDFoundColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTooManyAtHomeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.TooManyAtHomeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTooManyAtHomeNull()
            Me(Me.tablecustomers.TooManyAtHomeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNormCompensationNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.NormCompensationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNormCompensationNull()
            Me(Me.tablecustomers.NormCompensationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdultCompensationNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.AdultCompensationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdultCompensationNull()
            Me(Me.tablecustomers.AdultCompensationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCompensationNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.IsCompensationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCompensationNull()
            Me(Me.tablecustomers.IsCompensationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class compensation_summaryRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompensation_summary As compensation_summaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompensation_summary = CType(Me.Table,compensation_summaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablecompensation_summary.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecompensation_summary.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_type() As String
            Get
                Return CType(Me(Me.tablecompensation_summary.products_typeColumn),String)
            End Get
            Set
                Me(Me.tablecompensation_summary.products_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compensation_qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecompensation_summary.compensation_qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'compensation_qty' in table 'compensation_summary' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecompensation_summary.compensation_qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscompensation_qtyNull() As Boolean
            Return Me.IsNull(Me.tablecompensation_summary.compensation_qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcompensation_qtyNull()
            Me(Me.tablecompensation_summary.compensation_qtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class user_log_view1Row
        Inherits Global.System.Data.DataRow
        
        Private tableuser_log_view1 As user_log_view1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableuser_log_view1 = CType(Me.Table,user_log_view1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user_log_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.user_log_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'user_log_id' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.user_log_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.UserIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.LogDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogDate' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.LogDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.dvd_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_id' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.dvd_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.Log_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Log_Type' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.Log_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User_FullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableuser_log_view1.User_FullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'User_FullName' in table 'user_log_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuser_log_view1.User_FullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuser_log_idNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.user_log_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuser_log_idNull()
            Me(Me.tableuser_log_view1.user_log_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIDNull()
            Me(Me.tableuser_log_view1.UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogDateNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.LogDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogDateNull()
            Me(Me.tableuser_log_view1.LogDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableuser_log_view1.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_idNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.dvd_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_idNull()
            Me(Me.tableuser_log_view1.dvd_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tableuser_log_view1.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLog_TypeNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.Log_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLog_TypeNull()
            Me(Me.tableuser_log_view1.Log_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUser_FullNameNull() As Boolean
            Return Me.IsNull(Me.tableuser_log_view1.User_FullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUser_FullNameNull()
            Me(Me.tableuser_log_view1.User_FullNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class wishlist_masterRow
        Inherits Global.System.Data.DataRow
        
        Private tablewishlist_master As wishlist_masterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablewishlist_master = CType(Me.Table,wishlist_masterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablewishlist_master.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablewishlist_master.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_master_id() As Integer
            Get
                Return CType(Me(Me.tablewishlist_master.wishlist_master_idColumn),Integer)
            End Get
            Set
                Me(Me.tablewishlist_master.wishlist_master_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablewishlist_master.wishlist_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wishlist_type' in table 'wishlist_master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist_master.wishlist_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wishlist_name() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist_master.Wishlist_nameColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wishlist_name' in table 'wishlist_master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist_master.Wishlist_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_assigned() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist_master.dvd_assignedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_assigned' in table 'wishlist_master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist_master.dvd_assignedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_home() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablewishlist_master.dvd_homeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_home' in table 'wishlist_master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist_master.dvd_homeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rank() As String
            Get
                Try 
                    Return CType(Me(Me.tablewishlist_master.rankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rank' in table 'wishlist_master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewishlist_master.rankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswishlist_typeNull() As Boolean
            Return Me.IsNull(Me.tablewishlist_master.wishlist_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwishlist_typeNull()
            Me(Me.tablewishlist_master.wishlist_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWishlist_nameNull() As Boolean
            Return Me.IsNull(Me.tablewishlist_master.Wishlist_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWishlist_nameNull()
            Me(Me.tablewishlist_master.Wishlist_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_assignedNull() As Boolean
            Return Me.IsNull(Me.tablewishlist_master.dvd_assignedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_assignedNull()
            Me(Me.tablewishlist_master.dvd_assignedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_homeNull() As Boolean
            Return Me.IsNull(Me.tablewishlist_master.dvd_homeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_homeNull()
            Me(Me.tablewishlist_master.dvd_homeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrankNull() As Boolean
            Return Me.IsNull(Me.tablewishlist_master.rankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrankNull()
            Me(Me.tablewishlist_master.rankColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers2Row
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers2 As customers2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers2 = CType(Me.Table,customers2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_aboColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_aboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_type() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_typeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_type' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_credit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_dvd_creditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd_credit' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_dvd_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_multishipment() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_multishipmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_multishipment' in table 'customers2' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_multishipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property use_credit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.use_creditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'use_credit' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.use_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property throttling() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.throttlingColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'throttling' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.throttlingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_suspended() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_suspendedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_suspended' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_suspendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToSend() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.ToSendColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToSend' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.ToSendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InNeed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.InNeedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InNeed' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.InNeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Served() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.ServedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Served' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.ServedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NotServed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.NotServedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NotServed' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.NotServedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NotEnoughtCredit() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.NotEnoughtCreditColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NotEnoughtCredit' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.NotEnoughtCreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDVDFound() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.NoDVDFoundColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoDVDFound' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.NoDVDFoundColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TooManyAtHome() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.TooManyAtHomeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TooManyAtHome' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.TooManyAtHomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compensation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.CompensationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Compensation' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.CompensationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_master_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.wishlist_master_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wishlist_master_id' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.wishlist_master_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.wishlist_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wishlist_type' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.wishlist_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wishlist_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.Wishlist_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wishlist_name' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.Wishlist_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_assigned() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.dvd_assignedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_assigned' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.dvd_assignedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_dvdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_dvd' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_dvdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_rank() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_abo_rankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_rank' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_abo_rankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_info_date_account_created() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.customers_info_date_account_createdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_info_date_account_created' in table 'customers2' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.customers_info_date_account_createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_home() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers2.dvd_homeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_home' in table 'customers2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers2.dvd_homeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tablecustomers2.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_aboNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_aboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_aboNull()
            Me(Me.tablecustomers2.customers_aboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_typeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_typeNull()
            Me(Me.tablecustomers2.customers_abo_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvd_creditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_dvd_creditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvd_creditNull()
            Me(Me.tablecustomers2.customers_abo_dvd_creditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_multishipmentNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_multishipmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_multishipmentNull()
            Me(Me.tablecustomers2.customers_abo_multishipmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuse_creditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.use_creditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuse_creditNull()
            Me(Me.tablecustomers2.use_creditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsthrottlingNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.throttlingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetthrottlingNull()
            Me(Me.tablecustomers2.throttlingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_suspendedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_suspendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_suspendedNull()
            Me(Me.tablecustomers2.customers_abo_suspendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToSendNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.ToSendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToSendNull()
            Me(Me.tablecustomers2.ToSendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInNeedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.InNeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInNeedNull()
            Me(Me.tablecustomers2.InNeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsServedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.ServedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetServedNull()
            Me(Me.tablecustomers2.ServedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotServedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.NotServedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotServedNull()
            Me(Me.tablecustomers2.NotServedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotEnoughtCreditNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.NotEnoughtCreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotEnoughtCreditNull()
            Me(Me.tablecustomers2.NotEnoughtCreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoDVDFoundNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.NoDVDFoundColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoDVDFoundNull()
            Me(Me.tablecustomers2.NoDVDFoundColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTooManyAtHomeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.TooManyAtHomeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTooManyAtHomeNull()
            Me(Me.tablecustomers2.TooManyAtHomeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompensationNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.CompensationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompensationNull()
            Me(Me.tablecustomers2.CompensationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswishlist_master_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.wishlist_master_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwishlist_master_idNull()
            Me(Me.tablecustomers2.wishlist_master_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswishlist_typeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.wishlist_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwishlist_typeNull()
            Me(Me.tablecustomers2.wishlist_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWishlist_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.Wishlist_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWishlist_nameNull()
            Me(Me.tablecustomers2.Wishlist_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_assignedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.dvd_assignedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_assignedNull()
            Me(Me.tablecustomers2.dvd_assignedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_dvdNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_dvdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_dvdNull()
            Me(Me.tablecustomers2.customers_abo_dvdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_rankNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_abo_rankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_rankNull()
            Me(Me.tablecustomers2.customers_abo_rankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_info_date_account_createdNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.customers_info_date_account_createdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_info_date_account_createdNull()
            Me(Me.tablecustomers2.customers_info_date_account_createdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_homeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers2.dvd_homeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_homeNull()
            Me(Me.tablecustomers2.dvd_homeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers_dvd_to_sendRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers_dvd_to_send As customers_dvd_to_sendDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers_dvd_to_send = CType(Me.Table,customers_dvd_to_sendDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_dvd_to_send.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_dvd_to_send.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_dvdid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_dvd_to_send.products_dvdidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_dvdid' in table 'customers_dvd_to_send' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.products_dvdidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wl_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_dvd_to_send.wl_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wl_id' in table 'customers_dvd_to_send' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.wl_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priority() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_dvd_to_send.priorityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'priority' in table 'customers_dvd_to_send' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.priorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_dvd_to_send.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'customers_dvd_to_send' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_dvd_to_send.imdb_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'customers_dvd_to_send' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_dvd_to_send.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_dvdidNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_dvd_to_send.products_dvdidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_dvdidNull()
            Me(Me.tablecustomers_dvd_to_send.products_dvdidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswl_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_dvd_to_send.wl_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwl_idNull()
            Me(Me.tablecustomers_dvd_to_send.wl_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_dvd_to_send.priorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriorityNull()
            Me(Me.tablecustomers_dvd_to_send.priorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_dvd_to_send.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductTypeNull()
            Me(Me.tablecustomers_dvd_to_send.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_dvd_to_send.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me.tablecustomers_dvd_to_send.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers_DVD_NORMRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers_DVD_NORM As customers_DVD_NORMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers_DVD_NORM = CType(Me.Table,customers_DVD_NORMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_DVD_NORM.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_DVD_NORM.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_dvdid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.products_dvdidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_dvdid' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.products_dvdidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wl_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.wl_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wl_id' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.wl_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priority() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.priorityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'priority' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.priorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.imdb_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.products_series_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_id' in table 'customers_DVD_NORM' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.products_series_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.products_series_numberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_number' in table 'customers_DVD_NORM' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.products_series_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.quantityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'quantity' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id_serie() As Long
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_NORM.imdb_id_serieColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id_serie' in table 'customers_DVD_NORM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_NORM.imdb_id_serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_dvdidNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.products_dvdidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_dvdidNull()
            Me(Me.tablecustomers_DVD_NORM.products_dvdidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswl_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.wl_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwl_idNull()
            Me(Me.tablecustomers_DVD_NORM.wl_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.priorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriorityNull()
            Me(Me.tablecustomers_DVD_NORM.priorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductTypeNull()
            Me(Me.tablecustomers_DVD_NORM.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me.tablecustomers_DVD_NORM.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.products_series_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_idNull()
            Me(Me.tablecustomers_DVD_NORM.products_series_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_numberNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.products_series_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_numberNull()
            Me(Me.tablecustomers_DVD_NORM.products_series_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsquantityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.quantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetquantityNull()
            Me(Me.tablecustomers_DVD_NORM.quantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_id_serieNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_NORM.imdb_id_serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_id_serieNull()
            Me(Me.tablecustomers_DVD_NORM.imdb_id_serieColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers_DVD_ADULTRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers_DVD_ADULT As customers_DVD_ADULTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers_DVD_ADULT = CType(Me.Table,customers_DVD_ADULTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_DVD_ADULT.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_DVD_ADULT.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_dvdid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.products_dvdidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_dvdid' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.products_dvdidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wl_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.wl_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'wl_id' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.wl_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priority() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.priorityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'priority' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.priorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductType() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.ProductTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductType' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.ProductTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.imdb_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.products_series_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_id' in table 'customers_DVD_ADULT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.products_series_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_number() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.products_series_numberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_series_number' in table 'customers_DVD_ADULT' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.products_series_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.quantityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'quantity' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id_serie() As Long
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_DVD_ADULT.imdb_id_serieColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id_serie' in table 'customers_DVD_ADULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_DVD_ADULT.imdb_id_serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_dvdidNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.products_dvdidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_dvdidNull()
            Me(Me.tablecustomers_DVD_ADULT.products_dvdidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iswl_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.wl_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setwl_idNull()
            Me(Me.tablecustomers_DVD_ADULT.wl_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.priorityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriorityNull()
            Me(Me.tablecustomers_DVD_ADULT.priorityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductTypeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.ProductTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductTypeNull()
            Me(Me.tablecustomers_DVD_ADULT.ProductTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me.tablecustomers_DVD_ADULT.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.products_series_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_idNull()
            Me(Me.tablecustomers_DVD_ADULT.products_series_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_series_numberNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.products_series_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_series_numberNull()
            Me(Me.tablecustomers_DVD_ADULT.products_series_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsquantityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.quantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetquantityNull()
            Me(Me.tablecustomers_DVD_ADULT.quantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_id_serieNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_DVD_ADULT.imdb_id_serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_id_serieNull()
            Me(Me.tablecustomers_DVD_ADULT.imdb_id_serieColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class wishlistRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As wishlistRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As wishlistRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As wishlistRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class compensation_summaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As compensation_summaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As compensation_summaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As compensation_summaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class user_log_view1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As user_log_view1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As user_log_view1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As user_log_view1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class wishlist_masterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As wishlist_masterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As wishlist_masterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As wishlist_masterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers_dvd_to_sendRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers_dvd_to_sendRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers_dvd_to_sendRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers_dvd_to_sendRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers_DVD_NORMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers_DVD_NORMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers_DVD_NORMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers_DVD_NORMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers_DVD_ADULTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers_DVD_ADULTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers_DVD_ADULTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers_DVD_ADULTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
