'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5446
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsCustomerMaint"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCustomerMaint
    Inherits Global.System.Data.DataSet
    
    Private tablecustomers_search_result As customers_search_resultDataTable
    
    Private tableaddress_book_default As address_book_defaultDataTable
    
    Private tablecountry As countryDataTable
    
    Private tableproducts_abo As products_aboDataTable
    
    Private tableabo As aboDataTable
    
    Private tablediscount_code As discount_codeDataTable
    
    Private tablelanguages As languagesDataTable
    
    Private tablegeneralentity As generalentityDataTable
    
    Private tablecustserv As custservDataTable
    
    Private tabledomiciliation_status As domiciliation_statusDataTable
    
    Private tablecc_expiration_status As cc_expiration_statusDataTable
    
    Private tablecustomers As customersDataTable
    
    Private tablecustomer_attributes As customer_attributesDataTable
    
    Private tableaddress_book_all As address_book_allDataTable
    
    Private tablecustomers_abo_payment_method As customers_abo_payment_methodDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("customers_search_result")) Is Nothing) Then
                MyBase.Tables.Add(New customers_search_resultDataTable(ds.Tables("customers_search_result")))
            End If
            If (Not (ds.Tables("address_book_default")) Is Nothing) Then
                MyBase.Tables.Add(New address_book_defaultDataTable(ds.Tables("address_book_default")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("products_abo")) Is Nothing) Then
                MyBase.Tables.Add(New products_aboDataTable(ds.Tables("products_abo")))
            End If
            If (Not (ds.Tables("abo")) Is Nothing) Then
                MyBase.Tables.Add(New aboDataTable(ds.Tables("abo")))
            End If
            If (Not (ds.Tables("discount_code")) Is Nothing) Then
                MyBase.Tables.Add(New discount_codeDataTable(ds.Tables("discount_code")))
            End If
            If (Not (ds.Tables("languages")) Is Nothing) Then
                MyBase.Tables.Add(New languagesDataTable(ds.Tables("languages")))
            End If
            If (Not (ds.Tables("generalentity")) Is Nothing) Then
                MyBase.Tables.Add(New generalentityDataTable(ds.Tables("generalentity")))
            End If
            If (Not (ds.Tables("custserv")) Is Nothing) Then
                MyBase.Tables.Add(New custservDataTable(ds.Tables("custserv")))
            End If
            If (Not (ds.Tables("domiciliation_status")) Is Nothing) Then
                MyBase.Tables.Add(New domiciliation_statusDataTable(ds.Tables("domiciliation_status")))
            End If
            If (Not (ds.Tables("cc_expiration_status")) Is Nothing) Then
                MyBase.Tables.Add(New cc_expiration_statusDataTable(ds.Tables("cc_expiration_status")))
            End If
            If (Not (ds.Tables("customers")) Is Nothing) Then
                MyBase.Tables.Add(New customersDataTable(ds.Tables("customers")))
            End If
            If (Not (ds.Tables("customer_attributes")) Is Nothing) Then
                MyBase.Tables.Add(New customer_attributesDataTable(ds.Tables("customer_attributes")))
            End If
            If (Not (ds.Tables("address_book_all")) Is Nothing) Then
                MyBase.Tables.Add(New address_book_allDataTable(ds.Tables("address_book_all")))
            End If
            If (Not (ds.Tables("customers_abo_payment_method")) Is Nothing) Then
                MyBase.Tables.Add(New customers_abo_payment_methodDataTable(ds.Tables("customers_abo_payment_method")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers_search_result() As customers_search_resultDataTable
        Get
            Return Me.tablecustomers_search_result
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property address_book_default() As address_book_defaultDataTable
        Get
            Return Me.tableaddress_book_default
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property country() As countryDataTable
        Get
            Return Me.tablecountry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_abo() As products_aboDataTable
        Get
            Return Me.tableproducts_abo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property abo() As aboDataTable
        Get
            Return Me.tableabo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property discount_code() As discount_codeDataTable
        Get
            Return Me.tablediscount_code
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property languages() As languagesDataTable
        Get
            Return Me.tablelanguages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property generalentity() As generalentityDataTable
        Get
            Return Me.tablegeneralentity
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property custserv() As custservDataTable
        Get
            Return Me.tablecustserv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property domiciliation_status() As domiciliation_statusDataTable
        Get
            Return Me.tabledomiciliation_status
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cc_expiration_status() As cc_expiration_statusDataTable
        Get
            Return Me.tablecc_expiration_status
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers() As customersDataTable
        Get
            Return Me.tablecustomers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customer_attributes() As customer_attributesDataTable
        Get
            Return Me.tablecustomer_attributes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property address_book_all() As address_book_allDataTable
        Get
            Return Me.tableaddress_book_all
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers_abo_payment_method() As customers_abo_payment_methodDataTable
        Get
            Return Me.tablecustomers_abo_payment_method
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsCustomerMaint = CType(MyBase.Clone,dsCustomerMaint)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("customers_search_result")) Is Nothing) Then
                MyBase.Tables.Add(New customers_search_resultDataTable(ds.Tables("customers_search_result")))
            End If
            If (Not (ds.Tables("address_book_default")) Is Nothing) Then
                MyBase.Tables.Add(New address_book_defaultDataTable(ds.Tables("address_book_default")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("products_abo")) Is Nothing) Then
                MyBase.Tables.Add(New products_aboDataTable(ds.Tables("products_abo")))
            End If
            If (Not (ds.Tables("abo")) Is Nothing) Then
                MyBase.Tables.Add(New aboDataTable(ds.Tables("abo")))
            End If
            If (Not (ds.Tables("discount_code")) Is Nothing) Then
                MyBase.Tables.Add(New discount_codeDataTable(ds.Tables("discount_code")))
            End If
            If (Not (ds.Tables("languages")) Is Nothing) Then
                MyBase.Tables.Add(New languagesDataTable(ds.Tables("languages")))
            End If
            If (Not (ds.Tables("generalentity")) Is Nothing) Then
                MyBase.Tables.Add(New generalentityDataTable(ds.Tables("generalentity")))
            End If
            If (Not (ds.Tables("custserv")) Is Nothing) Then
                MyBase.Tables.Add(New custservDataTable(ds.Tables("custserv")))
            End If
            If (Not (ds.Tables("domiciliation_status")) Is Nothing) Then
                MyBase.Tables.Add(New domiciliation_statusDataTable(ds.Tables("domiciliation_status")))
            End If
            If (Not (ds.Tables("cc_expiration_status")) Is Nothing) Then
                MyBase.Tables.Add(New cc_expiration_statusDataTable(ds.Tables("cc_expiration_status")))
            End If
            If (Not (ds.Tables("customers")) Is Nothing) Then
                MyBase.Tables.Add(New customersDataTable(ds.Tables("customers")))
            End If
            If (Not (ds.Tables("customer_attributes")) Is Nothing) Then
                MyBase.Tables.Add(New customer_attributesDataTable(ds.Tables("customer_attributes")))
            End If
            If (Not (ds.Tables("address_book_all")) Is Nothing) Then
                MyBase.Tables.Add(New address_book_allDataTable(ds.Tables("address_book_all")))
            End If
            If (Not (ds.Tables("customers_abo_payment_method")) Is Nothing) Then
                MyBase.Tables.Add(New customers_abo_payment_methodDataTable(ds.Tables("customers_abo_payment_method")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablecustomers_search_result = CType(MyBase.Tables("customers_search_result"),customers_search_resultDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers_search_result) Is Nothing) Then
                Me.tablecustomers_search_result.InitVars
            End If
        End If
        Me.tableaddress_book_default = CType(MyBase.Tables("address_book_default"),address_book_defaultDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaddress_book_default) Is Nothing) Then
                Me.tableaddress_book_default.InitVars
            End If
        End If
        Me.tablecountry = CType(MyBase.Tables("country"),countryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecountry) Is Nothing) Then
                Me.tablecountry.InitVars
            End If
        End If
        Me.tableproducts_abo = CType(MyBase.Tables("products_abo"),products_aboDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_abo) Is Nothing) Then
                Me.tableproducts_abo.InitVars
            End If
        End If
        Me.tableabo = CType(MyBase.Tables("abo"),aboDataTable)
        If (initTable = true) Then
            If (Not (Me.tableabo) Is Nothing) Then
                Me.tableabo.InitVars
            End If
        End If
        Me.tablediscount_code = CType(MyBase.Tables("discount_code"),discount_codeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablediscount_code) Is Nothing) Then
                Me.tablediscount_code.InitVars
            End If
        End If
        Me.tablelanguages = CType(MyBase.Tables("languages"),languagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelanguages) Is Nothing) Then
                Me.tablelanguages.InitVars
            End If
        End If
        Me.tablegeneralentity = CType(MyBase.Tables("generalentity"),generalentityDataTable)
        If (initTable = true) Then
            If (Not (Me.tablegeneralentity) Is Nothing) Then
                Me.tablegeneralentity.InitVars
            End If
        End If
        Me.tablecustserv = CType(MyBase.Tables("custserv"),custservDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustserv) Is Nothing) Then
                Me.tablecustserv.InitVars
            End If
        End If
        Me.tabledomiciliation_status = CType(MyBase.Tables("domiciliation_status"),domiciliation_statusDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledomiciliation_status) Is Nothing) Then
                Me.tabledomiciliation_status.InitVars
            End If
        End If
        Me.tablecc_expiration_status = CType(MyBase.Tables("cc_expiration_status"),cc_expiration_statusDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecc_expiration_status) Is Nothing) Then
                Me.tablecc_expiration_status.InitVars
            End If
        End If
        Me.tablecustomers = CType(MyBase.Tables("customers"),customersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers) Is Nothing) Then
                Me.tablecustomers.InitVars
            End If
        End If
        Me.tablecustomer_attributes = CType(MyBase.Tables("customer_attributes"),customer_attributesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomer_attributes) Is Nothing) Then
                Me.tablecustomer_attributes.InitVars
            End If
        End If
        Me.tableaddress_book_all = CType(MyBase.Tables("address_book_all"),address_book_allDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaddress_book_all) Is Nothing) Then
                Me.tableaddress_book_all.InitVars
            End If
        End If
        Me.tablecustomers_abo_payment_method = CType(MyBase.Tables("customers_abo_payment_method"),customers_abo_payment_methodDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustomers_abo_payment_method) Is Nothing) Then
                Me.tablecustomers_abo_payment_method.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCustomerMaint"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCustomerMaint.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablecustomers_search_result = New customers_search_resultDataTable
        MyBase.Tables.Add(Me.tablecustomers_search_result)
        Me.tableaddress_book_default = New address_book_defaultDataTable
        MyBase.Tables.Add(Me.tableaddress_book_default)
        Me.tablecountry = New countryDataTable
        MyBase.Tables.Add(Me.tablecountry)
        Me.tableproducts_abo = New products_aboDataTable
        MyBase.Tables.Add(Me.tableproducts_abo)
        Me.tableabo = New aboDataTable
        MyBase.Tables.Add(Me.tableabo)
        Me.tablediscount_code = New discount_codeDataTable
        MyBase.Tables.Add(Me.tablediscount_code)
        Me.tablelanguages = New languagesDataTable
        MyBase.Tables.Add(Me.tablelanguages)
        Me.tablegeneralentity = New generalentityDataTable
        MyBase.Tables.Add(Me.tablegeneralentity)
        Me.tablecustserv = New custservDataTable
        MyBase.Tables.Add(Me.tablecustserv)
        Me.tabledomiciliation_status = New domiciliation_statusDataTable
        MyBase.Tables.Add(Me.tabledomiciliation_status)
        Me.tablecc_expiration_status = New cc_expiration_statusDataTable
        MyBase.Tables.Add(Me.tablecc_expiration_status)
        Me.tablecustomers = New customersDataTable
        MyBase.Tables.Add(Me.tablecustomers)
        Me.tablecustomer_attributes = New customer_attributesDataTable
        MyBase.Tables.Add(Me.tablecustomer_attributes)
        Me.tableaddress_book_all = New address_book_allDataTable
        MyBase.Tables.Add(Me.tableaddress_book_all)
        Me.tablecustomers_abo_payment_method = New customers_abo_payment_methodDataTable
        MyBase.Tables.Add(Me.tablecustomers_abo_payment_method)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers_search_result() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeaddress_book_default() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecountry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_abo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeabo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializediscount_code() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelanguages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegeneralentity() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustserv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedomiciliation_status() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecc_expiration_status() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomer_attributes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeaddress_book_all() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecustomers_abo_payment_method() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCustomerMaint = New dsCustomerMaint
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub customers_search_resultRowChangeEventHandler(ByVal sender As Object, ByVal e As customers_search_resultRowChangeEvent)
    
    Public Delegate Sub address_book_defaultRowChangeEventHandler(ByVal sender As Object, ByVal e As address_book_defaultRowChangeEvent)
    
    Public Delegate Sub countryRowChangeEventHandler(ByVal sender As Object, ByVal e As countryRowChangeEvent)
    
    Public Delegate Sub products_aboRowChangeEventHandler(ByVal sender As Object, ByVal e As products_aboRowChangeEvent)
    
    Public Delegate Sub aboRowChangeEventHandler(ByVal sender As Object, ByVal e As aboRowChangeEvent)
    
    Public Delegate Sub discount_codeRowChangeEventHandler(ByVal sender As Object, ByVal e As discount_codeRowChangeEvent)
    
    Public Delegate Sub languagesRowChangeEventHandler(ByVal sender As Object, ByVal e As languagesRowChangeEvent)
    
    Public Delegate Sub generalentityRowChangeEventHandler(ByVal sender As Object, ByVal e As generalentityRowChangeEvent)
    
    Public Delegate Sub custservRowChangeEventHandler(ByVal sender As Object, ByVal e As custservRowChangeEvent)
    
    Public Delegate Sub domiciliation_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As domiciliation_statusRowChangeEvent)
    
    Public Delegate Sub cc_expiration_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As cc_expiration_statusRowChangeEvent)
    
    Public Delegate Sub customersRowChangeEventHandler(ByVal sender As Object, ByVal e As customersRowChangeEvent)
    
    Public Delegate Sub customer_attributesRowChangeEventHandler(ByVal sender As Object, ByVal e As customer_attributesRowChangeEvent)
    
    Public Delegate Sub address_book_allRowChangeEventHandler(ByVal sender As Object, ByVal e As address_book_allRowChangeEvent)
    
    Public Delegate Sub customers_abo_payment_methodRowChangeEventHandler(ByVal sender As Object, ByVal e As customers_abo_payment_methodRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers_search_resultDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columncustomers_firstname As Global.System.Data.DataColumn
        
        Private columncustomers_lastname As Global.System.Data.DataColumn
        
        Private columncustomers_email_address As Global.System.Data.DataColumn
        
        Private columncustomers_abo As Global.System.Data.DataColumn
        
        Private columnblack_listed As Global.System.Data.DataColumn
        
        Private columnentry_street_address As Global.System.Data.DataColumn
        
        Private columnentry_postcode As Global.System.Data.DataColumn
        
        Private columndomiciliation_number As Global.System.Data.DataColumn
        
        Private columncustomers_language As Global.System.Data.DataColumn
        
        Private columncall_phone As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers_search_result"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_firstnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_firstname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_lastnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_lastname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_email_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_email_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_aboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property black_listedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnblack_listed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_street_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_street_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_postcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_postcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_languageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_language
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property call_phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncall_phone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers_search_resultRow
            Get
                Return CType(Me.Rows(index),customers_search_resultRow)
            End Get
        End Property
        
        Public Event customers_search_resultRowChanging As customers_search_resultRowChangeEventHandler
        
        Public Event customers_search_resultRowChanged As customers_search_resultRowChangeEventHandler
        
        Public Event customers_search_resultRowDeleting As customers_search_resultRowChangeEventHandler
        
        Public Event customers_search_resultRowDeleted As customers_search_resultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers_search_resultRow(ByVal row As customers_search_resultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers_search_resultRow(ByVal customers_id As Integer, ByVal customers_firstname As String, ByVal customers_lastname As String, ByVal customers_email_address As String, ByVal customers_abo As Integer, ByVal black_listed As Integer, ByVal entry_street_address As String, ByVal entry_postcode As String, ByVal domiciliation_number As String, ByVal customers_language As String, ByVal call_phone As String) As customers_search_resultRow
            Dim rowcustomers_search_resultRow As customers_search_resultRow = CType(Me.NewRow,customers_search_resultRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, customers_firstname, customers_lastname, customers_email_address, customers_abo, black_listed, entry_street_address, entry_postcode, domiciliation_number, customers_language, call_phone}
            rowcustomers_search_resultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers_search_resultRow)
            Return rowcustomers_search_resultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers_search_resultDataTable = CType(MyBase.Clone,customers_search_resultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers_search_resultDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columncustomers_firstname = MyBase.Columns("customers_firstname")
            Me.columncustomers_lastname = MyBase.Columns("customers_lastname")
            Me.columncustomers_email_address = MyBase.Columns("customers_email_address")
            Me.columncustomers_abo = MyBase.Columns("customers_abo")
            Me.columnblack_listed = MyBase.Columns("black_listed")
            Me.columnentry_street_address = MyBase.Columns("entry_street_address")
            Me.columnentry_postcode = MyBase.Columns("entry_postcode")
            Me.columndomiciliation_number = MyBase.Columns("domiciliation_number")
            Me.columncustomers_language = MyBase.Columns("customers_language")
            Me.columncall_phone = MyBase.Columns("call_phone")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columncustomers_firstname = New Global.System.Data.DataColumn("customers_firstname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_firstname)
            Me.columncustomers_lastname = New Global.System.Data.DataColumn("customers_lastname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_lastname)
            Me.columncustomers_email_address = New Global.System.Data.DataColumn("customers_email_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_email_address)
            Me.columncustomers_abo = New Global.System.Data.DataColumn("customers_abo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo)
            Me.columnblack_listed = New Global.System.Data.DataColumn("black_listed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnblack_listed)
            Me.columnentry_street_address = New Global.System.Data.DataColumn("entry_street_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_street_address)
            Me.columnentry_postcode = New Global.System.Data.DataColumn("entry_postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_postcode)
            Me.columndomiciliation_number = New Global.System.Data.DataColumn("domiciliation_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_number)
            Me.columncustomers_language = New Global.System.Data.DataColumn("customers_language", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_language)
            Me.columncall_phone = New Global.System.Data.DataColumn("call_phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncall_phone)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers_search_resultRow() As customers_search_resultRow
            Return CType(Me.NewRow,customers_search_resultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers_search_resultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers_search_resultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers_search_resultRowChangedEvent) Is Nothing) Then
                RaiseEvent customers_search_resultRowChanged(Me, New customers_search_resultRowChangeEvent(CType(e.Row,customers_search_resultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers_search_resultRowChangingEvent) Is Nothing) Then
                RaiseEvent customers_search_resultRowChanging(Me, New customers_search_resultRowChangeEvent(CType(e.Row,customers_search_resultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers_search_resultRowDeletedEvent) Is Nothing) Then
                RaiseEvent customers_search_resultRowDeleted(Me, New customers_search_resultRowChangeEvent(CType(e.Row,customers_search_resultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers_search_resultRowDeletingEvent) Is Nothing) Then
                RaiseEvent customers_search_resultRowDeleting(Me, New customers_search_resultRowChangeEvent(CType(e.Row,customers_search_resultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers_search_resultRow(ByVal row As customers_search_resultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers_search_resultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class address_book_defaultDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnaddress_book_id As Global.System.Data.DataColumn
        
        Private columnentry_gender As Global.System.Data.DataColumn
        
        Private columnentry_company As Global.System.Data.DataColumn
        
        Private columnentry_firstname As Global.System.Data.DataColumn
        
        Private columnentry_lastname As Global.System.Data.DataColumn
        
        Private columnentry_street_address As Global.System.Data.DataColumn
        
        Private columnentry_suburb As Global.System.Data.DataColumn
        
        Private columnentry_postcode As Global.System.Data.DataColumn
        
        Private columnentry_city As Global.System.Data.DataColumn
        
        Private columnentry_state As Global.System.Data.DataColumn
        
        Private columnentry_country_id As Global.System.Data.DataColumn
        
        Private columnentry_zone_id As Global.System.Data.DataColumn
        
        Private columndate_added As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "address_book_default"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address_book_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress_book_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_genderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_gender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_companyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_firstnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_firstname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_lastnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_lastname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_street_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_street_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_suburbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_suburb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_postcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_postcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_city
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_stateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_state
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_country_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_country_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_zone_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_zone_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_addedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_added
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As address_book_defaultRow
            Get
                Return CType(Me.Rows(index),address_book_defaultRow)
            End Get
        End Property
        
        Public Event address_book_defaultRowChanging As address_book_defaultRowChangeEventHandler
        
        Public Event address_book_defaultRowChanged As address_book_defaultRowChangeEventHandler
        
        Public Event address_book_defaultRowDeleting As address_book_defaultRowChangeEventHandler
        
        Public Event address_book_defaultRowDeleted As address_book_defaultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addaddress_book_defaultRow(ByVal row As address_book_defaultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addaddress_book_defaultRow(ByVal customers_id As Integer, ByVal address_book_id As Integer, ByVal entry_gender As String, ByVal entry_company As String, ByVal entry_firstname As String, ByVal entry_lastname As String, ByVal entry_street_address As String, ByVal entry_suburb As String, ByVal entry_postcode As String, ByVal entry_city As String, ByVal entry_state As String, ByVal entry_country_id As Integer, ByVal entry_zone_id As Integer, ByVal date_added As Date) As address_book_defaultRow
            Dim rowaddress_book_defaultRow As address_book_defaultRow = CType(Me.NewRow,address_book_defaultRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, address_book_id, entry_gender, entry_company, entry_firstname, entry_lastname, entry_street_address, entry_suburb, entry_postcode, entry_city, entry_state, entry_country_id, entry_zone_id, date_added}
            rowaddress_book_defaultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaddress_book_defaultRow)
            Return rowaddress_book_defaultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_idaddress_book_id(ByVal customers_id As Integer, ByVal address_book_id As Integer) As address_book_defaultRow
            Return CType(Me.Rows.Find(New Object() {customers_id, address_book_id}),address_book_defaultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As address_book_defaultDataTable = CType(MyBase.Clone,address_book_defaultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New address_book_defaultDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnaddress_book_id = MyBase.Columns("address_book_id")
            Me.columnentry_gender = MyBase.Columns("entry_gender")
            Me.columnentry_company = MyBase.Columns("entry_company")
            Me.columnentry_firstname = MyBase.Columns("entry_firstname")
            Me.columnentry_lastname = MyBase.Columns("entry_lastname")
            Me.columnentry_street_address = MyBase.Columns("entry_street_address")
            Me.columnentry_suburb = MyBase.Columns("entry_suburb")
            Me.columnentry_postcode = MyBase.Columns("entry_postcode")
            Me.columnentry_city = MyBase.Columns("entry_city")
            Me.columnentry_state = MyBase.Columns("entry_state")
            Me.columnentry_country_id = MyBase.Columns("entry_country_id")
            Me.columnentry_zone_id = MyBase.Columns("entry_zone_id")
            Me.columndate_added = MyBase.Columns("date_added")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnaddress_book_id = New Global.System.Data.DataColumn("address_book_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress_book_id)
            Me.columnentry_gender = New Global.System.Data.DataColumn("entry_gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_gender)
            Me.columnentry_company = New Global.System.Data.DataColumn("entry_company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_company)
            Me.columnentry_firstname = New Global.System.Data.DataColumn("entry_firstname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_firstname)
            Me.columnentry_lastname = New Global.System.Data.DataColumn("entry_lastname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_lastname)
            Me.columnentry_street_address = New Global.System.Data.DataColumn("entry_street_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_street_address)
            Me.columnentry_suburb = New Global.System.Data.DataColumn("entry_suburb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_suburb)
            Me.columnentry_postcode = New Global.System.Data.DataColumn("entry_postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_postcode)
            Me.columnentry_city = New Global.System.Data.DataColumn("entry_city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_city)
            Me.columnentry_state = New Global.System.Data.DataColumn("entry_state", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_state)
            Me.columnentry_country_id = New Global.System.Data.DataColumn("entry_country_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_country_id)
            Me.columnentry_zone_id = New Global.System.Data.DataColumn("entry_zone_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_zone_id)
            Me.columndate_added = New Global.System.Data.DataColumn("date_added", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_added)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsCustomerMaintKey2", New Global.System.Data.DataColumn() {Me.columncustomers_id, Me.columnaddress_book_id}, true))
            Me.columncustomers_id.AllowDBNull = false
            Me.columnaddress_book_id.AllowDBNull = false
            Me.columnentry_gender.AllowDBNull = false
            Me.columnentry_firstname.AllowDBNull = false
            Me.columnentry_lastname.AllowDBNull = false
            Me.columnentry_street_address.AllowDBNull = false
            Me.columnentry_postcode.AllowDBNull = false
            Me.columnentry_city.AllowDBNull = false
            Me.columnentry_country_id.AllowDBNull = false
            Me.columnentry_zone_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newaddress_book_defaultRow() As address_book_defaultRow
            Return CType(Me.NewRow,address_book_defaultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New address_book_defaultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(address_book_defaultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.address_book_defaultRowChangedEvent) Is Nothing) Then
                RaiseEvent address_book_defaultRowChanged(Me, New address_book_defaultRowChangeEvent(CType(e.Row,address_book_defaultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.address_book_defaultRowChangingEvent) Is Nothing) Then
                RaiseEvent address_book_defaultRowChanging(Me, New address_book_defaultRowChangeEvent(CType(e.Row,address_book_defaultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.address_book_defaultRowDeletedEvent) Is Nothing) Then
                RaiseEvent address_book_defaultRowDeleted(Me, New address_book_defaultRowChangeEvent(CType(e.Row,address_book_defaultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.address_book_defaultRowDeletingEvent) Is Nothing) Then
                RaiseEvent address_book_defaultRowDeleting(Me, New address_book_defaultRowChangeEvent(CType(e.Row,address_book_defaultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeaddress_book_defaultRow(ByVal row As address_book_defaultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "address_book_defaultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class countryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncountries_id As Global.System.Data.DataColumn
        
        Private columncountries_name As Global.System.Data.DataColumn
        
        Private columncountries_iso_code_2 As Global.System.Data.DataColumn
        
        Private columncountries_iso_code_3 As Global.System.Data.DataColumn
        
        Private columnaddress_format_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "country"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_iso_code_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_iso_code_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_iso_code_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_iso_code_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address_format_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress_format_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As countryRow
            Get
                Return CType(Me.Rows(index),countryRow)
            End Get
        End Property
        
        Public Event countryRowChanging As countryRowChangeEventHandler
        
        Public Event countryRowChanged As countryRowChangeEventHandler
        
        Public Event countryRowDeleting As countryRowChangeEventHandler
        
        Public Event countryRowDeleted As countryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcountryRow(ByVal row As countryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcountryRow(ByVal countries_name As String, ByVal countries_iso_code_2 As String, ByVal countries_iso_code_3 As String, ByVal address_format_id As Integer) As countryRow
            Dim rowcountryRow As countryRow = CType(Me.NewRow,countryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, countries_name, countries_iso_code_2, countries_iso_code_3, address_format_id}
            rowcountryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcountryRow)
            Return rowcountryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycountries_id(ByVal countries_id As Integer) As countryRow
            Return CType(Me.Rows.Find(New Object() {countries_id}),countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As countryDataTable = CType(MyBase.Clone,countryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New countryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncountries_id = MyBase.Columns("countries_id")
            Me.columncountries_name = MyBase.Columns("countries_name")
            Me.columncountries_iso_code_2 = MyBase.Columns("countries_iso_code_2")
            Me.columncountries_iso_code_3 = MyBase.Columns("countries_iso_code_3")
            Me.columnaddress_format_id = MyBase.Columns("address_format_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncountries_id = New Global.System.Data.DataColumn("countries_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_id)
            Me.columncountries_name = New Global.System.Data.DataColumn("countries_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_name)
            Me.columncountries_iso_code_2 = New Global.System.Data.DataColumn("countries_iso_code_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_iso_code_2)
            Me.columncountries_iso_code_3 = New Global.System.Data.DataColumn("countries_iso_code_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_iso_code_3)
            Me.columnaddress_format_id = New Global.System.Data.DataColumn("address_format_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress_format_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsCustomerMaintKey3", New Global.System.Data.DataColumn() {Me.columncountries_id}, true))
            Me.columncountries_id.AutoIncrement = true
            Me.columncountries_id.AllowDBNull = false
            Me.columncountries_id.ReadOnly = true
            Me.columncountries_id.Unique = true
            Me.columncountries_name.AllowDBNull = false
            Me.columncountries_iso_code_2.AllowDBNull = false
            Me.columncountries_iso_code_3.AllowDBNull = false
            Me.columnaddress_format_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcountryRow() As countryRow
            Return CType(Me.NewRow,countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New countryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.countryRowChangedEvent) Is Nothing) Then
                RaiseEvent countryRowChanged(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.countryRowChangingEvent) Is Nothing) Then
                RaiseEvent countryRowChanging(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.countryRowDeletedEvent) Is Nothing) Then
                RaiseEvent countryRowDeleted(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.countryRowDeletingEvent) Is Nothing) Then
                RaiseEvent countryRowDeleting(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecountryRow(ByVal row As countryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "countryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_aboDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_abo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_aboRow
            Get
                Return CType(Me.Rows(index),products_aboRow)
            End Get
        End Property
        
        Public Event products_aboRowChanging As products_aboRowChangeEventHandler
        
        Public Event products_aboRowChanged As products_aboRowChangeEventHandler
        
        Public Event products_aboRowDeleting As products_aboRowChangeEventHandler
        
        Public Event products_aboRowDeleted As products_aboRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_aboRow(ByVal row As products_aboRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_aboRow(ByVal products_id As Integer, ByVal products_model As String, ByVal products_title As String) As products_aboRow
            Dim rowproducts_aboRow As products_aboRow = CType(Me.NewRow,products_aboRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_model, products_title}
            rowproducts_aboRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_aboRow)
            Return rowproducts_aboRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByproducts_id(ByVal products_id As Integer) As products_aboRow
            Return CType(Me.Rows.Find(New Object() {products_id}),products_aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_aboDataTable = CType(MyBase.Clone,products_aboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_aboDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_model = MyBase.Columns("products_model")
            Me.columnproducts_title = MyBase.Columns("products_title")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsCustomerMaintKey4", New Global.System.Data.DataColumn() {Me.columnproducts_id}, true))
            Me.columnproducts_id.AllowDBNull = false
            Me.columnproducts_id.Unique = true
            Me.columnproducts_title.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_aboRow() As products_aboRow
            Return CType(Me.NewRow,products_aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_aboRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_aboRowChangedEvent) Is Nothing) Then
                RaiseEvent products_aboRowChanged(Me, New products_aboRowChangeEvent(CType(e.Row,products_aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_aboRowChangingEvent) Is Nothing) Then
                RaiseEvent products_aboRowChanging(Me, New products_aboRowChangeEvent(CType(e.Row,products_aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_aboRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_aboRowDeleted(Me, New products_aboRowChangeEvent(CType(e.Row,products_aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_aboRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_aboRowDeleting(Me, New products_aboRowChangeEvent(CType(e.Row,products_aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_aboRow(ByVal row As products_aboRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_aboDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class aboDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnabo_id As Global.System.Data.DataColumn
        
        Private columncustomerid As Global.System.Data.DataColumn
        
        Private columnAction As Global.System.Data.DataColumn
        
        Private columncode_id As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnproduct_id As Global.System.Data.DataColumn
        
        Private columnpayment_method As Global.System.Data.DataColumn
        
        Private columnprivilege_notified As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnsite As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "abo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property abo_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnabo_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customeridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomerid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property code_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property product_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property payment_methodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayment_method
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property privilege_notifiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprivilege_notified
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As aboRow
            Get
                Return CType(Me.Rows(index),aboRow)
            End Get
        End Property
        
        Public Event aboRowChanging As aboRowChangeEventHandler
        
        Public Event aboRowChanged As aboRowChangeEventHandler
        
        Public Event aboRowDeleting As aboRowChangeEventHandler
        
        Public Event aboRowDeleted As aboRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddaboRow(ByVal row As aboRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddaboRow(ByVal customerid As Integer, ByVal Action As Integer, ByVal code_id As Integer, ByVal _Date As Date, ByVal product_id As Integer, ByVal payment_method As String, ByVal privilege_notified As Integer, ByVal comment As String, ByVal site As Integer) As aboRow
            Dim rowaboRow As aboRow = CType(Me.NewRow,aboRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, customerid, Action, code_id, _Date, product_id, payment_method, privilege_notified, comment, site}
            rowaboRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaboRow)
            Return rowaboRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByabo_id(ByVal abo_id As Integer) As aboRow
            Return CType(Me.Rows.Find(New Object() {abo_id}),aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As aboDataTable = CType(MyBase.Clone,aboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New aboDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnabo_id = MyBase.Columns("abo_id")
            Me.columncustomerid = MyBase.Columns("customerid")
            Me.columnAction = MyBase.Columns("Action")
            Me.columncode_id = MyBase.Columns("code_id")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnproduct_id = MyBase.Columns("product_id")
            Me.columnpayment_method = MyBase.Columns("payment_method")
            Me.columnprivilege_notified = MyBase.Columns("privilege_notified")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnsite = MyBase.Columns("site")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnabo_id = New Global.System.Data.DataColumn("abo_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnabo_id)
            Me.columncustomerid = New Global.System.Data.DataColumn("customerid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomerid)
            Me.columnAction = New Global.System.Data.DataColumn("Action", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAction)
            Me.columncode_id = New Global.System.Data.DataColumn("code_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode_id)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnproduct_id = New Global.System.Data.DataColumn("product_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_id)
            Me.columnpayment_method = New Global.System.Data.DataColumn("payment_method", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayment_method)
            Me.columnprivilege_notified = New Global.System.Data.DataColumn("privilege_notified", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprivilege_notified)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnsite = New Global.System.Data.DataColumn("site", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsite)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsCustomerMaintKey6", New Global.System.Data.DataColumn() {Me.columnabo_id}, true))
            Me.columnabo_id.AutoIncrement = true
            Me.columnabo_id.AllowDBNull = false
            Me.columnabo_id.ReadOnly = true
            Me.columnabo_id.Unique = true
            Me.columncustomerid.AllowDBNull = false
            Me.columnAction.AllowDBNull = false
            Me.columnproduct_id.AllowDBNull = false
            Me.columnpayment_method.AllowDBNull = false
            Me.columnprivilege_notified.AllowDBNull = false
            Me.columncomment.AllowDBNull = false
            Me.columnsite.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewaboRow() As aboRow
            Return CType(Me.NewRow,aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New aboRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(aboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.aboRowChangedEvent) Is Nothing) Then
                RaiseEvent aboRowChanged(Me, New aboRowChangeEvent(CType(e.Row,aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.aboRowChangingEvent) Is Nothing) Then
                RaiseEvent aboRowChanging(Me, New aboRowChangeEvent(CType(e.Row,aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.aboRowDeletedEvent) Is Nothing) Then
                RaiseEvent aboRowDeleted(Me, New aboRowChangeEvent(CType(e.Row,aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.aboRowDeletingEvent) Is Nothing) Then
                RaiseEvent aboRowDeleting(Me, New aboRowChangeEvent(CType(e.Row,aboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveaboRow(ByVal row As aboRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "aboDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class discount_codeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columndiscount_code_id As Global.System.Data.DataColumn
        
        Private columndiscount_code As Global.System.Data.DataColumn
        
        Private columndiscount_type As Global.System.Data.DataColumn
        
        Private columndiscount_value As Global.System.Data.DataColumn
        
        Private columndiscount_limit As Global.System.Data.DataColumn
        
        Private columndiscount_commitment As Global.System.Data.DataColumn
        
        Private columndiscount_status As Global.System.Data.DataColumn
        
        Private columndiscount_text_fr As Global.System.Data.DataColumn
        
        Private columndiscount_text_nl As Global.System.Data.DataColumn
        
        Private columndiscount_text_en As Global.System.Data.DataColumn
        
        Private columndiscount_abo_validityto_type As Global.System.Data.DataColumn
        
        Private columndiscount_abo_validityto_value As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columndiscount_nbr_month_before_reuse As Global.System.Data.DataColumn
        
        Private columndiscount_recurring_nbr_of_month As Global.System.Data.DataColumn
        
        Private columnbypass_discountuse As Global.System.Data.DataColumn
        
        Private columndiscount_validityto As Global.System.Data.DataColumn
        
        Private columnpayable As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "discount_code"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_code_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_code_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_limitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_limit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_commitmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_commitment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_text_frColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_text_fr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_text_nlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_text_nl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_text_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_text_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_abo_validityto_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_abo_validityto_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_abo_validityto_valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_abo_validityto_value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_nbr_month_before_reuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_nbr_month_before_reuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_recurring_nbr_of_monthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_recurring_nbr_of_month
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bypass_discountuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbypass_discountuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property discount_validitytoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount_validityto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property payableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As discount_codeRow
            Get
                Return CType(Me.Rows(index),discount_codeRow)
            End Get
        End Property
        
        Public Event discount_codeRowChanging As discount_codeRowChangeEventHandler
        
        Public Event discount_codeRowChanged As discount_codeRowChangeEventHandler
        
        Public Event discount_codeRowDeleting As discount_codeRowChangeEventHandler
        
        Public Event discount_codeRowDeleted As discount_codeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddiscount_codeRow(ByVal row As discount_codeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddiscount_codeRow( _
                    ByVal discount_code As String,  _
                    ByVal discount_type As Integer,  _
                    ByVal discount_value As Decimal,  _
                    ByVal discount_limit As Integer,  _
                    ByVal discount_commitment As Integer,  _
                    ByVal discount_status As Integer,  _
                    ByVal discount_text_fr As String,  _
                    ByVal discount_text_nl As String,  _
                    ByVal discount_text_en As String,  _
                    ByVal discount_abo_validityto_type As Integer,  _
                    ByVal discount_abo_validityto_value As Integer,  _
                    ByVal comment As String,  _
                    ByVal discount_nbr_month_before_reuse As Integer,  _
                    ByVal discount_recurring_nbr_of_month As Integer,  _
                    ByVal bypass_discountuse As Integer,  _
                    ByVal discount_validityto As Date,  _
                    ByVal payable As Integer) As discount_codeRow
            Dim rowdiscount_codeRow As discount_codeRow = CType(Me.NewRow,discount_codeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, discount_code, discount_type, discount_value, discount_limit, discount_commitment, discount_status, discount_text_fr, discount_text_nl, discount_text_en, discount_abo_validityto_type, discount_abo_validityto_value, comment, discount_nbr_month_before_reuse, discount_recurring_nbr_of_month, bypass_discountuse, discount_validityto, payable}
            rowdiscount_codeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdiscount_codeRow)
            Return rowdiscount_codeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBydiscount_code_id(ByVal discount_code_id As Integer) As discount_codeRow
            Return CType(Me.Rows.Find(New Object() {discount_code_id}),discount_codeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As discount_codeDataTable = CType(MyBase.Clone,discount_codeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New discount_codeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndiscount_code_id = MyBase.Columns("discount_code_id")
            Me.columndiscount_code = MyBase.Columns("discount_code")
            Me.columndiscount_type = MyBase.Columns("discount_type")
            Me.columndiscount_value = MyBase.Columns("discount_value")
            Me.columndiscount_limit = MyBase.Columns("discount_limit")
            Me.columndiscount_commitment = MyBase.Columns("discount_commitment")
            Me.columndiscount_status = MyBase.Columns("discount_status")
            Me.columndiscount_text_fr = MyBase.Columns("discount_text_fr")
            Me.columndiscount_text_nl = MyBase.Columns("discount_text_nl")
            Me.columndiscount_text_en = MyBase.Columns("discount_text_en")
            Me.columndiscount_abo_validityto_type = MyBase.Columns("discount_abo_validityto_type")
            Me.columndiscount_abo_validityto_value = MyBase.Columns("discount_abo_validityto_value")
            Me.columncomment = MyBase.Columns("comment")
            Me.columndiscount_nbr_month_before_reuse = MyBase.Columns("discount_nbr_month_before_reuse")
            Me.columndiscount_recurring_nbr_of_month = MyBase.Columns("discount_recurring_nbr_of_month")
            Me.columnbypass_discountuse = MyBase.Columns("bypass_discountuse")
            Me.columndiscount_validityto = MyBase.Columns("discount_validityto")
            Me.columnpayable = MyBase.Columns("payable")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndiscount_code_id = New Global.System.Data.DataColumn("discount_code_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_code_id)
            Me.columndiscount_code = New Global.System.Data.DataColumn("discount_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_code)
            Me.columndiscount_type = New Global.System.Data.DataColumn("discount_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_type)
            Me.columndiscount_value = New Global.System.Data.DataColumn("discount_value", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_value)
            Me.columndiscount_limit = New Global.System.Data.DataColumn("discount_limit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_limit)
            Me.columndiscount_commitment = New Global.System.Data.DataColumn("discount_commitment", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_commitment)
            Me.columndiscount_status = New Global.System.Data.DataColumn("discount_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_status)
            Me.columndiscount_text_fr = New Global.System.Data.DataColumn("discount_text_fr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_text_fr)
            Me.columndiscount_text_nl = New Global.System.Data.DataColumn("discount_text_nl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_text_nl)
            Me.columndiscount_text_en = New Global.System.Data.DataColumn("discount_text_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_text_en)
            Me.columndiscount_abo_validityto_type = New Global.System.Data.DataColumn("discount_abo_validityto_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_abo_validityto_type)
            Me.columndiscount_abo_validityto_value = New Global.System.Data.DataColumn("discount_abo_validityto_value", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_abo_validityto_value)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columndiscount_nbr_month_before_reuse = New Global.System.Data.DataColumn("discount_nbr_month_before_reuse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_nbr_month_before_reuse)
            Me.columndiscount_recurring_nbr_of_month = New Global.System.Data.DataColumn("discount_recurring_nbr_of_month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_recurring_nbr_of_month)
            Me.columnbypass_discountuse = New Global.System.Data.DataColumn("bypass_discountuse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbypass_discountuse)
            Me.columndiscount_validityto = New Global.System.Data.DataColumn("discount_validityto", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount_validityto)
            Me.columnpayable = New Global.System.Data.DataColumn("payable", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayable)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsCustomerMaintKey10", New Global.System.Data.DataColumn() {Me.columndiscount_code_id}, true))
            Me.columndiscount_code_id.AutoIncrement = true
            Me.columndiscount_code_id.AllowDBNull = false
            Me.columndiscount_code_id.ReadOnly = true
            Me.columndiscount_code_id.Unique = true
            Me.columndiscount_code.AllowDBNull = false
            Me.columndiscount_type.AllowDBNull = false
            Me.columndiscount_value.AllowDBNull = false
            Me.columndiscount_limit.AllowDBNull = false
            Me.columndiscount_commitment.AllowDBNull = false
            Me.columndiscount_status.AllowDBNull = false
            Me.columndiscount_text_fr.AllowDBNull = false
            Me.columndiscount_text_nl.AllowDBNull = false
            Me.columndiscount_text_en.AllowDBNull = false
            Me.columndiscount_abo_validityto_type.AllowDBNull = false
            Me.columndiscount_abo_validityto_value.AllowDBNull = false
            Me.columncomment.AllowDBNull = false
            Me.columndiscount_nbr_month_before_reuse.AllowDBNull = false
            Me.columndiscount_recurring_nbr_of_month.AllowDBNull = false
            Me.columnbypass_discountuse.AllowDBNull = false
            Me.columnpayable.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdiscount_codeRow() As discount_codeRow
            Return CType(Me.NewRow,discount_codeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New discount_codeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(discount_codeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.discount_codeRowChangedEvent) Is Nothing) Then
                RaiseEvent discount_codeRowChanged(Me, New discount_codeRowChangeEvent(CType(e.Row,discount_codeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.discount_codeRowChangingEvent) Is Nothing) Then
                RaiseEvent discount_codeRowChanging(Me, New discount_codeRowChangeEvent(CType(e.Row,discount_codeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.discount_codeRowDeletedEvent) Is Nothing) Then
                RaiseEvent discount_codeRowDeleted(Me, New discount_codeRowChangeEvent(CType(e.Row,discount_codeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.discount_codeRowDeletingEvent) Is Nothing) Then
                RaiseEvent discount_codeRowDeleting(Me, New discount_codeRowChangeEvent(CType(e.Row,discount_codeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removediscount_codeRow(ByVal row As discount_codeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "discount_codeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class languagesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlanguages_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "languages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languages_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As languagesRow
            Get
                Return CType(Me.Rows(index),languagesRow)
            End Get
        End Property
        
        Public Event languagesRowChanging As languagesRowChangeEventHandler
        
        Public Event languagesRowChanged As languagesRowChangeEventHandler
        
        Public Event languagesRowDeleting As languagesRowChangeEventHandler
        
        Public Event languagesRowDeleted As languagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddlanguagesRow(ByVal row As languagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddlanguagesRow(ByVal languages_id As Integer, ByVal name As String, ByVal code As String) As languagesRow
            Dim rowlanguagesRow As languagesRow = CType(Me.NewRow,languagesRow)
            Dim columnValuesArray() As Object = New Object() {languages_id, name, code}
            rowlanguagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlanguagesRow)
            Return rowlanguagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As languagesDataTable = CType(MyBase.Clone,languagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New languagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlanguages_id = MyBase.Columns("languages_id")
            Me.columnname = MyBase.Columns("name")
            Me.columncode = MyBase.Columns("code")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlanguages_id = New Global.System.Data.DataColumn("languages_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewlanguagesRow() As languagesRow
            Return CType(Me.NewRow,languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New languagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.languagesRowChangedEvent) Is Nothing) Then
                RaiseEvent languagesRowChanged(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.languagesRowChangingEvent) Is Nothing) Then
                RaiseEvent languagesRowChanging(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.languagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent languagesRowDeleted(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.languagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent languagesRowDeleting(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovelanguagesRow(ByVal row As languagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "languagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class generalentityDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEntityID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCurrCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "generalentity"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As generalentityRow
            Get
                Return CType(Me.Rows(index),generalentityRow)
            End Get
        End Property
        
        Public Event generalentityRowChanging As generalentityRowChangeEventHandler
        
        Public Event generalentityRowChanged As generalentityRowChangeEventHandler
        
        Public Event generalentityRowDeleting As generalentityRowChangeEventHandler
        
        Public Event generalentityRowDeleted As generalentityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddgeneralentityRow(ByVal row As generalentityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddgeneralentityRow(ByVal EntityID As Integer, ByVal Name As String, ByVal Description As String, ByVal CurrCode As String) As generalentityRow
            Dim rowgeneralentityRow As generalentityRow = CType(Me.NewRow,generalentityRow)
            Dim columnValuesArray() As Object = New Object() {EntityID, Name, Description, CurrCode}
            rowgeneralentityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowgeneralentityRow)
            Return rowgeneralentityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As generalentityDataTable = CType(MyBase.Clone,generalentityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New generalentityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEntityID = MyBase.Columns("EntityID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCurrCode = MyBase.Columns("CurrCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEntityID = New Global.System.Data.DataColumn("EntityID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntityID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCurrCode = New Global.System.Data.DataColumn("CurrCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrCode)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewgeneralentityRow() As generalentityRow
            Return CType(Me.NewRow,generalentityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New generalentityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(generalentityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.generalentityRowChangedEvent) Is Nothing) Then
                RaiseEvent generalentityRowChanged(Me, New generalentityRowChangeEvent(CType(e.Row,generalentityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.generalentityRowChangingEvent) Is Nothing) Then
                RaiseEvent generalentityRowChanging(Me, New generalentityRowChangeEvent(CType(e.Row,generalentityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.generalentityRowDeletedEvent) Is Nothing) Then
                RaiseEvent generalentityRowDeleted(Me, New generalentityRowChangeEvent(CType(e.Row,generalentityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.generalentityRowDeletingEvent) Is Nothing) Then
                RaiseEvent generalentityRowDeleting(Me, New generalentityRowChangeEvent(CType(e.Row,generalentityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovegeneralentityRow(ByVal row As generalentityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "generalentityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class custservDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustserv_id As Global.System.Data.DataColumn
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columncustserv_cat_id As Global.System.Data.DataColumn
        
        Private columncustomer_date As Global.System.Data.DataColumn
        
        Private columnorders_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columndvd_id As Global.System.Data.DataColumn
        
        Private columnsubject As Global.System.Data.DataColumn
        
        Private columnmessage As Global.System.Data.DataColumn
        
        Private columnadmindate As Global.System.Data.DataColumn
        
        Private columnadminby As Global.System.Data.DataColumn
        
        Private columnadminmessage As Global.System.Data.DataColumn
        
        Private columnmessagesent As Global.System.Data.DataColumn
        
        Private columndvd_finally_arrived_mail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "custserv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custserv_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustserv_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custserv_cat_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustserv_cat_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customer_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomer_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property orders_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorders_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property messageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmessage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admindateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmindate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adminbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadminby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adminmessageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadminmessage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property messagesentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmessagesent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvd_finally_arrived_mailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvd_finally_arrived_mail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As custservRow
            Get
                Return CType(Me.Rows(index),custservRow)
            End Get
        End Property
        
        Public Event custservRowChanging As custservRowChangeEventHandler
        
        Public Event custservRowChanged As custservRowChangeEventHandler
        
        Public Event custservRowDeleting As custservRowChangeEventHandler
        
        Public Event custservRowDeleted As custservRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcustservRow(ByVal row As custservRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcustservRow(ByVal custserv_id As Integer, ByVal customers_id As Integer, ByVal language_id As Integer, ByVal custserv_cat_id As Integer, ByVal customer_date As Date, ByVal orders_id As Integer, ByVal products_id As Integer, ByVal dvd_id As Integer, ByVal subject As String, ByVal message As String, ByVal admindate As Date, ByVal adminby As Integer, ByVal adminmessage As String, ByVal messagesent As Integer, ByVal dvd_finally_arrived_mail As Integer) As custservRow
            Dim rowcustservRow As custservRow = CType(Me.NewRow,custservRow)
            Dim columnValuesArray() As Object = New Object() {custserv_id, customers_id, language_id, custserv_cat_id, customer_date, orders_id, products_id, dvd_id, subject, message, admindate, adminby, adminmessage, messagesent, dvd_finally_arrived_mail}
            rowcustservRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustservRow)
            Return rowcustservRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustserv_id(ByVal custserv_id As Integer) As custservRow
            Return CType(Me.Rows.Find(New Object() {custserv_id}),custservRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As custservDataTable = CType(MyBase.Clone,custservDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New custservDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustserv_id = MyBase.Columns("custserv_id")
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columncustserv_cat_id = MyBase.Columns("custserv_cat_id")
            Me.columncustomer_date = MyBase.Columns("customer_date")
            Me.columnorders_id = MyBase.Columns("orders_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columndvd_id = MyBase.Columns("dvd_id")
            Me.columnsubject = MyBase.Columns("subject")
            Me.columnmessage = MyBase.Columns("message")
            Me.columnadmindate = MyBase.Columns("admindate")
            Me.columnadminby = MyBase.Columns("adminby")
            Me.columnadminmessage = MyBase.Columns("adminmessage")
            Me.columnmessagesent = MyBase.Columns("messagesent")
            Me.columndvd_finally_arrived_mail = MyBase.Columns("dvd_finally_arrived_mail")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustserv_id = New Global.System.Data.DataColumn("custserv_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustserv_id)
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columncustserv_cat_id = New Global.System.Data.DataColumn("custserv_cat_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustserv_cat_id)
            Me.columncustomer_date = New Global.System.Data.DataColumn("customer_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomer_date)
            Me.columnorders_id = New Global.System.Data.DataColumn("orders_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorders_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columndvd_id = New Global.System.Data.DataColumn("dvd_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_id)
            Me.columnsubject = New Global.System.Data.DataColumn("subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubject)
            Me.columnmessage = New Global.System.Data.DataColumn("message", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmessage)
            Me.columnadmindate = New Global.System.Data.DataColumn("admindate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmindate)
            Me.columnadminby = New Global.System.Data.DataColumn("adminby", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadminby)
            Me.columnadminmessage = New Global.System.Data.DataColumn("adminmessage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadminmessage)
            Me.columnmessagesent = New Global.System.Data.DataColumn("messagesent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmessagesent)
            Me.columndvd_finally_arrived_mail = New Global.System.Data.DataColumn("dvd_finally_arrived_mail", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvd_finally_arrived_mail)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustserv_id}, true))
            Me.columncustserv_id.AllowDBNull = false
            Me.columncustserv_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcustservRow() As custservRow
            Return CType(Me.NewRow,custservRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New custservRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(custservRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.custservRowChangedEvent) Is Nothing) Then
                RaiseEvent custservRowChanged(Me, New custservRowChangeEvent(CType(e.Row,custservRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.custservRowChangingEvent) Is Nothing) Then
                RaiseEvent custservRowChanging(Me, New custservRowChangeEvent(CType(e.Row,custservRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.custservRowDeletedEvent) Is Nothing) Then
                RaiseEvent custservRowDeleted(Me, New custservRowChangeEvent(CType(e.Row,custservRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.custservRowDeletingEvent) Is Nothing) Then
                RaiseEvent custservRowDeleting(Me, New custservRowChangeEvent(CType(e.Row,custservRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecustservRow(ByVal row As custservRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "custservDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class domiciliation_statusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columndomiciliation_status_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columndomiciliation_status_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "domiciliation_status"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_status_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_status_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_status_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_status_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As domiciliation_statusRow
            Get
                Return CType(Me.Rows(index),domiciliation_statusRow)
            End Get
        End Property
        
        Public Event domiciliation_statusRowChanging As domiciliation_statusRowChangeEventHandler
        
        Public Event domiciliation_statusRowChanged As domiciliation_statusRowChangeEventHandler
        
        Public Event domiciliation_statusRowDeleting As domiciliation_statusRowChangeEventHandler
        
        Public Event domiciliation_statusRowDeleted As domiciliation_statusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddomiciliation_statusRow(ByVal row As domiciliation_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddomiciliation_statusRow(ByVal domiciliation_status_id As Integer, ByVal language_id As Integer, ByVal domiciliation_status_name As String) As domiciliation_statusRow
            Dim rowdomiciliation_statusRow As domiciliation_statusRow = CType(Me.NewRow,domiciliation_statusRow)
            Dim columnValuesArray() As Object = New Object() {domiciliation_status_id, language_id, domiciliation_status_name}
            rowdomiciliation_statusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdomiciliation_statusRow)
            Return rowdomiciliation_statusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBydomiciliation_status_idlanguage_id(ByVal domiciliation_status_id As Integer, ByVal language_id As Integer) As domiciliation_statusRow
            Return CType(Me.Rows.Find(New Object() {domiciliation_status_id, language_id}),domiciliation_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As domiciliation_statusDataTable = CType(MyBase.Clone,domiciliation_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New domiciliation_statusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndomiciliation_status_id = MyBase.Columns("domiciliation_status_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columndomiciliation_status_name = MyBase.Columns("domiciliation_status_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndomiciliation_status_id = New Global.System.Data.DataColumn("domiciliation_status_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_status_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columndomiciliation_status_name = New Global.System.Data.DataColumn("domiciliation_status_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_status_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columndomiciliation_status_id, Me.columnlanguage_id}, true))
            Me.columndomiciliation_status_id.AllowDBNull = false
            Me.columnlanguage_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdomiciliation_statusRow() As domiciliation_statusRow
            Return CType(Me.NewRow,domiciliation_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New domiciliation_statusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(domiciliation_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.domiciliation_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent domiciliation_statusRowChanged(Me, New domiciliation_statusRowChangeEvent(CType(e.Row,domiciliation_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.domiciliation_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent domiciliation_statusRowChanging(Me, New domiciliation_statusRowChangeEvent(CType(e.Row,domiciliation_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.domiciliation_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent domiciliation_statusRowDeleted(Me, New domiciliation_statusRowChangeEvent(CType(e.Row,domiciliation_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.domiciliation_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent domiciliation_statusRowDeleting(Me, New domiciliation_statusRowChangeEvent(CType(e.Row,domiciliation_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedomiciliation_statusRow(ByVal row As domiciliation_statusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "domiciliation_statusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cc_expiration_statusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncc_expiration_status_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columncc_expiration_status_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cc_expiration_status"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cc_expiration_status_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncc_expiration_status_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cc_expiration_status_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncc_expiration_status_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cc_expiration_statusRow
            Get
                Return CType(Me.Rows(index),cc_expiration_statusRow)
            End Get
        End Property
        
        Public Event cc_expiration_statusRowChanging As cc_expiration_statusRowChangeEventHandler
        
        Public Event cc_expiration_statusRowChanged As cc_expiration_statusRowChangeEventHandler
        
        Public Event cc_expiration_statusRowDeleting As cc_expiration_statusRowChangeEventHandler
        
        Public Event cc_expiration_statusRowDeleted As cc_expiration_statusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcc_expiration_statusRow(ByVal row As cc_expiration_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcc_expiration_statusRow(ByVal cc_expiration_status_id As Integer, ByVal language_id As Integer, ByVal cc_expiration_status_name As String) As cc_expiration_statusRow
            Dim rowcc_expiration_statusRow As cc_expiration_statusRow = CType(Me.NewRow,cc_expiration_statusRow)
            Dim columnValuesArray() As Object = New Object() {cc_expiration_status_id, language_id, cc_expiration_status_name}
            rowcc_expiration_statusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcc_expiration_statusRow)
            Return rowcc_expiration_statusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycc_expiration_status_idlanguage_id(ByVal cc_expiration_status_id As Integer, ByVal language_id As Integer) As cc_expiration_statusRow
            Return CType(Me.Rows.Find(New Object() {cc_expiration_status_id, language_id}),cc_expiration_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cc_expiration_statusDataTable = CType(MyBase.Clone,cc_expiration_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cc_expiration_statusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncc_expiration_status_id = MyBase.Columns("cc_expiration_status_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columncc_expiration_status_name = MyBase.Columns("cc_expiration_status_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncc_expiration_status_id = New Global.System.Data.DataColumn("cc_expiration_status_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncc_expiration_status_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columncc_expiration_status_name = New Global.System.Data.DataColumn("cc_expiration_status_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncc_expiration_status_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncc_expiration_status_id, Me.columnlanguage_id}, true))
            Me.columncc_expiration_status_id.AllowDBNull = false
            Me.columnlanguage_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcc_expiration_statusRow() As cc_expiration_statusRow
            Return CType(Me.NewRow,cc_expiration_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cc_expiration_statusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cc_expiration_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cc_expiration_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent cc_expiration_statusRowChanged(Me, New cc_expiration_statusRowChangeEvent(CType(e.Row,cc_expiration_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cc_expiration_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent cc_expiration_statusRowChanging(Me, New cc_expiration_statusRowChangeEvent(CType(e.Row,cc_expiration_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cc_expiration_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent cc_expiration_statusRowDeleted(Me, New cc_expiration_statusRowChangeEvent(CType(e.Row,cc_expiration_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cc_expiration_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent cc_expiration_statusRowDeleting(Me, New cc_expiration_statusRowChangeEvent(CType(e.Row,cc_expiration_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecc_expiration_statusRow(ByVal row As cc_expiration_statusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cc_expiration_statusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnEntityID As Global.System.Data.DataColumn
        
        Private columngroup_id As Global.System.Data.DataColumn
        
        Private columncustomers_gender As Global.System.Data.DataColumn
        
        Private columncustomers_firstname As Global.System.Data.DataColumn
        
        Private columncustomers_lastname As Global.System.Data.DataColumn
        
        Private columncustomers_dob As Global.System.Data.DataColumn
        
        Private columncustomers_email_address As Global.System.Data.DataColumn
        
        Private columncustomers_default_address_id As Global.System.Data.DataColumn
        
        Private columncustomers_telephone As Global.System.Data.DataColumn
        
        Private columncustomers_telephone_evening As Global.System.Data.DataColumn
        
        Private columncustomers_fax As Global.System.Data.DataColumn
        
        Private columncustomers_password As Global.System.Data.DataColumn
        
        Private columncustomers_newsletter As Global.System.Data.DataColumn
        
        Private columncustomers_newsletterpartner As Global.System.Data.DataColumn
        
        Private columncustomers_privilege As Global.System.Data.DataColumn
        
        Private columncustomers_privilege_balance As Global.System.Data.DataColumn
        
        Private columncustomers_garantie As Global.System.Data.DataColumn
        
        Private columnsponsoring_code As Global.System.Data.DataColumn
        
        Private columnsponsored_code As Global.System.Data.DataColumn
        
        Private columncustomers_abo As Global.System.Data.DataColumn
        
        Private columncustomers_abo_suspended As Global.System.Data.DataColumn
        
        Private columncustomers_abo_type As Global.System.Data.DataColumn
        
        Private columncustomers_next_abo_type As Global.System.Data.DataColumn
        
        Private columnflagminiat1995 As Global.System.Data.DataColumn
        
        Private columncustomers_abo_method As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_norm As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_adult As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_home_norm As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_home_adult As Global.System.Data.DataColumn
        
        Private columnthrottling As Global.System.Data.DataColumn
        
        Private columncustomers_abo_validityto As Global.System.Data.DataColumn
        
        Private columncustomers_abo_rank As Global.System.Data.DataColumn
        
        Private columncustomers_abo_start_rentthismonth As Global.System.Data.DataColumn
        
        Private columncustomers_abo_dvd_credit As Global.System.Data.DataColumn
        
        Private columncustomers_abo_multishipment As Global.System.Data.DataColumn
        
        Private columncustomers_abo_discount_recurring_to_date As Global.System.Data.DataColumn
        
        Private columnabotested As Global.System.Data.DataColumn
        
        Private columncustomers_abo_status As Global.System.Data.DataColumn
        
        Private columncustomers_abo_payment_method As Global.System.Data.DataColumn
        
        Private columndomiciliation_status As Global.System.Data.DataColumn
        
        Private columndomiciliation_debiter_name As Global.System.Data.DataColumn
        
        Private columndomiciliation_number As Global.System.Data.DataColumn
        
        Private columndomiciliation_account_number As Global.System.Data.DataColumn
        
        Private columnadult_pwd As Global.System.Data.DataColumn
        
        Private columnogone_card_type As Global.System.Data.DataColumn
        
        Private columnogone_card_no As Global.System.Data.DataColumn
        
        Private columnogone_exp_date As Global.System.Data.DataColumn
        
        Private columnogone_owner As Global.System.Data.DataColumn
        
        Private columnogone_cc_expiration_status As Global.System.Data.DataColumn
        
        Private columnoffline_payment_status As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnvip As Global.System.Data.DataColumn
        
        Private columnblack_listed As Global.System.Data.DataColumn
        
        Private columnred_listed As Global.System.Data.DataColumn
        
        Private columnsm_eligible As Global.System.Data.DataColumn
        
        Private columncustomers_enquiry_id As Global.System.Data.DataColumn
        
        Private columndate_first_delivery As Global.System.Data.DataColumn
        
        Private columnmail_wl_adult_not_sufficient As Global.System.Data.DataColumn
        
        Private columnmail_wl_norm_not_sufficient As Global.System.Data.DataColumn
        
        Private columnmgm_points As Global.System.Data.DataColumn
        
        Private columnwishlist_kind As Global.System.Data.DataColumn
        
        Private columnactivation_discount_code_id As Global.System.Data.DataColumn
        
        Private columnactivation_discount_code_type As Global.System.Data.DataColumn
        
        Private columncustomers_next_discount_code As Global.System.Data.DataColumn
        
        Private columncustomers_registration_step As Global.System.Data.DataColumn
        
        Private columncustomers_abo_auto_stop_next_reconduction As Global.System.Data.DataColumn
        
        Private columncustomers_info_date_of_last_logon As Global.System.Data.DataColumn
        
        Private columncustomers_info_number_of_logons As Global.System.Data.DataColumn
        
        Private columncustomers_info_date_account_created As Global.System.Data.DataColumn
        
        Private columncustomers_info_date_account_last_modified As Global.System.Data.DataColumn
        
        Private columnglobal_product_notifications As Global.System.Data.DataColumn
        
        Private columncustomers_language As Global.System.Data.DataColumn
        
        Private columnsite As Global.System.Data.DataColumn
        
        Private columnpartners_id As Global.System.Data.DataColumn
        
        Private columnbelgiqueloisirs_id As Global.System.Data.DataColumn
        
        Private columndvdpost_known_by As Global.System.Data.DataColumn
        
        Private columnselected_for_email As Global.System.Data.DataColumn
        
        Private columnis_email_valid As Global.System.Data.DataColumn
        
        Private columnlast_suspension_date As Global.System.Data.DataColumn
        
        Private columncustomers_locked__for_reconduction As Global.System.Data.DataColumn
        
        Private columnabo_not_served_reason As Global.System.Data.DataColumn
        
        Private columnrating_users As Global.System.Data.DataColumn
        
        Private columnrating_count As Global.System.Data.DataColumn
        
        Private columnmarketing_ok As Global.System.Data.DataColumn
        
        Private columnencrypted_password As Global.System.Data.DataColumn
        
        Private columnpassword_salt As Global.System.Data.DataColumn
        
        Private columnreset_password_token As Global.System.Data.DataColumn
        
        Private columnremember_token As Global.System.Data.DataColumn
        
        Private columnremember_created_at As Global.System.Data.DataColumn
        
        Private columnauthentication_token As Global.System.Data.DataColumn
        
        Private columnverification_code As Global.System.Data.DataColumn
        
        Private columnrefresh_token As Global.System.Data.DataColumn
        
        Private columnrefresh_token_expires_at As Global.System.Data.DataColumn
        
        Private columnaccess_token_expires_at As Global.System.Data.DataColumn
        
        Private columnsleep As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntityIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntityID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_genderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_gender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_firstnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_firstname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_lastnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_lastname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_dobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_dob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_email_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_email_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_default_address_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_default_address_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_telephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_telephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_telephone_eveningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_telephone_evening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_fax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_password
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_newsletterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_newsletter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_newsletterpartnerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_newsletterpartner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_privilegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_privilege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_privilege_balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_privilege_balance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_garantieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_garantie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sponsoring_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsponsoring_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sponsored_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsponsored_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_aboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_suspendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_suspended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_next_abo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_next_abo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property flagminiat1995Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnflagminiat1995
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_methodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_method
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_normColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_norm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_adultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_adult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_home_normColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_home_norm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_home_adultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_home_adult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property throttlingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthrottling
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_validitytoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_validityto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_rankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_rank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_start_rentthismonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_start_rentthismonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_dvd_creditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_dvd_credit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_multishipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_multishipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_discount_recurring_to_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_discount_recurring_to_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property abotestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnabotested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_payment_methodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_payment_method
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_debiter_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_debiter_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property domiciliation_account_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndomiciliation_account_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adult_pwdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadult_pwd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ogone_card_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnogone_card_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ogone_card_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnogone_card_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ogone_exp_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnogone_exp_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ogone_ownerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnogone_owner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ogone_cc_expiration_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnogone_cc_expiration_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property offline_payment_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoffline_payment_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property black_listedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnblack_listed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property red_listedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnred_listed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sm_eligibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsm_eligible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_enquiry_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_enquiry_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_first_deliveryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_first_delivery
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mail_wl_adult_not_sufficientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmail_wl_adult_not_sufficient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mail_wl_norm_not_sufficientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmail_wl_norm_not_sufficient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mgm_pointsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmgm_points
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wishlist_kindColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwishlist_kind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property activation_discount_code_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactivation_discount_code_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property activation_discount_code_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactivation_discount_code_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_next_discount_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_next_discount_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_registration_stepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_registration_step
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_auto_stop_next_reconductionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_auto_stop_next_reconduction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_info_date_of_last_logonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_info_date_of_last_logon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_info_number_of_logonsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_info_number_of_logons
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_info_date_account_createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_info_date_account_created
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_info_date_account_last_modifiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_info_date_account_last_modified
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property global_product_notificationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnglobal_product_notifications
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_languageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_language
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property partners_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartners_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property belgiqueloisirs_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbelgiqueloisirs_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dvdpost_known_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndvdpost_known_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property selected_for_emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnselected_for_email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_email_validColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_email_valid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property last_suspension_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_suspension_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_locked__for_reconductionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_locked__for_reconduction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property abo_not_served_reasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnabo_not_served_reason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rating_usersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrating_users
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rating_countColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrating_count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property marketing_okColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmarketing_ok
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property encrypted_passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencrypted_password
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property password_saltColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassword_salt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reset_password_tokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreset_password_token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remember_tokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremember_token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remember_created_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremember_created_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property authentication_tokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnauthentication_token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property verification_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnverification_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refresh_tokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefresh_token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refresh_token_expires_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefresh_token_expires_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property access_token_expires_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccess_token_expires_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sleepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsleep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customersRow
            Get
                Return CType(Me.Rows(index),customersRow)
            End Get
        End Property
        
        Public Event customersRowChanging As customersRowChangeEventHandler
        
        Public Event customersRowChanged As customersRowChangeEventHandler
        
        Public Event customersRowDeleting As customersRowChangeEventHandler
        
        Public Event customersRowDeleted As customersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcustomersRow(ByVal row As customersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcustomersRow( _
                    ByVal EntityID As Integer,  _
                    ByVal group_id As Integer,  _
                    ByVal customers_gender As String,  _
                    ByVal customers_firstname As String,  _
                    ByVal customers_lastname As String,  _
                    ByVal customers_dob As Date,  _
                    ByVal customers_email_address As String,  _
                    ByVal customers_default_address_id As Integer,  _
                    ByVal customers_telephone As String,  _
                    ByVal customers_telephone_evening As String,  _
                    ByVal customers_fax As String,  _
                    ByVal customers_password As String,  _
                    ByVal customers_newsletter As Boolean,  _
                    ByVal customers_newsletterpartner As Boolean,  _
                    ByVal customers_privilege As Integer,  _
                    ByVal customers_privilege_balance As Decimal,  _
                    ByVal customers_garantie As Integer,  _
                    ByVal sponsoring_code As String,  _
                    ByVal sponsored_code As String,  _
                    ByVal customers_abo As Integer,  _
                    ByVal customers_abo_suspended As Integer,  _
                    ByVal customers_abo_type As Integer,  _
                    ByVal customers_next_abo_type As Integer,  _
                    ByVal flagminiat1995 As Integer,  _
                    ByVal customers_abo_method As Integer,  _
                    ByVal customers_abo_dvd_norm As Integer,  _
                    ByVal customers_abo_dvd_adult As Integer,  _
                    ByVal customers_abo_dvd_home_norm As Integer,  _
                    ByVal customers_abo_dvd_home_adult As Integer,  _
                    ByVal throttling As Integer,  _
                    ByVal customers_abo_validityto As Date,  _
                    ByVal customers_abo_rank As Integer,  _
                    ByVal customers_abo_start_rentthismonth As Integer,  _
                    ByVal customers_abo_dvd_credit As Integer,  _
                    ByVal customers_abo_multishipment As Boolean,  _
                    ByVal customers_abo_discount_recurring_to_date As Date,  _
                    ByVal abotested As Integer,  _
                    ByVal customers_abo_status As Integer,  _
                    ByVal customers_abo_payment_method As Integer,  _
                    ByVal domiciliation_status As Integer,  _
                    ByVal domiciliation_debiter_name As String,  _
                    ByVal domiciliation_number As String,  _
                    ByVal domiciliation_account_number As String,  _
                    ByVal adult_pwd As String,  _
                    ByVal ogone_card_type As String,  _
                    ByVal ogone_card_no As String,  _
                    ByVal ogone_exp_date As String,  _
                    ByVal ogone_owner As String,  _
                    ByVal ogone_cc_expiration_status As Integer,  _
                    ByVal offline_payment_status As Integer,  _
                    ByVal comment As String,  _
                    ByVal vip As Integer,  _
                    ByVal black_listed As Boolean,  _
                    ByVal red_listed As Boolean,  _
                    ByVal sm_eligible As Integer,  _
                    ByVal customers_enquiry_id As Integer,  _
                    ByVal date_first_delivery As Date,  _
                    ByVal mail_wl_adult_not_sufficient As Date,  _
                    ByVal mail_wl_norm_not_sufficient As Date,  _
                    ByVal mgm_points As Integer,  _
                    ByVal wishlist_kind As Integer,  _
                    ByVal activation_discount_code_id As Integer,  _
                    ByVal activation_discount_code_type As String,  _
                    ByVal customers_next_discount_code As Integer,  _
                    ByVal customers_registration_step As Integer,  _
                    ByVal customers_abo_auto_stop_next_reconduction As Boolean,  _
                    ByVal customers_info_date_of_last_logon As Date,  _
                    ByVal customers_info_number_of_logons As Integer,  _
                    ByVal customers_info_date_account_created As Date,  _
                    ByVal customers_info_date_account_last_modified As Date,  _
                    ByVal global_product_notifications As Integer,  _
                    ByVal customers_language As Integer,  _
                    ByVal site As String,  _
                    ByVal partners_id As Integer,  _
                    ByVal belgiqueloisirs_id As String,  _
                    ByVal dvdpost_known_by As Integer,  _
                    ByVal selected_for_email As String,  _
                    ByVal is_email_valid As UInteger,  _
                    ByVal last_suspension_date As Date,  _
                    ByVal customers_locked__for_reconduction As Integer,  _
                    ByVal abo_not_served_reason As UInteger,  _
                    ByVal rating_users As UInteger,  _
                    ByVal rating_count As UInteger,  _
                    ByVal marketing_ok As String,  _
                    ByVal encrypted_password As String,  _
                    ByVal password_salt As String,  _
                    ByVal reset_password_token As String,  _
                    ByVal remember_token As String,  _
                    ByVal remember_created_at As Date,  _
                    ByVal authentication_token As String,  _
                    ByVal verification_code As String,  _
                    ByVal refresh_token As String,  _
                    ByVal refresh_token_expires_at As Date,  _
                    ByVal access_token_expires_at As Date,  _
                    ByVal sleep As Boolean) As customersRow
            Dim rowcustomersRow As customersRow = CType(Me.NewRow,customersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EntityID, group_id, customers_gender, customers_firstname, customers_lastname, customers_dob, customers_email_address, customers_default_address_id, customers_telephone, customers_telephone_evening, customers_fax, customers_password, customers_newsletter, customers_newsletterpartner, customers_privilege, customers_privilege_balance, customers_garantie, sponsoring_code, sponsored_code, customers_abo, customers_abo_suspended, customers_abo_type, customers_next_abo_type, flagminiat1995, customers_abo_method, customers_abo_dvd_norm, customers_abo_dvd_adult, customers_abo_dvd_home_norm, customers_abo_dvd_home_adult, throttling, customers_abo_validityto, customers_abo_rank, customers_abo_start_rentthismonth, customers_abo_dvd_credit, customers_abo_multishipment, customers_abo_discount_recurring_to_date, abotested, customers_abo_status, customers_abo_payment_method, domiciliation_status, domiciliation_debiter_name, domiciliation_number, domiciliation_account_number, adult_pwd, ogone_card_type, ogone_card_no, ogone_exp_date, ogone_owner, ogone_cc_expiration_status, offline_payment_status, comment, vip, black_listed, red_listed, sm_eligible, customers_enquiry_id, date_first_delivery, mail_wl_adult_not_sufficient, mail_wl_norm_not_sufficient, mgm_points, wishlist_kind, activation_discount_code_id, activation_discount_code_type, customers_next_discount_code, customers_registration_step, customers_abo_auto_stop_next_reconduction, customers_info_date_of_last_logon, customers_info_number_of_logons, customers_info_date_account_created, customers_info_date_account_last_modified, global_product_notifications, customers_language, site, partners_id, belgiqueloisirs_id, dvdpost_known_by, selected_for_email, is_email_valid, last_suspension_date, customers_locked__for_reconduction, abo_not_served_reason, rating_users, rating_count, marketing_ok, encrypted_password, password_salt, reset_password_token, remember_token, remember_created_at, authentication_token, verification_code, refresh_token, refresh_token_expires_at, access_token_expires_at, sleep}
            rowcustomersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomersRow)
            Return rowcustomersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_id(ByVal customers_id As Integer) As customersRow
            Return CType(Me.Rows.Find(New Object() {customers_id}),customersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customersDataTable = CType(MyBase.Clone,customersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnEntityID = MyBase.Columns("EntityID")
            Me.columngroup_id = MyBase.Columns("group_id")
            Me.columncustomers_gender = MyBase.Columns("customers_gender")
            Me.columncustomers_firstname = MyBase.Columns("customers_firstname")
            Me.columncustomers_lastname = MyBase.Columns("customers_lastname")
            Me.columncustomers_dob = MyBase.Columns("customers_dob")
            Me.columncustomers_email_address = MyBase.Columns("customers_email_address")
            Me.columncustomers_default_address_id = MyBase.Columns("customers_default_address_id")
            Me.columncustomers_telephone = MyBase.Columns("customers_telephone")
            Me.columncustomers_telephone_evening = MyBase.Columns("customers_telephone_evening")
            Me.columncustomers_fax = MyBase.Columns("customers_fax")
            Me.columncustomers_password = MyBase.Columns("customers_password")
            Me.columncustomers_newsletter = MyBase.Columns("customers_newsletter")
            Me.columncustomers_newsletterpartner = MyBase.Columns("customers_newsletterpartner")
            Me.columncustomers_privilege = MyBase.Columns("customers_privilege")
            Me.columncustomers_privilege_balance = MyBase.Columns("customers_privilege_balance")
            Me.columncustomers_garantie = MyBase.Columns("customers_garantie")
            Me.columnsponsoring_code = MyBase.Columns("sponsoring_code")
            Me.columnsponsored_code = MyBase.Columns("sponsored_code")
            Me.columncustomers_abo = MyBase.Columns("customers_abo")
            Me.columncustomers_abo_suspended = MyBase.Columns("customers_abo_suspended")
            Me.columncustomers_abo_type = MyBase.Columns("customers_abo_type")
            Me.columncustomers_next_abo_type = MyBase.Columns("customers_next_abo_type")
            Me.columnflagminiat1995 = MyBase.Columns("flagminiat1995")
            Me.columncustomers_abo_method = MyBase.Columns("customers_abo_method")
            Me.columncustomers_abo_dvd_norm = MyBase.Columns("customers_abo_dvd_norm")
            Me.columncustomers_abo_dvd_adult = MyBase.Columns("customers_abo_dvd_adult")
            Me.columncustomers_abo_dvd_home_norm = MyBase.Columns("customers_abo_dvd_home_norm")
            Me.columncustomers_abo_dvd_home_adult = MyBase.Columns("customers_abo_dvd_home_adult")
            Me.columnthrottling = MyBase.Columns("throttling")
            Me.columncustomers_abo_validityto = MyBase.Columns("customers_abo_validityto")
            Me.columncustomers_abo_rank = MyBase.Columns("customers_abo_rank")
            Me.columncustomers_abo_start_rentthismonth = MyBase.Columns("customers_abo_start_rentthismonth")
            Me.columncustomers_abo_dvd_credit = MyBase.Columns("customers_abo_dvd_credit")
            Me.columncustomers_abo_multishipment = MyBase.Columns("customers_abo_multishipment")
            Me.columncustomers_abo_discount_recurring_to_date = MyBase.Columns("customers_abo_discount_recurring_to_date")
            Me.columnabotested = MyBase.Columns("abotested")
            Me.columncustomers_abo_status = MyBase.Columns("customers_abo_status")
            Me.columncustomers_abo_payment_method = MyBase.Columns("customers_abo_payment_method")
            Me.columndomiciliation_status = MyBase.Columns("domiciliation_status")
            Me.columndomiciliation_debiter_name = MyBase.Columns("domiciliation_debiter_name")
            Me.columndomiciliation_number = MyBase.Columns("domiciliation_number")
            Me.columndomiciliation_account_number = MyBase.Columns("domiciliation_account_number")
            Me.columnadult_pwd = MyBase.Columns("adult_pwd")
            Me.columnogone_card_type = MyBase.Columns("ogone_card_type")
            Me.columnogone_card_no = MyBase.Columns("ogone_card_no")
            Me.columnogone_exp_date = MyBase.Columns("ogone_exp_date")
            Me.columnogone_owner = MyBase.Columns("ogone_owner")
            Me.columnogone_cc_expiration_status = MyBase.Columns("ogone_cc_expiration_status")
            Me.columnoffline_payment_status = MyBase.Columns("offline_payment_status")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnvip = MyBase.Columns("vip")
            Me.columnblack_listed = MyBase.Columns("black_listed")
            Me.columnred_listed = MyBase.Columns("red_listed")
            Me.columnsm_eligible = MyBase.Columns("sm_eligible")
            Me.columncustomers_enquiry_id = MyBase.Columns("customers_enquiry_id")
            Me.columndate_first_delivery = MyBase.Columns("date_first_delivery")
            Me.columnmail_wl_adult_not_sufficient = MyBase.Columns("mail_wl_adult_not_sufficient")
            Me.columnmail_wl_norm_not_sufficient = MyBase.Columns("mail_wl_norm_not_sufficient")
            Me.columnmgm_points = MyBase.Columns("mgm_points")
            Me.columnwishlist_kind = MyBase.Columns("wishlist_kind")
            Me.columnactivation_discount_code_id = MyBase.Columns("activation_discount_code_id")
            Me.columnactivation_discount_code_type = MyBase.Columns("activation_discount_code_type")
            Me.columncustomers_next_discount_code = MyBase.Columns("customers_next_discount_code")
            Me.columncustomers_registration_step = MyBase.Columns("customers_registration_step")
            Me.columncustomers_abo_auto_stop_next_reconduction = MyBase.Columns("customers_abo_auto_stop_next_reconduction")
            Me.columncustomers_info_date_of_last_logon = MyBase.Columns("customers_info_date_of_last_logon")
            Me.columncustomers_info_number_of_logons = MyBase.Columns("customers_info_number_of_logons")
            Me.columncustomers_info_date_account_created = MyBase.Columns("customers_info_date_account_created")
            Me.columncustomers_info_date_account_last_modified = MyBase.Columns("customers_info_date_account_last_modified")
            Me.columnglobal_product_notifications = MyBase.Columns("global_product_notifications")
            Me.columncustomers_language = MyBase.Columns("customers_language")
            Me.columnsite = MyBase.Columns("site")
            Me.columnpartners_id = MyBase.Columns("partners_id")
            Me.columnbelgiqueloisirs_id = MyBase.Columns("belgiqueloisirs_id")
            Me.columndvdpost_known_by = MyBase.Columns("dvdpost_known_by")
            Me.columnselected_for_email = MyBase.Columns("selected_for_email")
            Me.columnis_email_valid = MyBase.Columns("is_email_valid")
            Me.columnlast_suspension_date = MyBase.Columns("last_suspension_date")
            Me.columncustomers_locked__for_reconduction = MyBase.Columns("customers_locked__for_reconduction")
            Me.columnabo_not_served_reason = MyBase.Columns("abo_not_served_reason")
            Me.columnrating_users = MyBase.Columns("rating_users")
            Me.columnrating_count = MyBase.Columns("rating_count")
            Me.columnmarketing_ok = MyBase.Columns("marketing_ok")
            Me.columnencrypted_password = MyBase.Columns("encrypted_password")
            Me.columnpassword_salt = MyBase.Columns("password_salt")
            Me.columnreset_password_token = MyBase.Columns("reset_password_token")
            Me.columnremember_token = MyBase.Columns("remember_token")
            Me.columnremember_created_at = MyBase.Columns("remember_created_at")
            Me.columnauthentication_token = MyBase.Columns("authentication_token")
            Me.columnverification_code = MyBase.Columns("verification_code")
            Me.columnrefresh_token = MyBase.Columns("refresh_token")
            Me.columnrefresh_token_expires_at = MyBase.Columns("refresh_token_expires_at")
            Me.columnaccess_token_expires_at = MyBase.Columns("access_token_expires_at")
            Me.columnsleep = MyBase.Columns("sleep")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnEntityID = New Global.System.Data.DataColumn("EntityID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntityID)
            Me.columngroup_id = New Global.System.Data.DataColumn("group_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup_id)
            Me.columncustomers_gender = New Global.System.Data.DataColumn("customers_gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_gender)
            Me.columncustomers_firstname = New Global.System.Data.DataColumn("customers_firstname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_firstname)
            Me.columncustomers_lastname = New Global.System.Data.DataColumn("customers_lastname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_lastname)
            Me.columncustomers_dob = New Global.System.Data.DataColumn("customers_dob", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_dob)
            Me.columncustomers_email_address = New Global.System.Data.DataColumn("customers_email_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_email_address)
            Me.columncustomers_default_address_id = New Global.System.Data.DataColumn("customers_default_address_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_default_address_id)
            Me.columncustomers_telephone = New Global.System.Data.DataColumn("customers_telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_telephone)
            Me.columncustomers_telephone_evening = New Global.System.Data.DataColumn("customers_telephone_evening", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_telephone_evening)
            Me.columncustomers_fax = New Global.System.Data.DataColumn("customers_fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_fax)
            Me.columncustomers_password = New Global.System.Data.DataColumn("customers_password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_password)
            Me.columncustomers_newsletter = New Global.System.Data.DataColumn("customers_newsletter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_newsletter)
            Me.columncustomers_newsletterpartner = New Global.System.Data.DataColumn("customers_newsletterpartner", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_newsletterpartner)
            Me.columncustomers_privilege = New Global.System.Data.DataColumn("customers_privilege", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_privilege)
            Me.columncustomers_privilege_balance = New Global.System.Data.DataColumn("customers_privilege_balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_privilege_balance)
            Me.columncustomers_garantie = New Global.System.Data.DataColumn("customers_garantie", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_garantie)
            Me.columnsponsoring_code = New Global.System.Data.DataColumn("sponsoring_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsponsoring_code)
            Me.columnsponsored_code = New Global.System.Data.DataColumn("sponsored_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsponsored_code)
            Me.columncustomers_abo = New Global.System.Data.DataColumn("customers_abo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo)
            Me.columncustomers_abo_suspended = New Global.System.Data.DataColumn("customers_abo_suspended", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_suspended)
            Me.columncustomers_abo_type = New Global.System.Data.DataColumn("customers_abo_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_type)
            Me.columncustomers_next_abo_type = New Global.System.Data.DataColumn("customers_next_abo_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_next_abo_type)
            Me.columnflagminiat1995 = New Global.System.Data.DataColumn("flagminiat1995", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflagminiat1995)
            Me.columncustomers_abo_method = New Global.System.Data.DataColumn("customers_abo_method", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_method)
            Me.columncustomers_abo_dvd_norm = New Global.System.Data.DataColumn("customers_abo_dvd_norm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_norm)
            Me.columncustomers_abo_dvd_adult = New Global.System.Data.DataColumn("customers_abo_dvd_adult", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_adult)
            Me.columncustomers_abo_dvd_home_norm = New Global.System.Data.DataColumn("customers_abo_dvd_home_norm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_home_norm)
            Me.columncustomers_abo_dvd_home_adult = New Global.System.Data.DataColumn("customers_abo_dvd_home_adult", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_home_adult)
            Me.columnthrottling = New Global.System.Data.DataColumn("throttling", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthrottling)
            Me.columncustomers_abo_validityto = New Global.System.Data.DataColumn("customers_abo_validityto", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_validityto)
            Me.columncustomers_abo_rank = New Global.System.Data.DataColumn("customers_abo_rank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_rank)
            Me.columncustomers_abo_start_rentthismonth = New Global.System.Data.DataColumn("customers_abo_start_rentthismonth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_start_rentthismonth)
            Me.columncustomers_abo_dvd_credit = New Global.System.Data.DataColumn("customers_abo_dvd_credit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_dvd_credit)
            Me.columncustomers_abo_multishipment = New Global.System.Data.DataColumn("customers_abo_multishipment", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_multishipment)
            Me.columncustomers_abo_discount_recurring_to_date = New Global.System.Data.DataColumn("customers_abo_discount_recurring_to_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_discount_recurring_to_date)
            Me.columnabotested = New Global.System.Data.DataColumn("abotested", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnabotested)
            Me.columncustomers_abo_status = New Global.System.Data.DataColumn("customers_abo_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_status)
            Me.columncustomers_abo_payment_method = New Global.System.Data.DataColumn("customers_abo_payment_method", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_payment_method)
            Me.columndomiciliation_status = New Global.System.Data.DataColumn("domiciliation_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_status)
            Me.columndomiciliation_debiter_name = New Global.System.Data.DataColumn("domiciliation_debiter_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_debiter_name)
            Me.columndomiciliation_number = New Global.System.Data.DataColumn("domiciliation_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_number)
            Me.columndomiciliation_account_number = New Global.System.Data.DataColumn("domiciliation_account_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndomiciliation_account_number)
            Me.columnadult_pwd = New Global.System.Data.DataColumn("adult_pwd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadult_pwd)
            Me.columnogone_card_type = New Global.System.Data.DataColumn("ogone_card_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnogone_card_type)
            Me.columnogone_card_no = New Global.System.Data.DataColumn("ogone_card_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnogone_card_no)
            Me.columnogone_exp_date = New Global.System.Data.DataColumn("ogone_exp_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnogone_exp_date)
            Me.columnogone_owner = New Global.System.Data.DataColumn("ogone_owner", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnogone_owner)
            Me.columnogone_cc_expiration_status = New Global.System.Data.DataColumn("ogone_cc_expiration_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnogone_cc_expiration_status)
            Me.columnoffline_payment_status = New Global.System.Data.DataColumn("offline_payment_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoffline_payment_status)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnvip = New Global.System.Data.DataColumn("vip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvip)
            Me.columnblack_listed = New Global.System.Data.DataColumn("black_listed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnblack_listed)
            Me.columnred_listed = New Global.System.Data.DataColumn("red_listed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnred_listed)
            Me.columnsm_eligible = New Global.System.Data.DataColumn("sm_eligible", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsm_eligible)
            Me.columncustomers_enquiry_id = New Global.System.Data.DataColumn("customers_enquiry_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_enquiry_id)
            Me.columndate_first_delivery = New Global.System.Data.DataColumn("date_first_delivery", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_first_delivery)
            Me.columnmail_wl_adult_not_sufficient = New Global.System.Data.DataColumn("mail_wl_adult_not_sufficient", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmail_wl_adult_not_sufficient)
            Me.columnmail_wl_norm_not_sufficient = New Global.System.Data.DataColumn("mail_wl_norm_not_sufficient", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmail_wl_norm_not_sufficient)
            Me.columnmgm_points = New Global.System.Data.DataColumn("mgm_points", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmgm_points)
            Me.columnwishlist_kind = New Global.System.Data.DataColumn("wishlist_kind", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwishlist_kind)
            Me.columnactivation_discount_code_id = New Global.System.Data.DataColumn("activation_discount_code_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactivation_discount_code_id)
            Me.columnactivation_discount_code_type = New Global.System.Data.DataColumn("activation_discount_code_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactivation_discount_code_type)
            Me.columncustomers_next_discount_code = New Global.System.Data.DataColumn("customers_next_discount_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_next_discount_code)
            Me.columncustomers_registration_step = New Global.System.Data.DataColumn("customers_registration_step", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_registration_step)
            Me.columncustomers_abo_auto_stop_next_reconduction = New Global.System.Data.DataColumn("customers_abo_auto_stop_next_reconduction", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_auto_stop_next_reconduction)
            Me.columncustomers_info_date_of_last_logon = New Global.System.Data.DataColumn("customers_info_date_of_last_logon", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_info_date_of_last_logon)
            Me.columncustomers_info_number_of_logons = New Global.System.Data.DataColumn("customers_info_number_of_logons", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_info_number_of_logons)
            Me.columncustomers_info_date_account_created = New Global.System.Data.DataColumn("customers_info_date_account_created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_info_date_account_created)
            Me.columncustomers_info_date_account_last_modified = New Global.System.Data.DataColumn("customers_info_date_account_last_modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_info_date_account_last_modified)
            Me.columnglobal_product_notifications = New Global.System.Data.DataColumn("global_product_notifications", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnglobal_product_notifications)
            Me.columncustomers_language = New Global.System.Data.DataColumn("customers_language", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_language)
            Me.columnsite = New Global.System.Data.DataColumn("site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsite)
            Me.columnpartners_id = New Global.System.Data.DataColumn("partners_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartners_id)
            Me.columnbelgiqueloisirs_id = New Global.System.Data.DataColumn("belgiqueloisirs_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbelgiqueloisirs_id)
            Me.columndvdpost_known_by = New Global.System.Data.DataColumn("dvdpost_known_by", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndvdpost_known_by)
            Me.columnselected_for_email = New Global.System.Data.DataColumn("selected_for_email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnselected_for_email)
            Me.columnis_email_valid = New Global.System.Data.DataColumn("is_email_valid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_email_valid)
            Me.columnlast_suspension_date = New Global.System.Data.DataColumn("last_suspension_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_suspension_date)
            Me.columncustomers_locked__for_reconduction = New Global.System.Data.DataColumn("customers_locked__for_reconduction", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_locked__for_reconduction)
            Me.columnabo_not_served_reason = New Global.System.Data.DataColumn("abo_not_served_reason", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnabo_not_served_reason)
            Me.columnrating_users = New Global.System.Data.DataColumn("rating_users", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrating_users)
            Me.columnrating_count = New Global.System.Data.DataColumn("rating_count", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrating_count)
            Me.columnmarketing_ok = New Global.System.Data.DataColumn("marketing_ok", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmarketing_ok)
            Me.columnencrypted_password = New Global.System.Data.DataColumn("encrypted_password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencrypted_password)
            Me.columnpassword_salt = New Global.System.Data.DataColumn("password_salt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassword_salt)
            Me.columnreset_password_token = New Global.System.Data.DataColumn("reset_password_token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreset_password_token)
            Me.columnremember_token = New Global.System.Data.DataColumn("remember_token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremember_token)
            Me.columnremember_created_at = New Global.System.Data.DataColumn("remember_created_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremember_created_at)
            Me.columnauthentication_token = New Global.System.Data.DataColumn("authentication_token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnauthentication_token)
            Me.columnverification_code = New Global.System.Data.DataColumn("verification_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnverification_code)
            Me.columnrefresh_token = New Global.System.Data.DataColumn("refresh_token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefresh_token)
            Me.columnrefresh_token_expires_at = New Global.System.Data.DataColumn("refresh_token_expires_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefresh_token_expires_at)
            Me.columnaccess_token_expires_at = New Global.System.Data.DataColumn("access_token_expires_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccess_token_expires_at)
            Me.columnsleep = New Global.System.Data.DataColumn("sleep", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsleep)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint4", New Global.System.Data.DataColumn() {Me.columncustomers_id}, true))
            Me.columncustomers_id.AutoIncrement = true
            Me.columncustomers_id.AllowDBNull = false
            Me.columncustomers_id.Unique = true
            Me.columnEntityID.AllowDBNull = false
            Me.columngroup_id.AllowDBNull = false
            Me.columncustomers_gender.AllowDBNull = false
            Me.columncustomers_gender.MaxLength = 1
            Me.columncustomers_firstname.AllowDBNull = false
            Me.columncustomers_firstname.MaxLength = 32
            Me.columncustomers_lastname.AllowDBNull = false
            Me.columncustomers_lastname.MaxLength = 32
            Me.columncustomers_email_address.AllowDBNull = false
            Me.columncustomers_email_address.MaxLength = 96
            Me.columncustomers_default_address_id.AllowDBNull = false
            Me.columncustomers_telephone.AllowDBNull = false
            Me.columncustomers_telephone.MaxLength = 32
            Me.columncustomers_telephone_evening.AllowDBNull = false
            Me.columncustomers_telephone_evening.MaxLength = 32
            Me.columncustomers_fax.MaxLength = 32
            Me.columncustomers_password.AllowDBNull = false
            Me.columncustomers_password.MaxLength = 40
            Me.columncustomers_privilege.AllowDBNull = false
            Me.columncustomers_privilege_balance.AllowDBNull = false
            Me.columncustomers_garantie.AllowDBNull = false
            Me.columnsponsoring_code.MaxLength = 10
            Me.columnsponsored_code.MaxLength = 10
            Me.columncustomers_abo.AllowDBNull = false
            Me.columncustomers_abo_suspended.AllowDBNull = false
            Me.columncustomers_abo_type.AllowDBNull = false
            Me.columncustomers_next_abo_type.AllowDBNull = false
            Me.columnflagminiat1995.AllowDBNull = false
            Me.columncustomers_abo_method.AllowDBNull = false
            Me.columncustomers_abo_dvd_norm.AllowDBNull = false
            Me.columncustomers_abo_dvd_adult.AllowDBNull = false
            Me.columncustomers_abo_dvd_home_norm.AllowDBNull = false
            Me.columncustomers_abo_dvd_home_adult.AllowDBNull = false
            Me.columnthrottling.AllowDBNull = false
            Me.columncustomers_abo_rank.AllowDBNull = false
            Me.columncustomers_abo_start_rentthismonth.AllowDBNull = false
            Me.columncustomers_abo_dvd_credit.AllowDBNull = false
            Me.columncustomers_abo_multishipment.AllowDBNull = false
            Me.columnabotested.AllowDBNull = false
            Me.columncustomers_abo_status.AllowDBNull = false
            Me.columncustomers_abo_payment_method.AllowDBNull = false
            Me.columndomiciliation_status.AllowDBNull = false
            Me.columndomiciliation_debiter_name.MaxLength = 255
            Me.columndomiciliation_number.MaxLength = 50
            Me.columndomiciliation_account_number.MaxLength = 50
            Me.columnadult_pwd.MaxLength = 50
            Me.columnogone_card_type.MaxLength = 50
            Me.columnogone_card_no.MaxLength = 50
            Me.columnogone_exp_date.MaxLength = 50
            Me.columnogone_owner.MaxLength = 255
            Me.columnogone_cc_expiration_status.AllowDBNull = false
            Me.columnoffline_payment_status.AllowDBNull = false
            Me.columncomment.MaxLength = 65535
            Me.columnvip.AllowDBNull = false
            Me.columnblack_listed.AllowDBNull = false
            Me.columnred_listed.AllowDBNull = false
            Me.columnsm_eligible.AllowDBNull = false
            Me.columncustomers_enquiry_id.AllowDBNull = false
            Me.columnmgm_points.AllowDBNull = false
            Me.columnwishlist_kind.AllowDBNull = false
            Me.columnactivation_discount_code_id.AllowDBNull = false
            Me.columnactivation_discount_code_type.AllowDBNull = false
            Me.columnactivation_discount_code_type.MaxLength = 2
            Me.columncustomers_next_discount_code.AllowDBNull = false
            Me.columncustomers_registration_step.AllowDBNull = false
            Me.columncustomers_abo_auto_stop_next_reconduction.AllowDBNull = false
            Me.columncustomers_language.AllowDBNull = false
            Me.columnsite.AllowDBNull = false
            Me.columnsite.MaxLength = 25
            Me.columnpartners_id.AllowDBNull = false
            Me.columnbelgiqueloisirs_id.AllowDBNull = false
            Me.columnbelgiqueloisirs_id.MaxLength = 255
            Me.columndvdpost_known_by.AllowDBNull = false
            Me.columnselected_for_email.MaxLength = 80
            Me.columncustomers_locked__for_reconduction.AllowDBNull = false
            Me.columnrating_users.AllowDBNull = false
            Me.columnrating_count.AllowDBNull = false
            Me.columnmarketing_ok.AllowDBNull = false
            Me.columnmarketing_ok.MaxLength = 6
            Me.columnencrypted_password.AllowDBNull = false
            Me.columnencrypted_password.MaxLength = 128
            Me.columnpassword_salt.AllowDBNull = false
            Me.columnpassword_salt.MaxLength = 255
            Me.columnreset_password_token.MaxLength = 255
            Me.columnremember_token.MaxLength = 255
            Me.columnauthentication_token.MaxLength = 255
            Me.columnverification_code.MaxLength = 255
            Me.columnrefresh_token.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcustomersRow() As customersRow
            Return CType(Me.NewRow,customersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customersRowChangedEvent) Is Nothing) Then
                RaiseEvent customersRowChanged(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customersRowChangingEvent) Is Nothing) Then
                RaiseEvent customersRowChanging(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customersRowDeletedEvent) Is Nothing) Then
                RaiseEvent customersRowDeleted(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customersRowDeletingEvent) Is Nothing) Then
                RaiseEvent customersRowDeleting(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecustomersRow(ByVal row As customersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customer_attributesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columncustomer_id As Global.System.Data.DataColumn
        
        Private columnlist_indicator_close As Global.System.Data.DataColumn
        
        Private columnnumber_of_logins As Global.System.Data.DataColumn
        
        Private columnlast_login_at As Global.System.Data.DataColumn
        
        Private columncreated_at As Global.System.Data.DataColumn
        
        Private columnupdated_at As Global.System.Data.DataColumn
        
        Private columnvod_only As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customer_attributes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customer_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomer_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property list_indicator_closeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlist_indicator_close
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property number_of_loginsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumber_of_logins
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property last_login_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_login_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property created_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property updated_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdated_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vod_onlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvod_only
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customer_attributesRow
            Get
                Return CType(Me.Rows(index),customer_attributesRow)
            End Get
        End Property
        
        Public Event customer_attributesRowChanging As customer_attributesRowChangeEventHandler
        
        Public Event customer_attributesRowChanged As customer_attributesRowChangeEventHandler
        
        Public Event customer_attributesRowDeleting As customer_attributesRowChangeEventHandler
        
        Public Event customer_attributesRowDeleted As customer_attributesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomer_attributesRow(ByVal row As customer_attributesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomer_attributesRow(ByVal customer_id As Integer, ByVal list_indicator_close As Boolean, ByVal number_of_logins As Integer, ByVal last_login_at As Date, ByVal created_at As Date, ByVal updated_at As Date, ByVal vod_only As Boolean) As customer_attributesRow
            Dim rowcustomer_attributesRow As customer_attributesRow = CType(Me.NewRow,customer_attributesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, customer_id, list_indicator_close, number_of_logins, last_login_at, created_at, updated_at, vod_only}
            rowcustomer_attributesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomer_attributesRow)
            Return rowcustomer_attributesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid(ByVal id As Integer) As customer_attributesRow
            Return CType(Me.Rows.Find(New Object() {id}),customer_attributesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customer_attributesDataTable = CType(MyBase.Clone,customer_attributesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customer_attributesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columncustomer_id = MyBase.Columns("customer_id")
            Me.columnlist_indicator_close = MyBase.Columns("list_indicator_close")
            Me.columnnumber_of_logins = MyBase.Columns("number_of_logins")
            Me.columnlast_login_at = MyBase.Columns("last_login_at")
            Me.columncreated_at = MyBase.Columns("created_at")
            Me.columnupdated_at = MyBase.Columns("updated_at")
            Me.columnvod_only = MyBase.Columns("vod_only")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columncustomer_id = New Global.System.Data.DataColumn("customer_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomer_id)
            Me.columnlist_indicator_close = New Global.System.Data.DataColumn("list_indicator_close", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlist_indicator_close)
            Me.columnnumber_of_logins = New Global.System.Data.DataColumn("number_of_logins", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumber_of_logins)
            Me.columnlast_login_at = New Global.System.Data.DataColumn("last_login_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_login_at)
            Me.columncreated_at = New Global.System.Data.DataColumn("created_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated_at)
            Me.columnupdated_at = New Global.System.Data.DataColumn("updated_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdated_at)
            Me.columnvod_only = New Global.System.Data.DataColumn("vod_only", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvod_only)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomer_attributesRow() As customer_attributesRow
            Return CType(Me.NewRow,customer_attributesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customer_attributesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customer_attributesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customer_attributesRowChangedEvent) Is Nothing) Then
                RaiseEvent customer_attributesRowChanged(Me, New customer_attributesRowChangeEvent(CType(e.Row,customer_attributesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customer_attributesRowChangingEvent) Is Nothing) Then
                RaiseEvent customer_attributesRowChanging(Me, New customer_attributesRowChangeEvent(CType(e.Row,customer_attributesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customer_attributesRowDeletedEvent) Is Nothing) Then
                RaiseEvent customer_attributesRowDeleted(Me, New customer_attributesRowChangeEvent(CType(e.Row,customer_attributesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customer_attributesRowDeletingEvent) Is Nothing) Then
                RaiseEvent customer_attributesRowDeleting(Me, New customer_attributesRowChangeEvent(CType(e.Row,customer_attributesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomer_attributesRow(ByVal row As customer_attributesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customer_attributesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class address_book_allDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        Private columnaddress_book_id As Global.System.Data.DataColumn
        
        Private columnentry_gender As Global.System.Data.DataColumn
        
        Private columnentry_company As Global.System.Data.DataColumn
        
        Private columnentry_firstname As Global.System.Data.DataColumn
        
        Private columnentry_lastname As Global.System.Data.DataColumn
        
        Private columnentry_street_address As Global.System.Data.DataColumn
        
        Private columnentry_suburb As Global.System.Data.DataColumn
        
        Private columnentry_postcode As Global.System.Data.DataColumn
        
        Private columnentry_city As Global.System.Data.DataColumn
        
        Private columnentry_state As Global.System.Data.DataColumn
        
        Private columnentry_country_id As Global.System.Data.DataColumn
        
        Private columnentry_zone_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "address_book_all"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address_book_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress_book_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_genderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_gender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_companyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_firstnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_firstname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_lastnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_lastname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_street_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_street_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_suburbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_suburb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_postcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_postcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_city
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_stateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_state
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_country_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_country_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entry_zone_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentry_zone_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As address_book_allRow
            Get
                Return CType(Me.Rows(index),address_book_allRow)
            End Get
        End Property
        
        Public Event address_book_allRowChanging As address_book_allRowChangeEventHandler
        
        Public Event address_book_allRowChanged As address_book_allRowChangeEventHandler
        
        Public Event address_book_allRowDeleting As address_book_allRowChangeEventHandler
        
        Public Event address_book_allRowDeleted As address_book_allRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addaddress_book_allRow(ByVal row As address_book_allRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addaddress_book_allRow(ByVal customers_id As Integer, ByVal address_book_id As Integer, ByVal entry_gender As String, ByVal entry_company As String, ByVal entry_firstname As String, ByVal entry_lastname As String, ByVal entry_street_address As String, ByVal entry_suburb As String, ByVal entry_postcode As String, ByVal entry_city As String, ByVal entry_state As String, ByVal entry_country_id As Integer, ByVal entry_zone_id As Integer) As address_book_allRow
            Dim rowaddress_book_allRow As address_book_allRow = CType(Me.NewRow,address_book_allRow)
            Dim columnValuesArray() As Object = New Object() {customers_id, address_book_id, entry_gender, entry_company, entry_firstname, entry_lastname, entry_street_address, entry_suburb, entry_postcode, entry_city, entry_state, entry_country_id, entry_zone_id}
            rowaddress_book_allRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaddress_book_allRow)
            Return rowaddress_book_allRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As address_book_allDataTable = CType(MyBase.Clone,address_book_allDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New address_book_allDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_id = MyBase.Columns("customers_id")
            Me.columnaddress_book_id = MyBase.Columns("address_book_id")
            Me.columnentry_gender = MyBase.Columns("entry_gender")
            Me.columnentry_company = MyBase.Columns("entry_company")
            Me.columnentry_firstname = MyBase.Columns("entry_firstname")
            Me.columnentry_lastname = MyBase.Columns("entry_lastname")
            Me.columnentry_street_address = MyBase.Columns("entry_street_address")
            Me.columnentry_suburb = MyBase.Columns("entry_suburb")
            Me.columnentry_postcode = MyBase.Columns("entry_postcode")
            Me.columnentry_city = MyBase.Columns("entry_city")
            Me.columnentry_state = MyBase.Columns("entry_state")
            Me.columnentry_country_id = MyBase.Columns("entry_country_id")
            Me.columnentry_zone_id = MyBase.Columns("entry_zone_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.columnaddress_book_id = New Global.System.Data.DataColumn("address_book_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress_book_id)
            Me.columnentry_gender = New Global.System.Data.DataColumn("entry_gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_gender)
            Me.columnentry_company = New Global.System.Data.DataColumn("entry_company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_company)
            Me.columnentry_firstname = New Global.System.Data.DataColumn("entry_firstname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_firstname)
            Me.columnentry_lastname = New Global.System.Data.DataColumn("entry_lastname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_lastname)
            Me.columnentry_street_address = New Global.System.Data.DataColumn("entry_street_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_street_address)
            Me.columnentry_suburb = New Global.System.Data.DataColumn("entry_suburb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_suburb)
            Me.columnentry_postcode = New Global.System.Data.DataColumn("entry_postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_postcode)
            Me.columnentry_city = New Global.System.Data.DataColumn("entry_city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_city)
            Me.columnentry_state = New Global.System.Data.DataColumn("entry_state", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_state)
            Me.columnentry_country_id = New Global.System.Data.DataColumn("entry_country_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_country_id)
            Me.columnentry_zone_id = New Global.System.Data.DataColumn("entry_zone_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentry_zone_id)
            Me.columncustomers_id.AllowDBNull = false
            Me.columnaddress_book_id.AllowDBNull = false
            Me.columnentry_gender.AllowDBNull = false
            Me.columnentry_firstname.AllowDBNull = false
            Me.columnentry_lastname.AllowDBNull = false
            Me.columnentry_street_address.AllowDBNull = false
            Me.columnentry_postcode.AllowDBNull = false
            Me.columnentry_city.AllowDBNull = false
            Me.columnentry_country_id.AllowDBNull = false
            Me.columnentry_zone_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newaddress_book_allRow() As address_book_allRow
            Return CType(Me.NewRow,address_book_allRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New address_book_allRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(address_book_allRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.address_book_allRowChangedEvent) Is Nothing) Then
                RaiseEvent address_book_allRowChanged(Me, New address_book_allRowChangeEvent(CType(e.Row,address_book_allRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.address_book_allRowChangingEvent) Is Nothing) Then
                RaiseEvent address_book_allRowChanging(Me, New address_book_allRowChangeEvent(CType(e.Row,address_book_allRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.address_book_allRowDeletedEvent) Is Nothing) Then
                RaiseEvent address_book_allRowDeleted(Me, New address_book_allRowChangeEvent(CType(e.Row,address_book_allRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.address_book_allRowDeletingEvent) Is Nothing) Then
                RaiseEvent address_book_allRowDeleting(Me, New address_book_allRowChangeEvent(CType(e.Row,address_book_allRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeaddress_book_allRow(ByVal row As address_book_allRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "address_book_allDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class customers_abo_payment_methodDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomers_abo_payment_method_id As Global.System.Data.DataColumn
        
        Private columncustomers_abo_payment_method_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "customers_abo_payment_method"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_payment_method_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_payment_method_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_abo_payment_method_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_abo_payment_method_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As customers_abo_payment_methodRow
            Get
                Return CType(Me.Rows(index),customers_abo_payment_methodRow)
            End Get
        End Property
        
        Public Event customers_abo_payment_methodRowChanging As customers_abo_payment_methodRowChangeEventHandler
        
        Public Event customers_abo_payment_methodRowChanged As customers_abo_payment_methodRowChangeEventHandler
        
        Public Event customers_abo_payment_methodRowDeleting As customers_abo_payment_methodRowChangeEventHandler
        
        Public Event customers_abo_payment_methodRowDeleted As customers_abo_payment_methodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcustomers_abo_payment_methodRow(ByVal row As customers_abo_payment_methodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcustomers_abo_payment_methodRow(ByVal customers_abo_payment_method_id As Integer, ByVal customers_abo_payment_method_name As String) As customers_abo_payment_methodRow
            Dim rowcustomers_abo_payment_methodRow As customers_abo_payment_methodRow = CType(Me.NewRow,customers_abo_payment_methodRow)
            Dim columnValuesArray() As Object = New Object() {customers_abo_payment_method_id, customers_abo_payment_method_name}
            rowcustomers_abo_payment_methodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustomers_abo_payment_methodRow)
            Return rowcustomers_abo_payment_methodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomers_abo_payment_method_id(ByVal customers_abo_payment_method_id As Integer) As customers_abo_payment_methodRow
            Return CType(Me.Rows.Find(New Object() {customers_abo_payment_method_id}),customers_abo_payment_methodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As customers_abo_payment_methodDataTable = CType(MyBase.Clone,customers_abo_payment_methodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New customers_abo_payment_methodDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomers_abo_payment_method_id = MyBase.Columns("customers_abo_payment_method_id")
            Me.columncustomers_abo_payment_method_name = MyBase.Columns("customers_abo_payment_method_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomers_abo_payment_method_id = New Global.System.Data.DataColumn("customers_abo_payment_method_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_payment_method_id)
            Me.columncustomers_abo_payment_method_name = New Global.System.Data.DataColumn("customers_abo_payment_method_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_abo_payment_method_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustomers_abo_payment_method_id}, true))
            Me.columncustomers_abo_payment_method_id.AllowDBNull = false
            Me.columncustomers_abo_payment_method_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcustomers_abo_payment_methodRow() As customers_abo_payment_methodRow
            Return CType(Me.NewRow,customers_abo_payment_methodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New customers_abo_payment_methodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(customers_abo_payment_methodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customers_abo_payment_methodRowChangedEvent) Is Nothing) Then
                RaiseEvent customers_abo_payment_methodRowChanged(Me, New customers_abo_payment_methodRowChangeEvent(CType(e.Row,customers_abo_payment_methodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customers_abo_payment_methodRowChangingEvent) Is Nothing) Then
                RaiseEvent customers_abo_payment_methodRowChanging(Me, New customers_abo_payment_methodRowChangeEvent(CType(e.Row,customers_abo_payment_methodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customers_abo_payment_methodRowDeletedEvent) Is Nothing) Then
                RaiseEvent customers_abo_payment_methodRowDeleted(Me, New customers_abo_payment_methodRowChangeEvent(CType(e.Row,customers_abo_payment_methodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customers_abo_payment_methodRowDeletingEvent) Is Nothing) Then
                RaiseEvent customers_abo_payment_methodRowDeleting(Me, New customers_abo_payment_methodRowChangeEvent(CType(e.Row,customers_abo_payment_methodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecustomers_abo_payment_methodRow(ByVal row As customers_abo_payment_methodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCustomerMaint = New dsCustomerMaint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "customers_abo_payment_methodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers_search_resultRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers_search_result As customers_search_resultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers_search_result = CType(Me.Table,customers_search_resultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'customers_search_result' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_firstname() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_firstnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_firstname' in table 'customers_search_result' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_firstnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_lastname() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_lastnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_lastname' in table 'customers_search_result' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_lastnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_email_address() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_email_addressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_email_address' in table 'customers_search_result'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_email_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_aboColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo' in table 'customers_search_result' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_aboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property black_listed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.black_listedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'black_listed' in table 'customers_search_result' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.black_listedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_street_address() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.entry_street_addressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_street_address' in table 'customers_search_result' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.entry_street_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_postcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.entry_postcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_postcode' in table 'customers_search_result' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.entry_postcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_number() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.domiciliation_numberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'domiciliation_number' in table 'customers_search_result' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.domiciliation_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_language() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.customers_languageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_language' in table 'customers_search_result' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.customers_languageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property call_phone() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_search_result.call_phoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'call_phone' in table 'customers_search_result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_search_result.call_phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tablecustomers_search_result.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_firstnameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_firstnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_firstnameNull()
            Me(Me.tablecustomers_search_result.customers_firstnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_lastnameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_lastnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_lastnameNull()
            Me(Me.tablecustomers_search_result.customers_lastnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_email_addressNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_email_addressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_email_addressNull()
            Me(Me.tablecustomers_search_result.customers_email_addressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_aboNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_aboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_aboNull()
            Me(Me.tablecustomers_search_result.customers_aboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isblack_listedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.black_listedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setblack_listedNull()
            Me(Me.tablecustomers_search_result.black_listedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_street_addressNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.entry_street_addressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_street_addressNull()
            Me(Me.tablecustomers_search_result.entry_street_addressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_postcodeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.entry_postcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_postcodeNull()
            Me(Me.tablecustomers_search_result.entry_postcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdomiciliation_numberNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.domiciliation_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdomiciliation_numberNull()
            Me(Me.tablecustomers_search_result.domiciliation_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_languageNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.customers_languageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_languageNull()
            Me(Me.tablecustomers_search_result.customers_languageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscall_phoneNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_search_result.call_phoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcall_phoneNull()
            Me(Me.tablecustomers_search_result.call_phoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class address_book_defaultRow
        Inherits Global.System.Data.DataRow
        
        Private tableaddress_book_default As address_book_defaultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaddress_book_default = CType(Me.Table,address_book_defaultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_default.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_default.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address_book_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_default.address_book_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_default.address_book_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_gender() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_genderColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_genderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_company() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_default.entry_companyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_company' in table 'address_book_default' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_companyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_firstname() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_firstnameColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_firstnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_lastname() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_lastnameColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_lastnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_street_address() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_street_addressColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_street_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_suburb() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_default.entry_suburbColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_suburb' in table 'address_book_default' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_suburbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_postcode() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_postcodeColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_postcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_city() As String
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_cityColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_cityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_state() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_default.entry_stateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_state' in table 'address_book_default' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_stateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_country_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_country_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_country_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_zone_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_default.entry_zone_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_default.entry_zone_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_added() As Date
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_default.date_addedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_added' in table 'address_book_default' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_default.date_addedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_companyNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_default.entry_companyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_companyNull()
            Me(Me.tableaddress_book_default.entry_companyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_suburbNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_default.entry_suburbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_suburbNull()
            Me(Me.tableaddress_book_default.entry_suburbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_stateNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_default.entry_stateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_stateNull()
            Me(Me.tableaddress_book_default.entry_stateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_addedNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_default.date_addedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_addedNull()
            Me(Me.tableaddress_book_default.date_addedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class countryRow
        Inherits Global.System.Data.DataRow
        
        Private tablecountry As countryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecountry = CType(Me.Table,countryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_id() As Integer
            Get
                Return CType(Me(Me.tablecountry.countries_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecountry.countries_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_name() As String
            Get
                Return CType(Me(Me.tablecountry.countries_nameColumn),String)
            End Get
            Set
                Me(Me.tablecountry.countries_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_iso_code_2() As String
            Get
                Return CType(Me(Me.tablecountry.countries_iso_code_2Column),String)
            End Get
            Set
                Me(Me.tablecountry.countries_iso_code_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_iso_code_3() As String
            Get
                Return CType(Me(Me.tablecountry.countries_iso_code_3Column),String)
            End Get
            Set
                Me(Me.tablecountry.countries_iso_code_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address_format_id() As Integer
            Get
                Return CType(Me(Me.tablecountry.address_format_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecountry.address_format_idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_aboRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_abo As products_aboDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_abo = CType(Me.Table,products_aboDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_abo.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_abo.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_abo.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products_abo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_abo.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Return CType(Me(Me.tableproducts_abo.products_titleColumn),String)
            End Get
            Set
                Me(Me.tableproducts_abo.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts_abo.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts_abo.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class aboRow
        Inherits Global.System.Data.DataRow
        
        Private tableabo As aboDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableabo = CType(Me.Table,aboDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property abo_id() As Integer
            Get
                Return CType(Me(Me.tableabo.abo_idColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.abo_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customerid() As Integer
            Get
                Return CType(Me(Me.tableabo.customeridColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.customeridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Action() As Integer
            Get
                Return CType(Me(Me.tableabo.ActionColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableabo.code_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'code_id' in table 'abo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableabo.code_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableabo.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'abo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableabo.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property product_id() As Integer
            Get
                Return CType(Me(Me.tableabo.product_idColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.product_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payment_method() As String
            Get
                Return CType(Me(Me.tableabo.payment_methodColumn),String)
            End Get
            Set
                Me(Me.tableabo.payment_methodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property privilege_notified() As Integer
            Get
                Return CType(Me(Me.tableabo.privilege_notifiedColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.privilege_notifiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableabo.commentColumn),String)
            End Get
            Set
                Me(Me.tableabo.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property site() As Integer
            Get
                Return CType(Me(Me.tableabo.siteColumn),Integer)
            End Get
            Set
                Me(Me.tableabo.siteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscode_idNull() As Boolean
            Return Me.IsNull(Me.tableabo.code_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcode_idNull()
            Me(Me.tableabo.code_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableabo.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tableabo.DateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class discount_codeRow
        Inherits Global.System.Data.DataRow
        
        Private tablediscount_code As discount_codeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablediscount_code = CType(Me.Table,discount_codeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_code_id() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_code_idColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_code_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_code() As String
            Get
                Return CType(Me(Me.tablediscount_code.discount_codeColumn),String)
            End Get
            Set
                Me(Me.tablediscount_code.discount_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_type() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_typeColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_value() As Decimal
            Get
                Return CType(Me(Me.tablediscount_code.discount_valueColumn),Decimal)
            End Get
            Set
                Me(Me.tablediscount_code.discount_valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_limit() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_limitColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_limitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_commitment() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_commitmentColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_commitmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_status() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_statusColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_text_fr() As String
            Get
                Return CType(Me(Me.tablediscount_code.discount_text_frColumn),String)
            End Get
            Set
                Me(Me.tablediscount_code.discount_text_frColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_text_nl() As String
            Get
                Return CType(Me(Me.tablediscount_code.discount_text_nlColumn),String)
            End Get
            Set
                Me(Me.tablediscount_code.discount_text_nlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_text_en() As String
            Get
                Return CType(Me(Me.tablediscount_code.discount_text_enColumn),String)
            End Get
            Set
                Me(Me.tablediscount_code.discount_text_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_abo_validityto_type() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_abo_validityto_typeColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_abo_validityto_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_abo_validityto_value() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_abo_validityto_valueColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_abo_validityto_valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablediscount_code.commentColumn),String)
            End Get
            Set
                Me(Me.tablediscount_code.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_nbr_month_before_reuse() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_nbr_month_before_reuseColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_nbr_month_before_reuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_recurring_nbr_of_month() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.discount_recurring_nbr_of_monthColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.discount_recurring_nbr_of_monthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bypass_discountuse() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.bypass_discountuseColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.bypass_discountuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property discount_validityto() As Date
            Get
                Try 
                    Return CType(Me(Me.tablediscount_code.discount_validitytoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'discount_validityto' in table 'discount_code' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablediscount_code.discount_validitytoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payable() As Integer
            Get
                Return CType(Me(Me.tablediscount_code.payableColumn),Integer)
            End Get
            Set
                Me(Me.tablediscount_code.payableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdiscount_validitytoNull() As Boolean
            Return Me.IsNull(Me.tablediscount_code.discount_validitytoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdiscount_validitytoNull()
            Me(Me.tablediscount_code.discount_validitytoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class languagesRow
        Inherits Global.System.Data.DataRow
        
        Private tablelanguages As languagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelanguages = CType(Me.Table,languagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.languages_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'languages_id' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.languages_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'code' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguages_idNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.languages_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguages_idNull()
            Me(Me.tablelanguages.languages_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablelanguages.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeNull()
            Me(Me.tablelanguages.codeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class generalentityRow
        Inherits Global.System.Data.DataRow
        
        Private tablegeneralentity As generalentityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegeneralentity = CType(Me.Table,generalentityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntityID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegeneralentity.EntityIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntityID' in table 'generalentity' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeneralentity.EntityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeneralentity.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'generalentity' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeneralentity.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeneralentity.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'generalentity' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeneralentity.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeneralentity.CurrCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrCode' in table 'generalentity' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeneralentity.CurrCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntityIDNull() As Boolean
            Return Me.IsNull(Me.tablegeneralentity.EntityIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntityIDNull()
            Me(Me.tablegeneralentity.EntityIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablegeneralentity.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablegeneralentity.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablegeneralentity.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablegeneralentity.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrCodeNull() As Boolean
            Return Me.IsNull(Me.tablegeneralentity.CurrCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrCodeNull()
            Me(Me.tablegeneralentity.CurrCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class custservRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustserv As custservDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustserv = CType(Me.Table,custservDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custserv_id() As Integer
            Get
                Return CType(Me(Me.tablecustserv.custserv_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustserv.custserv_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custserv_cat_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.custserv_cat_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custserv_cat_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.custserv_cat_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customer_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.customer_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customer_date' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.customer_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property orders_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.orders_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'orders_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.orders_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.dvd_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_id' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.dvd_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subject() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.subjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subject' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.subjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property message() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.messageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'message' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.messageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admindate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.admindateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'admindate' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.admindateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adminby() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.adminbyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'adminby' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.adminbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adminmessage() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.adminmessageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'adminmessage' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.adminmessageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property messagesent() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.messagesentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'messagesent' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.messagesentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvd_finally_arrived_mail() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustserv.dvd_finally_arrived_mailColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dvd_finally_arrived_mail' in table 'custserv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustserv.dvd_finally_arrived_mailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tablecustserv.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tablecustserv.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustserv_cat_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.custserv_cat_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustserv_cat_idNull()
            Me(Me.tablecustserv.custserv_cat_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomer_dateNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.customer_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomer_dateNull()
            Me(Me.tablecustserv.customer_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isorders_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.orders_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setorders_idNull()
            Me(Me.tablecustserv.orders_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tablecustserv.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_idNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.dvd_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_idNull()
            Me(Me.tablecustserv.dvd_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.subjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectNull()
            Me(Me.tablecustserv.subjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmessageNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.messageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmessageNull()
            Me(Me.tablecustserv.messageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadmindateNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.admindateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadmindateNull()
            Me(Me.tablecustserv.admindateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadminbyNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.adminbyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadminbyNull()
            Me(Me.tablecustserv.adminbyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadminmessageNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.adminmessageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadminmessageNull()
            Me(Me.tablecustserv.adminmessageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmessagesentNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.messagesentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmessagesentNull()
            Me(Me.tablecustserv.messagesentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdvd_finally_arrived_mailNull() As Boolean
            Return Me.IsNull(Me.tablecustserv.dvd_finally_arrived_mailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdvd_finally_arrived_mailNull()
            Me(Me.tablecustserv.dvd_finally_arrived_mailColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class domiciliation_statusRow
        Inherits Global.System.Data.DataRow
        
        Private tabledomiciliation_status As domiciliation_statusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledomiciliation_status = CType(Me.Table,domiciliation_statusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_status_id() As Integer
            Get
                Return CType(Me(Me.tabledomiciliation_status.domiciliation_status_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledomiciliation_status.domiciliation_status_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Return CType(Me(Me.tabledomiciliation_status.language_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledomiciliation_status.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_status_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledomiciliation_status.domiciliation_status_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'domiciliation_status_name' in table 'domiciliation_status' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledomiciliation_status.domiciliation_status_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdomiciliation_status_nameNull() As Boolean
            Return Me.IsNull(Me.tabledomiciliation_status.domiciliation_status_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdomiciliation_status_nameNull()
            Me(Me.tabledomiciliation_status.domiciliation_status_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class cc_expiration_statusRow
        Inherits Global.System.Data.DataRow
        
        Private tablecc_expiration_status As cc_expiration_statusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecc_expiration_status = CType(Me.Table,cc_expiration_statusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cc_expiration_status_id() As Integer
            Get
                Return CType(Me(Me.tablecc_expiration_status.cc_expiration_status_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecc_expiration_status.cc_expiration_status_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Return CType(Me(Me.tablecc_expiration_status.language_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecc_expiration_status.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cc_expiration_status_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecc_expiration_status.cc_expiration_status_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cc_expiration_status_name' in table 'cc_expiration_status' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecc_expiration_status.cc_expiration_status_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscc_expiration_status_nameNull() As Boolean
            Return Me.IsNull(Me.tablecc_expiration_status.cc_expiration_status_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcc_expiration_status_nameNull()
            Me(Me.tablecc_expiration_status.cc_expiration_status_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customersRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers As customersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers = CType(Me.Table,customersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntityID() As Integer
            Get
                Return CType(Me(Me.tablecustomers.EntityIDColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.EntityIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.group_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.group_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_gender() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_genderColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_genderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_firstname() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_firstnameColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_firstnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_lastname() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_lastnameColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_lastnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_dob() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_dobColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_dob' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_dobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_email_address() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_email_addressColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_email_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_default_address_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_default_address_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_default_address_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_telephone() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_telephoneColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_telephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_telephone_evening() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_telephone_eveningColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_telephone_eveningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_fax() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_faxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_fax' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_password() As String
            Get
                Return CType(Me(Me.tablecustomers.customers_passwordColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.customers_passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_newsletter() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_newsletterColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_newsletter' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_newsletterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_newsletterpartner() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_newsletterpartnerColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_newsletterpartner' in table 'customers' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_newsletterpartnerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_privilege() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_privilegeColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_privilegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_privilege_balance() As Decimal
            Get
                Return CType(Me(Me.tablecustomers.customers_privilege_balanceColumn),Decimal)
            End Get
            Set
                Me(Me.tablecustomers.customers_privilege_balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_garantie() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_garantieColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_garantieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sponsoring_code() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.sponsoring_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sponsoring_code' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.sponsoring_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sponsored_code() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.sponsored_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sponsored_code' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.sponsored_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_aboColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_aboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_suspended() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_suspendedColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_suspendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_type() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_typeColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_next_abo_type() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_next_abo_typeColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_next_abo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property flagminiat1995() As Integer
            Get
                Return CType(Me(Me.tablecustomers.flagminiat1995Column),Integer)
            End Get
            Set
                Me(Me.tablecustomers.flagminiat1995Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_method() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_methodColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_methodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_norm() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_dvd_normColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_normColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_adult() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_dvd_adultColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_adultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_home_norm() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_dvd_home_normColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_home_normColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_home_adult() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_dvd_home_adultColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_home_adultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property throttling() As Integer
            Get
                Return CType(Me(Me.tablecustomers.throttlingColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.throttlingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_validityto() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_validitytoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_validityto' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_validitytoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_rank() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_rankColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_rankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_start_rentthismonth() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_start_rentthismonthColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_start_rentthismonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_dvd_credit() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_dvd_creditColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_dvd_creditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_multishipment() As Boolean
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_multishipmentColumn),Boolean)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_multishipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_discount_recurring_to_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_abo_discount_recurring_to_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_discount_recurring_to_date' in table 'custome"& _ 
                            "rs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_discount_recurring_to_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property abotested() As Integer
            Get
                Return CType(Me(Me.tablecustomers.abotestedColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.abotestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_status() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_statusColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_payment_method() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_payment_methodColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_payment_methodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_status() As Integer
            Get
                Return CType(Me(Me.tablecustomers.domiciliation_statusColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.domiciliation_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_debiter_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.domiciliation_debiter_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'domiciliation_debiter_name' in table 'customers' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.domiciliation_debiter_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_number() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.domiciliation_numberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'domiciliation_number' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.domiciliation_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property domiciliation_account_number() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.domiciliation_account_numberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'domiciliation_account_number' in table 'customers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.domiciliation_account_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adult_pwd() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.adult_pwdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'adult_pwd' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.adult_pwdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ogone_card_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ogone_card_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ogone_card_type' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ogone_card_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ogone_card_no() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ogone_card_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ogone_card_no' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ogone_card_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ogone_exp_date() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ogone_exp_dateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ogone_exp_date' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ogone_exp_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ogone_owner() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ogone_ownerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ogone_owner' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ogone_ownerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ogone_cc_expiration_status() As Integer
            Get
                Return CType(Me(Me.tablecustomers.ogone_cc_expiration_statusColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.ogone_cc_expiration_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property offline_payment_status() As Integer
            Get
                Return CType(Me(Me.tablecustomers.offline_payment_statusColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.offline_payment_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comment() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.commentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'comment' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vip() As Integer
            Get
                Return CType(Me(Me.tablecustomers.vipColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.vipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property black_listed() As Boolean
            Get
                Return CType(Me(Me.tablecustomers.black_listedColumn),Boolean)
            End Get
            Set
                Me(Me.tablecustomers.black_listedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property red_listed() As Boolean
            Get
                Return CType(Me(Me.tablecustomers.red_listedColumn),Boolean)
            End Get
            Set
                Me(Me.tablecustomers.red_listedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sm_eligible() As Integer
            Get
                Return CType(Me(Me.tablecustomers.sm_eligibleColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.sm_eligibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_enquiry_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_enquiry_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_enquiry_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_first_delivery() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.date_first_deliveryColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_first_delivery' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.date_first_deliveryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mail_wl_adult_not_sufficient() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.mail_wl_adult_not_sufficientColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mail_wl_adult_not_sufficient' in table 'customers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.mail_wl_adult_not_sufficientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mail_wl_norm_not_sufficient() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.mail_wl_norm_not_sufficientColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mail_wl_norm_not_sufficient' in table 'customers' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.mail_wl_norm_not_sufficientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mgm_points() As Integer
            Get
                Return CType(Me(Me.tablecustomers.mgm_pointsColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.mgm_pointsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wishlist_kind() As Integer
            Get
                Return CType(Me(Me.tablecustomers.wishlist_kindColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.wishlist_kindColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property activation_discount_code_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.activation_discount_code_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.activation_discount_code_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property activation_discount_code_type() As String
            Get
                Return CType(Me(Me.tablecustomers.activation_discount_code_typeColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.activation_discount_code_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_next_discount_code() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_next_discount_codeColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_next_discount_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_registration_step() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_registration_stepColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_registration_stepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_auto_stop_next_reconduction() As Boolean
            Get
                Return CType(Me(Me.tablecustomers.customers_abo_auto_stop_next_reconductionColumn),Boolean)
            End Get
            Set
                Me(Me.tablecustomers.customers_abo_auto_stop_next_reconductionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_info_date_of_last_logon() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_info_date_of_last_logonColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_info_date_of_last_logon' in table 'customers' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_info_date_of_last_logonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_info_number_of_logons() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_info_number_of_logonsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_info_number_of_logons' in table 'customers' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_info_number_of_logonsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_info_date_account_created() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_info_date_account_createdColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_info_date_account_created' in table 'customers' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_info_date_account_createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_info_date_account_last_modified() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.customers_info_date_account_last_modifiedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_info_date_account_last_modified' in table 'custom"& _ 
                            "ers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.customers_info_date_account_last_modifiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property global_product_notifications() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.global_product_notificationsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'global_product_notifications' in table 'customers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.global_product_notificationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_language() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_languageColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_languageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property site() As String
            Get
                Return CType(Me(Me.tablecustomers.siteColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.siteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property partners_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers.partners_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.partners_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property belgiqueloisirs_id() As String
            Get
                Return CType(Me(Me.tablecustomers.belgiqueloisirs_idColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.belgiqueloisirs_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dvdpost_known_by() As Integer
            Get
                Return CType(Me(Me.tablecustomers.dvdpost_known_byColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.dvdpost_known_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property selected_for_email() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.selected_for_emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'selected_for_email' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.selected_for_emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_email_valid() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.is_email_validColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_email_valid' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.is_email_validColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property last_suspension_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.last_suspension_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'last_suspension_date' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.last_suspension_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_locked__for_reconduction() As Integer
            Get
                Return CType(Me(Me.tablecustomers.customers_locked__for_reconductionColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers.customers_locked__for_reconductionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property abo_not_served_reason() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.abo_not_served_reasonColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'abo_not_served_reason' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.abo_not_served_reasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rating_users() As UInteger
            Get
                Return CType(Me(Me.tablecustomers.rating_usersColumn),UInteger)
            End Get
            Set
                Me(Me.tablecustomers.rating_usersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rating_count() As UInteger
            Get
                Return CType(Me(Me.tablecustomers.rating_countColumn),UInteger)
            End Get
            Set
                Me(Me.tablecustomers.rating_countColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property marketing_ok() As String
            Get
                Return CType(Me(Me.tablecustomers.marketing_okColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.marketing_okColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property encrypted_password() As String
            Get
                Return CType(Me(Me.tablecustomers.encrypted_passwordColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.encrypted_passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property password_salt() As String
            Get
                Return CType(Me(Me.tablecustomers.password_saltColumn),String)
            End Get
            Set
                Me(Me.tablecustomers.password_saltColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reset_password_token() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.reset_password_tokenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'reset_password_token' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.reset_password_tokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remember_token() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.remember_tokenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'remember_token' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.remember_tokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remember_created_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.remember_created_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'remember_created_at' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.remember_created_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property authentication_token() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.authentication_tokenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'authentication_token' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.authentication_tokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property verification_code() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.verification_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'verification_code' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.verification_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refresh_token() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.refresh_tokenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refresh_token' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.refresh_tokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refresh_token_expires_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.refresh_token_expires_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refresh_token_expires_at' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.refresh_token_expires_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property access_token_expires_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.access_token_expires_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'access_token_expires_at' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.access_token_expires_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sleep() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.sleepColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sleep' in table 'customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.sleepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_dobNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_dobColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_dobNull()
            Me(Me.tablecustomers.customers_dobColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_faxNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_faxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_faxNull()
            Me(Me.tablecustomers.customers_faxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_newsletterNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_newsletterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_newsletterNull()
            Me(Me.tablecustomers.customers_newsletterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_newsletterpartnerNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_newsletterpartnerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_newsletterpartnerNull()
            Me(Me.tablecustomers.customers_newsletterpartnerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issponsoring_codeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.sponsoring_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsponsoring_codeNull()
            Me(Me.tablecustomers.sponsoring_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issponsored_codeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.sponsored_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsponsored_codeNull()
            Me(Me.tablecustomers.sponsored_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_validitytoNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_validitytoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_validitytoNull()
            Me(Me.tablecustomers.customers_abo_validitytoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_discount_recurring_to_dateNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_abo_discount_recurring_to_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_discount_recurring_to_dateNull()
            Me(Me.tablecustomers.customers_abo_discount_recurring_to_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdomiciliation_debiter_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.domiciliation_debiter_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdomiciliation_debiter_nameNull()
            Me(Me.tablecustomers.domiciliation_debiter_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdomiciliation_numberNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.domiciliation_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdomiciliation_numberNull()
            Me(Me.tablecustomers.domiciliation_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdomiciliation_account_numberNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.domiciliation_account_numberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdomiciliation_account_numberNull()
            Me(Me.tablecustomers.domiciliation_account_numberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isadult_pwdNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.adult_pwdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setadult_pwdNull()
            Me(Me.tablecustomers.adult_pwdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isogone_card_typeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ogone_card_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setogone_card_typeNull()
            Me(Me.tablecustomers.ogone_card_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isogone_card_noNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ogone_card_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setogone_card_noNull()
            Me(Me.tablecustomers.ogone_card_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isogone_exp_dateNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ogone_exp_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setogone_exp_dateNull()
            Me(Me.tablecustomers.ogone_exp_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isogone_ownerNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ogone_ownerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setogone_ownerNull()
            Me(Me.tablecustomers.ogone_ownerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.commentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcommentNull()
            Me(Me.tablecustomers.commentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_first_deliveryNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.date_first_deliveryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_first_deliveryNull()
            Me(Me.tablecustomers.date_first_deliveryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismail_wl_adult_not_sufficientNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.mail_wl_adult_not_sufficientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmail_wl_adult_not_sufficientNull()
            Me(Me.tablecustomers.mail_wl_adult_not_sufficientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismail_wl_norm_not_sufficientNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.mail_wl_norm_not_sufficientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmail_wl_norm_not_sufficientNull()
            Me(Me.tablecustomers.mail_wl_norm_not_sufficientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_info_date_of_last_logonNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_info_date_of_last_logonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_info_date_of_last_logonNull()
            Me(Me.tablecustomers.customers_info_date_of_last_logonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_info_number_of_logonsNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_info_number_of_logonsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_info_number_of_logonsNull()
            Me(Me.tablecustomers.customers_info_number_of_logonsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_info_date_account_createdNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_info_date_account_createdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_info_date_account_createdNull()
            Me(Me.tablecustomers.customers_info_date_account_createdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_info_date_account_last_modifiedNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.customers_info_date_account_last_modifiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_info_date_account_last_modifiedNull()
            Me(Me.tablecustomers.customers_info_date_account_last_modifiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isglobal_product_notificationsNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.global_product_notificationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setglobal_product_notificationsNull()
            Me(Me.tablecustomers.global_product_notificationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isselected_for_emailNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.selected_for_emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setselected_for_emailNull()
            Me(Me.tablecustomers.selected_for_emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_email_validNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.is_email_validColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_email_validNull()
            Me(Me.tablecustomers.is_email_validColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islast_suspension_dateNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.last_suspension_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlast_suspension_dateNull()
            Me(Me.tablecustomers.last_suspension_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isabo_not_served_reasonNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.abo_not_served_reasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setabo_not_served_reasonNull()
            Me(Me.tablecustomers.abo_not_served_reasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isreset_password_tokenNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.reset_password_tokenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setreset_password_tokenNull()
            Me(Me.tablecustomers.reset_password_tokenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isremember_tokenNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.remember_tokenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setremember_tokenNull()
            Me(Me.tablecustomers.remember_tokenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isremember_created_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.remember_created_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setremember_created_atNull()
            Me(Me.tablecustomers.remember_created_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isauthentication_tokenNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.authentication_tokenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setauthentication_tokenNull()
            Me(Me.tablecustomers.authentication_tokenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isverification_codeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.verification_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setverification_codeNull()
            Me(Me.tablecustomers.verification_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefresh_tokenNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.refresh_tokenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefresh_tokenNull()
            Me(Me.tablecustomers.refresh_tokenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefresh_token_expires_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.refresh_token_expires_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefresh_token_expires_atNull()
            Me(Me.tablecustomers.refresh_token_expires_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccess_token_expires_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.access_token_expires_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccess_token_expires_atNull()
            Me(Me.tablecustomers.access_token_expires_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssleepNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.sleepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsleepNull()
            Me(Me.tablecustomers.sleepColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customer_attributesRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomer_attributes As customer_attributesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomer_attributes = CType(Me.Table,customer_attributesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tablecustomer_attributes.idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomer_attributes.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customer_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.customer_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customer_id' in table 'customer_attributes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.customer_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property list_indicator_close() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.list_indicator_closeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'list_indicator_close' in table 'customer_attributes' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.list_indicator_closeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property number_of_logins() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.number_of_loginsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'number_of_logins' in table 'customer_attributes' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.number_of_loginsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property last_login_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.last_login_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'last_login_at' in table 'customer_attributes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.last_login_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property created_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.created_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'created_at' in table 'customer_attributes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.created_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property updated_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.updated_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'updated_at' in table 'customer_attributes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.updated_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vod_only() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablecustomer_attributes.vod_onlyColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vod_only' in table 'customer_attributes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomer_attributes.vod_onlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomer_idNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.customer_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomer_idNull()
            Me(Me.tablecustomer_attributes.customer_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islist_indicator_closeNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.list_indicator_closeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlist_indicator_closeNull()
            Me(Me.tablecustomer_attributes.list_indicator_closeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnumber_of_loginsNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.number_of_loginsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnumber_of_loginsNull()
            Me(Me.tablecustomer_attributes.number_of_loginsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islast_login_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.last_login_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlast_login_atNull()
            Me(Me.tablecustomer_attributes.last_login_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscreated_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.created_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcreated_atNull()
            Me(Me.tablecustomer_attributes.created_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupdated_atNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.updated_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupdated_atNull()
            Me(Me.tablecustomer_attributes.updated_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvod_onlyNull() As Boolean
            Return Me.IsNull(Me.tablecustomer_attributes.vod_onlyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvod_onlyNull()
            Me(Me.tablecustomer_attributes.vod_onlyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class address_book_allRow
        Inherits Global.System.Data.DataRow
        
        Private tableaddress_book_all As address_book_allDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaddress_book_all = CType(Me.Table,address_book_allDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_all.customers_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_all.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address_book_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_all.address_book_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_all.address_book_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_gender() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_genderColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_genderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_company() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_all.entry_companyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_company' in table 'address_book_all' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_companyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_firstname() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_firstnameColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_firstnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_lastname() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_lastnameColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_lastnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_street_address() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_street_addressColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_street_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_suburb() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_all.entry_suburbColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_suburb' in table 'address_book_all' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_suburbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_postcode() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_postcodeColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_postcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_city() As String
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_cityColumn),String)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_cityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_state() As String
            Get
                Try 
                    Return CType(Me(Me.tableaddress_book_all.entry_stateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entry_state' in table 'address_book_all' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_stateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_country_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_country_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_country_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entry_zone_id() As Integer
            Get
                Return CType(Me(Me.tableaddress_book_all.entry_zone_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaddress_book_all.entry_zone_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_companyNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_all.entry_companyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_companyNull()
            Me(Me.tableaddress_book_all.entry_companyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_suburbNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_all.entry_suburbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_suburbNull()
            Me(Me.tableaddress_book_all.entry_suburbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isentry_stateNull() As Boolean
            Return Me.IsNull(Me.tableaddress_book_all.entry_stateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setentry_stateNull()
            Me(Me.tableaddress_book_all.entry_stateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class customers_abo_payment_methodRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustomers_abo_payment_method As customers_abo_payment_methodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers_abo_payment_method = CType(Me.Table,customers_abo_payment_methodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_payment_method_id() As Integer
            Get
                Return CType(Me(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_abo_payment_method_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_abo_payment_method_name' in table 'customers_abo_"& _ 
                            "payment_method' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_abo_payment_method_nameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_abo_payment_method_nameNull()
            Me(Me.tablecustomers_abo_payment_method.customers_abo_payment_method_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers_search_resultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers_search_resultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers_search_resultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers_search_resultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class address_book_defaultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As address_book_defaultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As address_book_defaultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As address_book_defaultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class countryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As countryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As countryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As countryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_aboRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_aboRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_aboRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_aboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class aboRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As aboRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As aboRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As aboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class discount_codeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As discount_codeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As discount_codeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As discount_codeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class languagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As languagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As languagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As languagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class generalentityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As generalentityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As generalentityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As generalentityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class custservRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As custservRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As custservRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As custservRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class domiciliation_statusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As domiciliation_statusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As domiciliation_statusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As domiciliation_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class cc_expiration_statusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cc_expiration_statusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As cc_expiration_statusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As cc_expiration_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customer_attributesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customer_attributesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customer_attributesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customer_attributesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class address_book_allRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As address_book_allRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As address_book_allRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As address_book_allRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class customers_abo_payment_methodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As customers_abo_payment_methodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As customers_abo_payment_methodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As customers_abo_payment_methodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
